# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `discordrb` gem.
# Please instead update this file by running `bin/tapioca gem discordrb`.

# source://discordrb//lib/discordrb/voice/network.rb#18
::LIBSODIUM_AVAILABLE = T.let(T.unsafe(nil), FalseClass)

# source://discordrb//lib/discordrb/voice/encoder.rb#8
::OPUS_AVAILABLE = T.let(T.unsafe(nil), FalseClass)

# source://yard/0.9.28/lib/yard.rb#61
::RUBY18 = T.let(T.unsafe(nil), FalseClass)

# source://yard/0.9.28/lib/yard.rb#62
::RUBY19 = T.let(T.unsafe(nil), TrueClass)

# All discordrb functionality, to be extended by other files
module Discordrb
  class << self
    # Compares two objects based on IDs - either the objects' IDs are equal, or one object is equal to the other's ID.
    #
    # source://discordrb//lib/discordrb.rb#42
    def id_compare(one_id, other); end

    # Splits a message into chunks of 2000 characters. Attempts to split by lines if possible.
    #
    # @param msg [String] The message to split.
    # @return [Array<String>] the message split into chunks
    #
    # source://discordrb//lib/discordrb.rb#52
    def split_message(msg); end
  end
end

# @return [Integer] All available intents
#
# source://discordrb//lib/discordrb.rb#39
Discordrb::ALL_INTENTS = T.let(T.unsafe(nil), Integer)

# List of methods representing endpoints in Discord's API
module Discordrb::API
  private

  # Make an achievement icon URL from application ID, achievement ID, and icon hash
  #
  # source://discordrb//lib/discordrb/api.rb#216
  def achievement_icon_url(application_id, achievement_id, icon_hash, format = T.unsafe(nil)); end

  # Acknowledge that a message has been received
  # The last acknowledged message will be sent in the ready packet,
  # so this is an easy way to catch up on messages
  #
  # source://discordrb//lib/discordrb/api.rb#284
  def acknowledge_message(token, channel_id, message_id); end

  # @return [String] the currently used API base URL.
  #
  # source://discordrb//lib/discordrb/api.rb#20
  def api_base; end

  # Sets the API base URL to something.
  #
  # source://discordrb//lib/discordrb/api.rb#25
  def api_base=(value); end

  # Make an icon URL from application and icon IDs
  #
  # source://discordrb//lib/discordrb/api.rb#186
  def app_icon_url(app_id, icon_id, format = T.unsafe(nil)); end

  # Make an asset URL from application and asset IDs
  #
  # source://discordrb//lib/discordrb/api.rb#211
  def asset_url(application_id, asset_id, format = T.unsafe(nil)); end

  # Make a banner URL from server and banner IDs
  #
  # source://discordrb//lib/discordrb/api.rb#201
  def banner_url(server_id, banner_id, format = T.unsafe(nil)); end

  # @return [String] the bot name, previously specified using {.bot_name=}.
  #
  # source://discordrb//lib/discordrb/api.rb#35
  def bot_name; end

  # Sets the bot name to something. Used in {.user_agent}. For the bot's username, see {Profile#username=}.
  #
  # source://discordrb//lib/discordrb/api.rb#40
  def bot_name=(value); end

  # @return [String] the currently used CDN url
  #
  # source://discordrb//lib/discordrb/api.rb#30
  def cdn_url; end

  # Create an OAuth application
  #
  # source://discordrb//lib/discordrb/api.rb#245
  def create_oauth_application(token, name, redirect_uris); end

  # Make an emoji icon URL from emoji ID
  #
  # source://discordrb//lib/discordrb/api.rb#206
  def emoji_icon_url(emoji_id, format = T.unsafe(nil)); end

  # Get the gateway to be used
  #
  # source://discordrb//lib/discordrb/api.rb#296
  def gateway(token); end

  # Get the gateway to be used, with additional information for sharding and
  # session start limits
  #
  # source://discordrb//lib/discordrb/api.rb#308
  def gateway_bot(token); end

  # Handles pre-emptive rate limiting by waiting the given mutex by the difference of the Date header to the
  # X-Ratelimit-Reset header, thus making sure we don't get 429'd in any subsequent requests.
  #
  # source://discordrb//lib/discordrb/api.rb#157
  def handle_preemptive_rl(headers, mutex, key); end

  # Make an icon URL from server and icon IDs
  #
  # source://discordrb//lib/discordrb/api.rb#181
  def icon_url(server_id, icon_id, format = T.unsafe(nil)); end

  # Login to the server
  #
  # source://discordrb//lib/discordrb/api.rb#221
  def login(email, password); end

  # Logout from the server
  #
  # source://discordrb//lib/discordrb/api.rb#233
  def logout(token); end

  # Wait for a specified mutex to unlock and do nothing with it afterwards.
  #
  # source://discordrb//lib/discordrb/api.rb#72
  def mutex_wait(mutex); end

  # Get the bot's OAuth application's information
  #
  # source://discordrb//lib/discordrb/api.rb#271
  def oauth_application(token); end

  # Performs a RestClient request.
  #
  # @param type [Symbol] The type of HTTP request to use.
  # @param attributes [Array] The attributes for the request.
  #
  # source://discordrb//lib/discordrb/api.rb#80
  def raw_request(type, attributes); end

  # Make an API request, including rate limit handling.
  #
  # source://discordrb//lib/discordrb/api.rb#93
  def request(key, major_parameter, type, *attributes); end

  # Resets all rate limit mutexes
  #
  # source://discordrb//lib/discordrb/api.rb#61
  def reset_mutexes; end

  # Make a splash URL from server and splash IDs
  #
  # source://discordrb//lib/discordrb/api.rb#196
  def splash_url(server_id, splash_id, format = T.unsafe(nil)); end

  # Wait a specified amount of time synchronised with the specified mutex.
  #
  # source://discordrb//lib/discordrb/api.rb#67
  def sync_wait(time, mutex); end

  # Perform rate limit tracing. All this method does is log the current backtrace to the console with the `:ratelimit`
  # level.
  #
  # @param reason [String] the reason to include with the backtrace.
  #
  # source://discordrb//lib/discordrb/api.rb#167
  def trace(reason); end

  # Changes the rate limit tracing behaviour. If rate limit tracing is on, a full backtrace will be logged on every RL
  # hit.
  #
  # @param value [true, false] whether or not to enable rate limit tracing
  #
  # source://discordrb//lib/discordrb/api.rb#47
  def trace=(value); end

  # Change an OAuth application's properties
  #
  # source://discordrb//lib/discordrb/api.rb#258
  def update_oauth_application(token, name, redirect_uris, description = T.unsafe(nil), icon = T.unsafe(nil)); end

  # Generate a user agent identifying this requester as discordrb.
  #
  # source://discordrb//lib/discordrb/api.rb#52
  def user_agent; end

  # Validate a token (this request will fail if the token is invalid)
  #
  # source://discordrb//lib/discordrb/api.rb#319
  def validate_token(token); end

  # Get a list of available voice regions
  #
  # source://discordrb//lib/discordrb/api.rb#332
  def voice_regions(token); end

  # Make a widget picture URL from server ID
  #
  # source://discordrb//lib/discordrb/api.rb#191
  def widget_url(server_id, style = T.unsafe(nil)); end

  class << self
    # Make an achievement icon URL from application ID, achievement ID, and icon hash
    #
    # source://discordrb//lib/discordrb/api.rb#216
    def achievement_icon_url(application_id, achievement_id, icon_hash, format = T.unsafe(nil)); end

    # Acknowledge that a message has been received
    # The last acknowledged message will be sent in the ready packet,
    # so this is an easy way to catch up on messages
    #
    # source://discordrb//lib/discordrb/api.rb#284
    def acknowledge_message(token, channel_id, message_id); end

    # @return [String] the currently used API base URL.
    #
    # source://discordrb//lib/discordrb/api.rb#20
    def api_base; end

    # Sets the API base URL to something.
    #
    # source://discordrb//lib/discordrb/api.rb#25
    def api_base=(value); end

    # Make an icon URL from application and icon IDs
    #
    # source://discordrb//lib/discordrb/api.rb#186
    def app_icon_url(app_id, icon_id, format = T.unsafe(nil)); end

    # Make an asset URL from application and asset IDs
    #
    # source://discordrb//lib/discordrb/api.rb#211
    def asset_url(application_id, asset_id, format = T.unsafe(nil)); end

    # Make a banner URL from server and banner IDs
    #
    # source://discordrb//lib/discordrb/api.rb#201
    def banner_url(server_id, banner_id, format = T.unsafe(nil)); end

    # @return [String] the bot name, previously specified using {.bot_name=}.
    #
    # source://discordrb//lib/discordrb/api.rb#35
    def bot_name; end

    # Sets the bot name to something. Used in {.user_agent}. For the bot's username, see {Profile#username=}.
    #
    # source://discordrb//lib/discordrb/api.rb#40
    def bot_name=(value); end

    # @return [String] the currently used CDN url
    #
    # source://discordrb//lib/discordrb/api.rb#30
    def cdn_url; end

    # Create an OAuth application
    #
    # source://discordrb//lib/discordrb/api.rb#245
    def create_oauth_application(token, name, redirect_uris); end

    # Make an emoji icon URL from emoji ID
    #
    # source://discordrb//lib/discordrb/api.rb#206
    def emoji_icon_url(emoji_id, format = T.unsafe(nil)); end

    # Get the gateway to be used
    #
    # source://discordrb//lib/discordrb/api.rb#296
    def gateway(token); end

    # Get the gateway to be used, with additional information for sharding and
    # session start limits
    #
    # source://discordrb//lib/discordrb/api.rb#308
    def gateway_bot(token); end

    # Handles pre-emptive rate limiting by waiting the given mutex by the difference of the Date header to the
    # X-Ratelimit-Reset header, thus making sure we don't get 429'd in any subsequent requests.
    #
    # source://discordrb//lib/discordrb/api.rb#157
    def handle_preemptive_rl(headers, mutex, key); end

    # Make an icon URL from server and icon IDs
    #
    # source://discordrb//lib/discordrb/api.rb#181
    def icon_url(server_id, icon_id, format = T.unsafe(nil)); end

    # Login to the server
    #
    # source://discordrb//lib/discordrb/api.rb#221
    def login(email, password); end

    # Logout from the server
    #
    # source://discordrb//lib/discordrb/api.rb#233
    def logout(token); end

    # Wait for a specified mutex to unlock and do nothing with it afterwards.
    #
    # source://discordrb//lib/discordrb/api.rb#72
    def mutex_wait(mutex); end

    # Get the bot's OAuth application's information
    #
    # source://discordrb//lib/discordrb/api.rb#271
    def oauth_application(token); end

    # Performs a RestClient request.
    #
    # @param type [Symbol] The type of HTTP request to use.
    # @param attributes [Array] The attributes for the request.
    #
    # source://discordrb//lib/discordrb/api.rb#80
    def raw_request(type, attributes); end

    # Make an API request, including rate limit handling.
    #
    # source://discordrb//lib/discordrb/api.rb#93
    def request(key, major_parameter, type, *attributes); end

    # Resets all rate limit mutexes
    #
    # source://discordrb//lib/discordrb/api.rb#61
    def reset_mutexes; end

    # Make a splash URL from server and splash IDs
    #
    # source://discordrb//lib/discordrb/api.rb#196
    def splash_url(server_id, splash_id, format = T.unsafe(nil)); end

    # Wait a specified amount of time synchronised with the specified mutex.
    #
    # source://discordrb//lib/discordrb/api.rb#67
    def sync_wait(time, mutex); end

    # Perform rate limit tracing. All this method does is log the current backtrace to the console with the `:ratelimit`
    # level.
    #
    # @param reason [String] the reason to include with the backtrace.
    #
    # source://discordrb//lib/discordrb/api.rb#167
    def trace(reason); end

    # Changes the rate limit tracing behaviour. If rate limit tracing is on, a full backtrace will be logged on every RL
    # hit.
    #
    # @param value [true, false] whether or not to enable rate limit tracing
    #
    # source://discordrb//lib/discordrb/api.rb#47
    def trace=(value); end

    # Change an OAuth application's properties
    #
    # source://discordrb//lib/discordrb/api.rb#258
    def update_oauth_application(token, name, redirect_uris, description = T.unsafe(nil), icon = T.unsafe(nil)); end

    # Generate a user agent identifying this requester as discordrb.
    #
    # source://discordrb//lib/discordrb/api.rb#52
    def user_agent; end

    # Validate a token (this request will fail if the token is invalid)
    #
    # source://discordrb//lib/discordrb/api.rb#319
    def validate_token(token); end

    # Get a list of available voice regions
    #
    # source://discordrb//lib/discordrb/api.rb#332
    def voice_regions(token); end

    # Make a widget picture URL from server ID
    #
    # source://discordrb//lib/discordrb/api.rb#191
    def widget_url(server_id, style = T.unsafe(nil)); end
  end
end

# The base URL of the Discord REST API.
#
# source://discordrb//lib/discordrb/api.rb#12
Discordrb::API::APIBASE = T.let(T.unsafe(nil), String)

# The URL of Discord's CDN
#
# source://discordrb//lib/discordrb/api.rb#15
Discordrb::API::CDN_URL = T.let(T.unsafe(nil), String)

# API calls for Channel
module Discordrb::API::Channel
  private

  # Add a user to a group channel.
  #
  # source://discordrb//lib/discordrb/api/channel.rb#366
  def add_group_user(token, group_channel_id, user_id); end

  # Delete messages in bulk
  # https://discordapp.com/developers/docs/resources/channel#bulk-delete-messages
  #
  # source://discordrb//lib/discordrb/api/channel.rb#146
  def bulk_delete_messages(token, channel_id, messages = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Create an empty group channel.
  #
  # source://discordrb//lib/discordrb/api/channel.rb#334
  def create_empty_group(token, bot_user_id); end

  # Create a group channel.
  #
  # source://discordrb//lib/discordrb/api/channel.rb#347
  def create_group(token, pm_channel_id, user_id); end

  # Create an instant invite from a server or a channel id
  # https://discord.com/developers/docs/resources/channel#create-channel-invite
  #
  # source://discordrb//lib/discordrb/api/channel.rb#255
  def create_invite(token, channel_id, max_age = T.unsafe(nil), max_uses = T.unsafe(nil), temporary = T.unsafe(nil), unique = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Send a message to a channel
  # https://discordapp.com/developers/docs/resources/channel#create-message
  #
  # @param attachments [Array<File>, nil] Attachments to use with `attachment://` in embeds. See
  #   https://discord.com/developers/docs/resources/channel#create-message-using-attachments-within-embeds
  #
  # source://discordrb//lib/discordrb/api/channel.rb#77
  def create_message(token, channel_id, message, tts = T.unsafe(nil), embed = T.unsafe(nil), nonce = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # Create a reaction on a message using this client
  # https://discord.com/developers/docs/resources/channel#create-reaction
  #
  # source://discordrb//lib/discordrb/api/channel.rb#161
  def create_reaction(token, channel_id, message_id, emoji); end

  # Create a webhook
  # https://discord.com/developers/docs/resources/webhook#create-webhook
  #
  # source://discordrb//lib/discordrb/api/channel.rb#404
  def create_webhook(token, channel_id, name, avatar = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Delete a channel
  # https://discord.com/developers/docs/resources/channel#deleteclose-channel
  #
  # source://discordrb//lib/discordrb/api/channel.rb#38
  def delete(token, channel_id, reason = T.unsafe(nil)); end

  # Deletes all reactions on a message from all clients
  # https://discord.com/developers/docs/resources/channel#delete-all-reactions
  #
  # source://discordrb//lib/discordrb/api/channel.rb#216
  def delete_all_reactions(token, channel_id, message_id); end

  # Delete a message
  # https://discordapp.com/developers/docs/resources/channel#delete-message
  #
  # source://discordrb//lib/discordrb/api/channel.rb#133
  def delete_message(token, channel_id, message_id, reason = T.unsafe(nil)); end

  # Delete this client's own reaction on a message
  # https://discord.com/developers/docs/resources/channel#delete-own-reaction
  #
  # source://discordrb//lib/discordrb/api/channel.rb#176
  def delete_own_reaction(token, channel_id, message_id, emoji); end

  # Delete channel permission
  # https://discord.com/developers/docs/resources/channel#delete-channel-permission
  #
  # source://discordrb//lib/discordrb/api/channel.rb#270
  def delete_permission(token, channel_id, overwrite_id, reason = T.unsafe(nil)); end

  # Delete another client's reaction on a message
  # https://discord.com/developers/docs/resources/channel#delete-user-reaction
  #
  # source://discordrb//lib/discordrb/api/channel.rb#189
  def delete_user_reaction(token, channel_id, message_id, emoji, user_id); end

  # Edit a message
  # https://discord.com/developers/docs/resources/channel#edit-message
  #
  # source://discordrb//lib/discordrb/api/channel.rb#119
  def edit_message(token, channel_id, message_id, message, mentions = T.unsafe(nil), embed = T.unsafe(nil)); end

  # Get a list of clients who reacted with a specific reaction on a message
  # https://discord.com/developers/docs/resources/channel#get-reactions
  #
  # source://discordrb//lib/discordrb/api/channel.rb#202
  def get_reactions(token, channel_id, message_id, emoji, before_id, after_id, limit = T.unsafe(nil)); end

  # Get a channel's invite list
  # https://discord.com/developers/docs/resources/channel#get-channel-invites
  #
  # source://discordrb//lib/discordrb/api/channel.rb#243
  def invites(token, channel_id); end

  # Leave a group channel.
  #
  # source://discordrb//lib/discordrb/api/channel.rb#391
  def leave_group(token, group_channel_id); end

  # Get a single message from a channel's history by id
  # https://discord.com/developers/docs/resources/channel#get-channel-message
  #
  # source://discordrb//lib/discordrb/api/channel.rb#63
  def message(token, channel_id, message_id); end

  # Get a list of messages from a channel's history
  # https://discord.com/developers/docs/resources/channel#get-channel-messages
  #
  # source://discordrb//lib/discordrb/api/channel.rb#51
  def messages(token, channel_id, amount, before = T.unsafe(nil), after = T.unsafe(nil), around = T.unsafe(nil)); end

  # Pin a message
  # https://discordapp.com/developers/docs/resources/channel#add-pinned-channel-message
  #
  # source://discordrb//lib/discordrb/api/channel.rb#308
  def pin_message(token, channel_id, message_id, reason = T.unsafe(nil)); end

  # Get a list of pinned messages in a channel
  # https://discord.com/developers/docs/resources/channel#get-pinned-messages
  #
  # source://discordrb//lib/discordrb/api/channel.rb#296
  def pinned_messages(token, channel_id); end

  # Remove a user from a group channel.
  #
  # source://discordrb//lib/discordrb/api/channel.rb#379
  def remove_group_user(token, group_channel_id, user_id); end

  # Get a channel's data
  # https://discord.com/developers/docs/resources/channel#get-channel
  #
  # source://discordrb//lib/discordrb/api/channel.rb#9
  def resolve(token, channel_id); end

  # Start typing (needs to be resent every 5 seconds to keep up the typing)
  # https://discord.com/developers/docs/resources/channel#trigger-typing-indicator
  #
  # source://discordrb//lib/discordrb/api/channel.rb#283
  def start_typing(token, channel_id); end

  # Unpin a message
  # https://discordapp.com/developers/docs/resources/channel#delete-pinned-channel-message
  #
  # source://discordrb//lib/discordrb/api/channel.rb#322
  def unpin_message(token, channel_id, message_id, reason = T.unsafe(nil)); end

  # Update a channel's data
  # https://discord.com/developers/docs/resources/channel#modify-channel
  #
  # source://discordrb//lib/discordrb/api/channel.rb#21
  def update(token, channel_id, name, topic, position, bitrate, user_limit, nsfw, permission_overwrites = T.unsafe(nil), parent_id = T.unsafe(nil), rate_limit_per_user = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Update a channels permission for a role or member
  # https://discord.com/developers/docs/resources/channel#edit-channel-permissions
  #
  # source://discordrb//lib/discordrb/api/channel.rb#228
  def update_permission(token, channel_id, overwrite_id, allow, deny, type, reason = T.unsafe(nil)); end

  # Send a file as a message to a channel
  # https://discord.com/developers/docs/resources/channel#upload-file
  #
  # source://discordrb//lib/discordrb/api/channel.rb#106
  def upload_file(token, channel_id, file, caption: T.unsafe(nil), tts: T.unsafe(nil)); end

  # Get channel webhooks
  # https://discord.com/developers/docs/resources/webhook#get-channel-webhooks
  #
  # source://discordrb//lib/discordrb/api/channel.rb#419
  def webhooks(token, channel_id); end

  class << self
    # Add a user to a group channel.
    #
    # source://discordrb//lib/discordrb/api/channel.rb#366
    def add_group_user(token, group_channel_id, user_id); end

    # Delete messages in bulk
    # https://discordapp.com/developers/docs/resources/channel#bulk-delete-messages
    #
    # source://discordrb//lib/discordrb/api/channel.rb#146
    def bulk_delete_messages(token, channel_id, messages = T.unsafe(nil), reason = T.unsafe(nil)); end

    # Create an empty group channel.
    #
    # source://discordrb//lib/discordrb/api/channel.rb#334
    def create_empty_group(token, bot_user_id); end

    # Create a group channel.
    #
    # source://discordrb//lib/discordrb/api/channel.rb#347
    def create_group(token, pm_channel_id, user_id); end

    # Create an instant invite from a server or a channel id
    # https://discord.com/developers/docs/resources/channel#create-channel-invite
    #
    # source://discordrb//lib/discordrb/api/channel.rb#255
    def create_invite(token, channel_id, max_age = T.unsafe(nil), max_uses = T.unsafe(nil), temporary = T.unsafe(nil), unique = T.unsafe(nil), reason = T.unsafe(nil)); end

    # Send a message to a channel
    # https://discordapp.com/developers/docs/resources/channel#create-message
    #
    # @param attachments [Array<File>, nil] Attachments to use with `attachment://` in embeds. See
    #   https://discord.com/developers/docs/resources/channel#create-message-using-attachments-within-embeds
    #
    # source://discordrb//lib/discordrb/api/channel.rb#77
    def create_message(token, channel_id, message, tts = T.unsafe(nil), embed = T.unsafe(nil), nonce = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

    # Create a reaction on a message using this client
    # https://discord.com/developers/docs/resources/channel#create-reaction
    #
    # source://discordrb//lib/discordrb/api/channel.rb#161
    def create_reaction(token, channel_id, message_id, emoji); end

    # Create a webhook
    # https://discord.com/developers/docs/resources/webhook#create-webhook
    #
    # source://discordrb//lib/discordrb/api/channel.rb#404
    def create_webhook(token, channel_id, name, avatar = T.unsafe(nil), reason = T.unsafe(nil)); end

    # Delete a channel
    # https://discord.com/developers/docs/resources/channel#deleteclose-channel
    #
    # source://discordrb//lib/discordrb/api/channel.rb#38
    def delete(token, channel_id, reason = T.unsafe(nil)); end

    # Deletes all reactions on a message from all clients
    # https://discord.com/developers/docs/resources/channel#delete-all-reactions
    #
    # source://discordrb//lib/discordrb/api/channel.rb#216
    def delete_all_reactions(token, channel_id, message_id); end

    # Delete a message
    # https://discordapp.com/developers/docs/resources/channel#delete-message
    #
    # source://discordrb//lib/discordrb/api/channel.rb#133
    def delete_message(token, channel_id, message_id, reason = T.unsafe(nil)); end

    # Delete this client's own reaction on a message
    # https://discord.com/developers/docs/resources/channel#delete-own-reaction
    #
    # source://discordrb//lib/discordrb/api/channel.rb#176
    def delete_own_reaction(token, channel_id, message_id, emoji); end

    # Delete channel permission
    # https://discord.com/developers/docs/resources/channel#delete-channel-permission
    #
    # source://discordrb//lib/discordrb/api/channel.rb#270
    def delete_permission(token, channel_id, overwrite_id, reason = T.unsafe(nil)); end

    # Delete another client's reaction on a message
    # https://discord.com/developers/docs/resources/channel#delete-user-reaction
    #
    # source://discordrb//lib/discordrb/api/channel.rb#189
    def delete_user_reaction(token, channel_id, message_id, emoji, user_id); end

    # Edit a message
    # https://discord.com/developers/docs/resources/channel#edit-message
    #
    # source://discordrb//lib/discordrb/api/channel.rb#119
    def edit_message(token, channel_id, message_id, message, mentions = T.unsafe(nil), embed = T.unsafe(nil)); end

    # Get a list of clients who reacted with a specific reaction on a message
    # https://discord.com/developers/docs/resources/channel#get-reactions
    #
    # source://discordrb//lib/discordrb/api/channel.rb#202
    def get_reactions(token, channel_id, message_id, emoji, before_id, after_id, limit = T.unsafe(nil)); end

    # Get a channel's invite list
    # https://discord.com/developers/docs/resources/channel#get-channel-invites
    #
    # source://discordrb//lib/discordrb/api/channel.rb#243
    def invites(token, channel_id); end

    # Leave a group channel.
    #
    # source://discordrb//lib/discordrb/api/channel.rb#391
    def leave_group(token, group_channel_id); end

    # Get a single message from a channel's history by id
    # https://discord.com/developers/docs/resources/channel#get-channel-message
    #
    # source://discordrb//lib/discordrb/api/channel.rb#63
    def message(token, channel_id, message_id); end

    # Get a list of messages from a channel's history
    # https://discord.com/developers/docs/resources/channel#get-channel-messages
    #
    # source://discordrb//lib/discordrb/api/channel.rb#51
    def messages(token, channel_id, amount, before = T.unsafe(nil), after = T.unsafe(nil), around = T.unsafe(nil)); end

    # Pin a message
    # https://discordapp.com/developers/docs/resources/channel#add-pinned-channel-message
    #
    # source://discordrb//lib/discordrb/api/channel.rb#308
    def pin_message(token, channel_id, message_id, reason = T.unsafe(nil)); end

    # Get a list of pinned messages in a channel
    # https://discord.com/developers/docs/resources/channel#get-pinned-messages
    #
    # source://discordrb//lib/discordrb/api/channel.rb#296
    def pinned_messages(token, channel_id); end

    # Remove a user from a group channel.
    #
    # source://discordrb//lib/discordrb/api/channel.rb#379
    def remove_group_user(token, group_channel_id, user_id); end

    # Get a channel's data
    # https://discord.com/developers/docs/resources/channel#get-channel
    #
    # source://discordrb//lib/discordrb/api/channel.rb#9
    def resolve(token, channel_id); end

    # Start typing (needs to be resent every 5 seconds to keep up the typing)
    # https://discord.com/developers/docs/resources/channel#trigger-typing-indicator
    #
    # source://discordrb//lib/discordrb/api/channel.rb#283
    def start_typing(token, channel_id); end

    # Unpin a message
    # https://discordapp.com/developers/docs/resources/channel#delete-pinned-channel-message
    #
    # source://discordrb//lib/discordrb/api/channel.rb#322
    def unpin_message(token, channel_id, message_id, reason = T.unsafe(nil)); end

    # Update a channel's data
    # https://discord.com/developers/docs/resources/channel#modify-channel
    #
    # source://discordrb//lib/discordrb/api/channel.rb#21
    def update(token, channel_id, name, topic, position, bitrate, user_limit, nsfw, permission_overwrites = T.unsafe(nil), parent_id = T.unsafe(nil), rate_limit_per_user = T.unsafe(nil), reason = T.unsafe(nil)); end

    # Update a channels permission for a role or member
    # https://discord.com/developers/docs/resources/channel#edit-channel-permissions
    #
    # source://discordrb//lib/discordrb/api/channel.rb#228
    def update_permission(token, channel_id, overwrite_id, allow, deny, type, reason = T.unsafe(nil)); end

    # Send a file as a message to a channel
    # https://discord.com/developers/docs/resources/channel#upload-file
    #
    # source://discordrb//lib/discordrb/api/channel.rb#106
    def upload_file(token, channel_id, file, caption: T.unsafe(nil), tts: T.unsafe(nil)); end

    # Get channel webhooks
    # https://discord.com/developers/docs/resources/webhook#get-channel-webhooks
    #
    # source://discordrb//lib/discordrb/api/channel.rb#419
    def webhooks(token, channel_id); end
  end
end

# API calls for Invite object
module Discordrb::API::Invite
  private

  # Join a server using an invite
  # https://discord.com/developers/docs/resources/invite#accept-invite
  #
  # source://discordrb//lib/discordrb/api/invite.rb#34
  def accept(token, invite_code); end

  # Delete an invite by code
  # https://discord.com/developers/docs/resources/invite#delete-invite
  #
  # source://discordrb//lib/discordrb/api/invite.rb#21
  def delete(token, code, reason = T.unsafe(nil)); end

  # Resolve an invite
  # https://discord.com/developers/docs/resources/invite#get-invite
  #
  # source://discordrb//lib/discordrb/api/invite.rb#9
  def resolve(token, invite_code, counts = T.unsafe(nil)); end

  class << self
    # Join a server using an invite
    # https://discord.com/developers/docs/resources/invite#accept-invite
    #
    # source://discordrb//lib/discordrb/api/invite.rb#34
    def accept(token, invite_code); end

    # Delete an invite by code
    # https://discord.com/developers/docs/resources/invite#delete-invite
    #
    # source://discordrb//lib/discordrb/api/invite.rb#21
    def delete(token, code, reason = T.unsafe(nil)); end

    # Resolve an invite
    # https://discord.com/developers/docs/resources/invite#get-invite
    #
    # source://discordrb//lib/discordrb/api/invite.rb#9
    def resolve(token, invite_code, counts = T.unsafe(nil)); end
  end
end

# API calls for Server
module Discordrb::API::Server
  private

  # Adds a custom emoji.
  # https://discord.com/developers/docs/resources/emoji#create-guild-emoji
  #
  # source://discordrb//lib/discordrb/api/server.rb#459
  def add_emoji(token, server_id, image, name, roles = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Adds a member to a server with an OAuth2 Bearer token that has been granted `guilds.join`
  # https://discord.com/developers/docs/resources/guild#add-guild-member
  #
  # source://discordrb//lib/discordrb/api/server.rb#525
  def add_member(token, server_id, user_id, access_token, nick = T.unsafe(nil), roles = T.unsafe(nil), mute = T.unsafe(nil), deaf = T.unsafe(nil)); end

  # Adds a single role to a member
  # https://discord.com/developers/docs/resources/guild#add-guild-member-role
  #
  # source://discordrb//lib/discordrb/api/server.rb#289
  def add_member_role(token, server_id, user_id, role_id, reason = T.unsafe(nil)); end

  # Gets a server's audit logs
  # https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log
  #
  # source://discordrb//lib/discordrb/api/server.rb#354
  def audit_logs(token, server_id, limit, user_id = T.unsafe(nil), action_type = T.unsafe(nil), before = T.unsafe(nil)); end

  # Ban a user from a server and delete their messages from the last message_days days
  # https://discord.com/developers/docs/resources/guild#create-guild-ban
  #
  # source://discordrb//lib/discordrb/api/server.rb#187
  def ban_user(token, server_id, user_id, message_days, reason = T.unsafe(nil)); end

  # Get a server's banned users
  # https://discord.com/developers/docs/resources/guild#get-guild-bans
  #
  # source://discordrb//lib/discordrb/api/server.rb#175
  def bans(token, server_id); end

  # Begin server prune
  # https://discord.com/developers/docs/resources/guild#begin-guild-prune
  #
  # source://discordrb//lib/discordrb/api/server.rb#328
  def begin_prune(token, server_id, days, reason = T.unsafe(nil)); end

  # Get a server's channels list
  # https://discord.com/developers/docs/resources/guild#get-guild-channels
  #
  # source://discordrb//lib/discordrb/api/server.rb#76
  def channels(token, server_id); end

  # Create a server
  # https://discord.com/developers/docs/resources/guild#create-guild
  #
  # source://discordrb//lib/discordrb/api/server.rb#9
  def create(token, name, region = T.unsafe(nil)); end

  # Create a channel
  # https://discord.com/developers/docs/resources/guild#create-guild-channel
  #
  # source://discordrb//lib/discordrb/api/server.rb#88
  def create_channel(token, server_id, name, type, topic, bitrate, user_limit, permission_overwrites, parent_id, nsfw, rate_limit_per_user, position, reason = T.unsafe(nil)); end

  # Create a server integration
  # https://discordapp.com/developers/docs/resources/guild#create-guild-integration
  #
  # source://discordrb//lib/discordrb/api/server.rb#378
  def create_integration(token, server_id, type, id, reason = T.unsafe(nil)); end

  # Create a role (parameters such as name and colour if not set can be set by update_role afterwards)
  # Permissions are the Discord defaults; allowed: invite creation, reading/sending messages,
  # sending TTS messages, embedding links, sending files, reading the history, mentioning everybody,
  # connecting to voice, speaking and voice activity (push-to-talk isn't mandatory)
  # https://discord.com/developers/docs/resources/guild#get-guild-roles
  #
  # source://discordrb//lib/discordrb/api/server.rb#229
  def create_role(token, server_id, name, colour, hoist, mentionable, packed_permissions, reason = T.unsafe(nil)); end

  # Delete a server
  # https://discord.com/developers/docs/resources/guild#delete-guild
  #
  # source://discordrb//lib/discordrb/api/server.rb#64
  def delete(token, server_id); end

  # Deletes a custom emoji
  # https://discord.com/developers/docs/resources/emoji#delete-guild-emoji
  #
  # source://discordrb//lib/discordrb/api/server.rb#489
  def delete_emoji(token, server_id, emoji_id, reason = T.unsafe(nil)); end

  # Delete a server integration
  # https://discordapp.com/developers/docs/resources/guild#delete-guild-integration
  #
  # source://discordrb//lib/discordrb/api/server.rb#406
  def delete_integration(token, server_id, integration_id, reason = T.unsafe(nil)); end

  # Delete a role
  # https://discord.com/developers/docs/resources/guild#delete-guild-role
  #
  # source://discordrb//lib/discordrb/api/server.rb#276
  def delete_role(token, server_id, role_id, reason = T.unsafe(nil)); end

  # Changes an emoji name and/or roles.
  # https://discord.com/developers/docs/resources/emoji#modify-guild-emoji
  #
  # source://discordrb//lib/discordrb/api/server.rb#474
  def edit_emoji(token, server_id, emoji_id, name, roles = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Retrieves a server's embed information
  # https://discord.com/developers/docs/resources/guild#get-guild-embed
  #
  # source://discordrb//lib/discordrb/api/server.rb#432
  def embed(token, server_id); end

  # Get server integrations
  # https://discord.com/developers/docs/resources/guild#get-guild-integrations
  #
  # source://discordrb//lib/discordrb/api/server.rb#366
  def integrations(token, server_id); end

  # Get invites from server
  # https://discord.com/developers/docs/resources/guild#get-guild-invites
  #
  # source://discordrb//lib/discordrb/api/server.rb#342
  def invites(token, server_id); end

  # Modify a server's embed settings
  # https://discord.com/developers/docs/resources/guild#modify-guild-embed
  #
  # source://discordrb//lib/discordrb/api/server.rb#444
  def modify_embed(token, server_id, enabled, channel_id, reason = T.unsafe(nil)); end

  # Get server prune count
  # https://discord.com/developers/docs/resources/guild#get-guild-prune-count
  #
  # source://discordrb//lib/discordrb/api/server.rb#316
  def prune_count(token, server_id, days); end

  # Available voice regions for this server
  #
  # source://discordrb//lib/discordrb/api/server.rb#501
  def regions(token, server_id); end

  # Remove user from server
  # https://discord.com/developers/docs/resources/guild#remove-guild-member
  #
  # source://discordrb//lib/discordrb/api/server.rb#161
  def remove_member(token, server_id, user_id, reason = T.unsafe(nil)); end

  # Removes a single role from a member
  # https://discord.com/developers/docs/resources/guild#remove-guild-member-role
  #
  # source://discordrb//lib/discordrb/api/server.rb#303
  def remove_member_role(token, server_id, user_id, role_id, reason = T.unsafe(nil)); end

  # Get a server's data
  # https://discord.com/developers/docs/resources/guild#get-guild
  #
  # source://discordrb//lib/discordrb/api/server.rb#23
  def resolve(token, server_id, with_counts = T.unsafe(nil)); end

  # Get a member's data
  # https://discord.com/developers/docs/resources/guild#get-guild-member
  #
  # source://discordrb//lib/discordrb/api/server.rb#117
  def resolve_member(token, server_id, user_id); end

  # Gets members from the server
  # https://discord.com/developers/docs/resources/guild#list-guild-members
  #
  # source://discordrb//lib/discordrb/api/server.rb#129
  def resolve_members(token, server_id, limit, after = T.unsafe(nil)); end

  # Get server roles
  # https://discord.com/developers/docs/resources/guild#get-guild-roles
  #
  # source://discordrb//lib/discordrb/api/server.rb#214
  def roles(token, server_id); end

  # Sync an integration
  # https://discord.com/developers/docs/resources/guild#sync-guild-integration
  #
  # source://discordrb//lib/discordrb/api/server.rb#419
  def sync_integration(token, server_id, integration_id); end

  # Transfer server ownership
  #
  # source://discordrb//lib/discordrb/api/server.rb#49
  def transfer_ownership(token, server_id, user_id, reason = T.unsafe(nil)); end

  # Unban a user from a server
  # https://discord.com/developers/docs/resources/guild#remove-guild-ban
  #
  # source://discordrb//lib/discordrb/api/server.rb#201
  def unban_user(token, server_id, user_id, reason = T.unsafe(nil)); end

  # Update a server
  # https://discord.com/developers/docs/resources/guild#modify-guild
  #
  # source://discordrb//lib/discordrb/api/server.rb#35
  def update(token, server_id, name, region, icon, afk_channel_id, afk_timeout, splash, default_message_notifications, verification_level, explicit_content_filter, system_channel_id, reason = T.unsafe(nil)); end

  # Update a channels position
  # https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions
  #
  # source://discordrb//lib/discordrb/api/server.rb#103
  def update_channel_positions(token, server_id, positions); end

  # Update integration from server
  # https://discord.com/developers/docs/resources/guild#modify-guild-integration
  #
  # source://discordrb//lib/discordrb/api/server.rb#392
  def update_integration(token, server_id, integration_id, expire_behavior, expire_grace_period, enable_emoticons); end

  # Update a user properties
  # https://discord.com/developers/docs/resources/guild#modify-guild-member
  #
  # source://discordrb//lib/discordrb/api/server.rb#141
  def update_member(token, server_id, user_id, nick: T.unsafe(nil), roles: T.unsafe(nil), mute: T.unsafe(nil), deaf: T.unsafe(nil), channel_id: T.unsafe(nil), reason: T.unsafe(nil)); end

  # Update a role
  # Permissions are the Discord defaults; allowed: invite creation, reading/sending messages,
  # sending TTS messages, embedding links, sending files, reading the history, mentioning everybody,
  # connecting to voice, speaking and voice activity (push-to-talk isn't mandatory)
  # https://discord.com/developers/docs/resources/guild#batch-modify-guild-role
  #
  # source://discordrb//lib/discordrb/api/server.rb#247
  def update_role(token, server_id, role_id, name, colour, hoist = T.unsafe(nil), mentionable = T.unsafe(nil), packed_permissions = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Update role positions
  # https://discord.com/developers/docs/resources/guild#modify-guild-role-positions
  #
  # source://discordrb//lib/discordrb/api/server.rb#262
  def update_role_positions(token, server_id, roles); end

  # Get server webhooks
  # https://discord.com/developers/docs/resources/webhook#get-guild-webhooks
  #
  # source://discordrb//lib/discordrb/api/server.rb#513
  def webhooks(token, server_id); end

  class << self
    # Adds a custom emoji.
    # https://discord.com/developers/docs/resources/emoji#create-guild-emoji
    #
    # source://discordrb//lib/discordrb/api/server.rb#459
    def add_emoji(token, server_id, image, name, roles = T.unsafe(nil), reason = T.unsafe(nil)); end

    # Adds a member to a server with an OAuth2 Bearer token that has been granted `guilds.join`
    # https://discord.com/developers/docs/resources/guild#add-guild-member
    #
    # source://discordrb//lib/discordrb/api/server.rb#525
    def add_member(token, server_id, user_id, access_token, nick = T.unsafe(nil), roles = T.unsafe(nil), mute = T.unsafe(nil), deaf = T.unsafe(nil)); end

    # Adds a single role to a member
    # https://discord.com/developers/docs/resources/guild#add-guild-member-role
    #
    # source://discordrb//lib/discordrb/api/server.rb#289
    def add_member_role(token, server_id, user_id, role_id, reason = T.unsafe(nil)); end

    # Gets a server's audit logs
    # https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log
    #
    # source://discordrb//lib/discordrb/api/server.rb#354
    def audit_logs(token, server_id, limit, user_id = T.unsafe(nil), action_type = T.unsafe(nil), before = T.unsafe(nil)); end

    # Ban a user from a server and delete their messages from the last message_days days
    # https://discord.com/developers/docs/resources/guild#create-guild-ban
    #
    # source://discordrb//lib/discordrb/api/server.rb#187
    def ban_user(token, server_id, user_id, message_days, reason = T.unsafe(nil)); end

    # Get a server's banned users
    # https://discord.com/developers/docs/resources/guild#get-guild-bans
    #
    # source://discordrb//lib/discordrb/api/server.rb#175
    def bans(token, server_id); end

    # Begin server prune
    # https://discord.com/developers/docs/resources/guild#begin-guild-prune
    #
    # source://discordrb//lib/discordrb/api/server.rb#328
    def begin_prune(token, server_id, days, reason = T.unsafe(nil)); end

    # Get a server's channels list
    # https://discord.com/developers/docs/resources/guild#get-guild-channels
    #
    # source://discordrb//lib/discordrb/api/server.rb#76
    def channels(token, server_id); end

    # Create a server
    # https://discord.com/developers/docs/resources/guild#create-guild
    #
    # source://discordrb//lib/discordrb/api/server.rb#9
    def create(token, name, region = T.unsafe(nil)); end

    # Create a channel
    # https://discord.com/developers/docs/resources/guild#create-guild-channel
    #
    # source://discordrb//lib/discordrb/api/server.rb#88
    def create_channel(token, server_id, name, type, topic, bitrate, user_limit, permission_overwrites, parent_id, nsfw, rate_limit_per_user, position, reason = T.unsafe(nil)); end

    # Create a server integration
    # https://discordapp.com/developers/docs/resources/guild#create-guild-integration
    #
    # source://discordrb//lib/discordrb/api/server.rb#378
    def create_integration(token, server_id, type, id, reason = T.unsafe(nil)); end

    # Create a role (parameters such as name and colour if not set can be set by update_role afterwards)
    # Permissions are the Discord defaults; allowed: invite creation, reading/sending messages,
    # sending TTS messages, embedding links, sending files, reading the history, mentioning everybody,
    # connecting to voice, speaking and voice activity (push-to-talk isn't mandatory)
    # https://discord.com/developers/docs/resources/guild#get-guild-roles
    #
    # source://discordrb//lib/discordrb/api/server.rb#229
    def create_role(token, server_id, name, colour, hoist, mentionable, packed_permissions, reason = T.unsafe(nil)); end

    # Delete a server
    # https://discord.com/developers/docs/resources/guild#delete-guild
    #
    # source://discordrb//lib/discordrb/api/server.rb#64
    def delete(token, server_id); end

    # Deletes a custom emoji
    # https://discord.com/developers/docs/resources/emoji#delete-guild-emoji
    #
    # source://discordrb//lib/discordrb/api/server.rb#489
    def delete_emoji(token, server_id, emoji_id, reason = T.unsafe(nil)); end

    # Delete a server integration
    # https://discordapp.com/developers/docs/resources/guild#delete-guild-integration
    #
    # source://discordrb//lib/discordrb/api/server.rb#406
    def delete_integration(token, server_id, integration_id, reason = T.unsafe(nil)); end

    # Delete a role
    # https://discord.com/developers/docs/resources/guild#delete-guild-role
    #
    # source://discordrb//lib/discordrb/api/server.rb#276
    def delete_role(token, server_id, role_id, reason = T.unsafe(nil)); end

    # Changes an emoji name and/or roles.
    # https://discord.com/developers/docs/resources/emoji#modify-guild-emoji
    #
    # source://discordrb//lib/discordrb/api/server.rb#474
    def edit_emoji(token, server_id, emoji_id, name, roles = T.unsafe(nil), reason = T.unsafe(nil)); end

    # Retrieves a server's embed information
    # https://discord.com/developers/docs/resources/guild#get-guild-embed
    #
    # source://discordrb//lib/discordrb/api/server.rb#432
    def embed(token, server_id); end

    # Get server integrations
    # https://discord.com/developers/docs/resources/guild#get-guild-integrations
    #
    # source://discordrb//lib/discordrb/api/server.rb#366
    def integrations(token, server_id); end

    # Get invites from server
    # https://discord.com/developers/docs/resources/guild#get-guild-invites
    #
    # source://discordrb//lib/discordrb/api/server.rb#342
    def invites(token, server_id); end

    # Modify a server's embed settings
    # https://discord.com/developers/docs/resources/guild#modify-guild-embed
    #
    # source://discordrb//lib/discordrb/api/server.rb#444
    def modify_embed(token, server_id, enabled, channel_id, reason = T.unsafe(nil)); end

    # Get server prune count
    # https://discord.com/developers/docs/resources/guild#get-guild-prune-count
    #
    # source://discordrb//lib/discordrb/api/server.rb#316
    def prune_count(token, server_id, days); end

    # Available voice regions for this server
    #
    # source://discordrb//lib/discordrb/api/server.rb#501
    def regions(token, server_id); end

    # Remove user from server
    # https://discord.com/developers/docs/resources/guild#remove-guild-member
    #
    # source://discordrb//lib/discordrb/api/server.rb#161
    def remove_member(token, server_id, user_id, reason = T.unsafe(nil)); end

    # Removes a single role from a member
    # https://discord.com/developers/docs/resources/guild#remove-guild-member-role
    #
    # source://discordrb//lib/discordrb/api/server.rb#303
    def remove_member_role(token, server_id, user_id, role_id, reason = T.unsafe(nil)); end

    # Get a server's data
    # https://discord.com/developers/docs/resources/guild#get-guild
    #
    # source://discordrb//lib/discordrb/api/server.rb#23
    def resolve(token, server_id, with_counts = T.unsafe(nil)); end

    # Get a member's data
    # https://discord.com/developers/docs/resources/guild#get-guild-member
    #
    # source://discordrb//lib/discordrb/api/server.rb#117
    def resolve_member(token, server_id, user_id); end

    # Gets members from the server
    # https://discord.com/developers/docs/resources/guild#list-guild-members
    #
    # source://discordrb//lib/discordrb/api/server.rb#129
    def resolve_members(token, server_id, limit, after = T.unsafe(nil)); end

    # Get server roles
    # https://discord.com/developers/docs/resources/guild#get-guild-roles
    #
    # source://discordrb//lib/discordrb/api/server.rb#214
    def roles(token, server_id); end

    # Sync an integration
    # https://discord.com/developers/docs/resources/guild#sync-guild-integration
    #
    # source://discordrb//lib/discordrb/api/server.rb#419
    def sync_integration(token, server_id, integration_id); end

    # Transfer server ownership
    #
    # source://discordrb//lib/discordrb/api/server.rb#49
    def transfer_ownership(token, server_id, user_id, reason = T.unsafe(nil)); end

    # Unban a user from a server
    # https://discord.com/developers/docs/resources/guild#remove-guild-ban
    #
    # source://discordrb//lib/discordrb/api/server.rb#201
    def unban_user(token, server_id, user_id, reason = T.unsafe(nil)); end

    # Update a server
    # https://discord.com/developers/docs/resources/guild#modify-guild
    #
    # source://discordrb//lib/discordrb/api/server.rb#35
    def update(token, server_id, name, region, icon, afk_channel_id, afk_timeout, splash, default_message_notifications, verification_level, explicit_content_filter, system_channel_id, reason = T.unsafe(nil)); end

    # Update a channels position
    # https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions
    #
    # source://discordrb//lib/discordrb/api/server.rb#103
    def update_channel_positions(token, server_id, positions); end

    # Update integration from server
    # https://discord.com/developers/docs/resources/guild#modify-guild-integration
    #
    # source://discordrb//lib/discordrb/api/server.rb#392
    def update_integration(token, server_id, integration_id, expire_behavior, expire_grace_period, enable_emoticons); end

    # Update a user properties
    # https://discord.com/developers/docs/resources/guild#modify-guild-member
    #
    # source://discordrb//lib/discordrb/api/server.rb#141
    def update_member(token, server_id, user_id, nick: T.unsafe(nil), roles: T.unsafe(nil), mute: T.unsafe(nil), deaf: T.unsafe(nil), channel_id: T.unsafe(nil), reason: T.unsafe(nil)); end

    # Update a role
    # Permissions are the Discord defaults; allowed: invite creation, reading/sending messages,
    # sending TTS messages, embedding links, sending files, reading the history, mentioning everybody,
    # connecting to voice, speaking and voice activity (push-to-talk isn't mandatory)
    # https://discord.com/developers/docs/resources/guild#batch-modify-guild-role
    #
    # source://discordrb//lib/discordrb/api/server.rb#247
    def update_role(token, server_id, role_id, name, colour, hoist = T.unsafe(nil), mentionable = T.unsafe(nil), packed_permissions = T.unsafe(nil), reason = T.unsafe(nil)); end

    # Update role positions
    # https://discord.com/developers/docs/resources/guild#modify-guild-role-positions
    #
    # source://discordrb//lib/discordrb/api/server.rb#262
    def update_role_positions(token, server_id, roles); end

    # Get server webhooks
    # https://discord.com/developers/docs/resources/webhook#get-guild-webhooks
    #
    # source://discordrb//lib/discordrb/api/server.rb#513
    def webhooks(token, server_id); end
  end
end

# API calls for User object
module Discordrb::API::User
  private

  # Make an avatar URL from the user and avatar IDs
  #
  # source://discordrb//lib/discordrb/api/user.rb#141
  def avatar_url(user_id, avatar_id, format = T.unsafe(nil)); end

  # Change the current bot's nickname on a server
  #
  # source://discordrb//lib/discordrb/api/user.rb#32
  def change_own_nickname(token, server_id, nick, reason = T.unsafe(nil)); end

  # Change user status setting
  #
  # source://discordrb//lib/discordrb/api/user.rb#122
  def change_status_setting(token, status); end

  # Get information about a user's connections
  # https://discord.com/developers/docs/resources/user#get-users-connections
  #
  # source://discordrb//lib/discordrb/api/user.rb#111
  def connections(token); end

  # Create a DM to another user
  # https://discord.com/developers/docs/resources/user#create-dm
  #
  # source://discordrb//lib/discordrb/api/user.rb#97
  def create_pm(token, recipient_id); end

  # Returns one of the "default" discord avatars from the CDN given a discriminator
  #
  # source://discordrb//lib/discordrb/api/user.rb#135
  def default_avatar(discrim = T.unsafe(nil)); end

  # Leave a server
  # https://discord.com/developers/docs/resources/user#leave-guild
  #
  # source://discordrb//lib/discordrb/api/user.rb#73
  def leave_server(token, server_id); end

  # Get profile data
  # https://discord.com/developers/docs/resources/user#get-current-user
  #
  # source://discordrb//lib/discordrb/api/user.rb#21
  def profile(token); end

  # Get user data
  # https://discord.com/developers/docs/resources/user#get-user
  #
  # source://discordrb//lib/discordrb/api/user.rb#9
  def resolve(token, user_id); end

  # Get the servers a user is connected to
  # https://discord.com/developers/docs/resources/user#get-current-user-guilds
  #
  # source://discordrb//lib/discordrb/api/user.rb#61
  def servers(token); end

  # Update user data
  # https://discord.com/developers/docs/resources/user#modify-current-user
  #
  # source://discordrb//lib/discordrb/api/user.rb#47
  def update_profile(token, email, password, new_username, avatar, new_password = T.unsafe(nil)); end

  # Get the DMs for the current user
  # https://discord.com/developers/docs/resources/user#get-user-dms
  #
  # source://discordrb//lib/discordrb/api/user.rb#85
  def user_dms(token); end

  class << self
    # Make an avatar URL from the user and avatar IDs
    #
    # source://discordrb//lib/discordrb/api/user.rb#141
    def avatar_url(user_id, avatar_id, format = T.unsafe(nil)); end

    # Change the current bot's nickname on a server
    #
    # source://discordrb//lib/discordrb/api/user.rb#32
    def change_own_nickname(token, server_id, nick, reason = T.unsafe(nil)); end

    # Change user status setting
    #
    # source://discordrb//lib/discordrb/api/user.rb#122
    def change_status_setting(token, status); end

    # Get information about a user's connections
    # https://discord.com/developers/docs/resources/user#get-users-connections
    #
    # source://discordrb//lib/discordrb/api/user.rb#111
    def connections(token); end

    # Create a DM to another user
    # https://discord.com/developers/docs/resources/user#create-dm
    #
    # source://discordrb//lib/discordrb/api/user.rb#97
    def create_pm(token, recipient_id); end

    # Returns one of the "default" discord avatars from the CDN given a discriminator
    #
    # source://discordrb//lib/discordrb/api/user.rb#135
    def default_avatar(discrim = T.unsafe(nil)); end

    # Leave a server
    # https://discord.com/developers/docs/resources/user#leave-guild
    #
    # source://discordrb//lib/discordrb/api/user.rb#73
    def leave_server(token, server_id); end

    # Get profile data
    # https://discord.com/developers/docs/resources/user#get-current-user
    #
    # source://discordrb//lib/discordrb/api/user.rb#21
    def profile(token); end

    # Get user data
    # https://discord.com/developers/docs/resources/user#get-user
    #
    # source://discordrb//lib/discordrb/api/user.rb#9
    def resolve(token, user_id); end

    # Get the servers a user is connected to
    # https://discord.com/developers/docs/resources/user#get-current-user-guilds
    #
    # source://discordrb//lib/discordrb/api/user.rb#61
    def servers(token); end

    # Update user data
    # https://discord.com/developers/docs/resources/user#modify-current-user
    #
    # source://discordrb//lib/discordrb/api/user.rb#47
    def update_profile(token, email, password, new_username, avatar, new_password = T.unsafe(nil)); end

    # Get the DMs for the current user
    # https://discord.com/developers/docs/resources/user#get-user-dms
    #
    # source://discordrb//lib/discordrb/api/user.rb#85
    def user_dms(token); end
  end
end

# API calls for Webhook object
module Discordrb::API::Webhook
  private

  # Deletes a webhook
  # https://discord.com/developers/docs/resources/webhook#delete-webhook
  #
  # source://discordrb//lib/discordrb/api/webhook.rb#61
  def delete_webhook(token, webhook_id, reason = T.unsafe(nil)); end

  # Deletes a webhook via webhook token
  # https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token
  #
  # source://discordrb//lib/discordrb/api/webhook.rb#74
  def token_delete_webhook(webhook_token, webhook_id, reason = T.unsafe(nil)); end

  # Update a webhook via webhook token
  # https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token
  #
  # source://discordrb//lib/discordrb/api/webhook.rb#47
  def token_update_webhook(webhook_token, webhook_id, data, reason = T.unsafe(nil)); end

  # Get a webhook via webhook token
  # https://discord.com/developers/docs/resources/webhook#get-webhook-with-token
  #
  # source://discordrb//lib/discordrb/api/webhook.rb#21
  def token_webhook(webhook_token, webhook_id); end

  # Update a webhook
  # https://discord.com/developers/docs/resources/webhook#modify-webhook
  #
  # source://discordrb//lib/discordrb/api/webhook.rb#32
  def update_webhook(token, webhook_id, data, reason = T.unsafe(nil)); end

  # Get a webhook
  # https://discord.com/developers/docs/resources/webhook#get-webhook
  #
  # source://discordrb//lib/discordrb/api/webhook.rb#9
  def webhook(token, webhook_id); end

  class << self
    # Deletes a webhook
    # https://discord.com/developers/docs/resources/webhook#delete-webhook
    #
    # source://discordrb//lib/discordrb/api/webhook.rb#61
    def delete_webhook(token, webhook_id, reason = T.unsafe(nil)); end

    # Deletes a webhook via webhook token
    # https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token
    #
    # source://discordrb//lib/discordrb/api/webhook.rb#74
    def token_delete_webhook(webhook_token, webhook_id, reason = T.unsafe(nil)); end

    # Update a webhook via webhook token
    # https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token
    #
    # source://discordrb//lib/discordrb/api/webhook.rb#47
    def token_update_webhook(webhook_token, webhook_id, data, reason = T.unsafe(nil)); end

    # Get a webhook via webhook token
    # https://discord.com/developers/docs/resources/webhook#get-webhook-with-token
    #
    # source://discordrb//lib/discordrb/api/webhook.rb#21
    def token_webhook(webhook_token, webhook_id); end

    # Update a webhook
    # https://discord.com/developers/docs/resources/webhook#modify-webhook
    #
    # source://discordrb//lib/discordrb/api/webhook.rb#32
    def update_webhook(token, webhook_id, data, reason = T.unsafe(nil)); end

    # Get a webhook
    # https://discord.com/developers/docs/resources/webhook#get-webhook
    #
    # source://discordrb//lib/discordrb/api/webhook.rb#9
    def webhook(token, webhook_id); end
  end
end

# Contains information about user activities such as the game they are playing,
# music they are listening to, or their live stream.
class Discordrb::Activity
  # @return [Activity] a new instance of Activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#72
  def initialize(data, bot); end

  # @return [String, nil] the application ID for the game
  #
  # source://discordrb//lib/discordrb/data/activity.rb#27
  def application_id; end

  # @return [Assets, nil] images for the presence and their texts
  #
  # source://discordrb//lib/discordrb/data/activity.rb#49
  def assets; end

  # @return [Time] the time when the activity was added to the user's session
  #
  # source://discordrb//lib/discordrb/data/activity.rb#58
  def created_at; end

  # @return [String, nil] details about what the player is currently doing
  #
  # source://discordrb//lib/discordrb/data/activity.rb#30
  def details; end

  # @return [Emoji, nil] emoji data for custom statuses
  #
  # source://discordrb//lib/discordrb/data/activity.rb#55
  def emoji; end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/data/activity.rb#121
  def flag_set?(sym); end

  # @return [Integer] a bitmask of activity flags
  # @see FLAGS
  #
  # source://discordrb//lib/discordrb/data/activity.rb#40
  def flags; end

  # @return [true, false] whether or not the activity is an instanced game session
  #
  # source://discordrb//lib/discordrb/data/activity.rb#36
  def instance; end

  # @return [true, false] Whether or not the `instance` flag is set for this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#116
  def instance?; end

  # @return [true, false] Whether or not the `join` flag is set for this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#91
  def join?; end

  # @return [true, false] Whether or not the `join_request` flag is set for this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#101
  def join_request?; end

  # @return [String] the activity's name
  #
  # source://discordrb//lib/discordrb/data/activity.rb#18
  def name; end

  # @return [Party, nil] information about the player's current party
  #
  # source://discordrb//lib/discordrb/data/activity.rb#52
  def party; end

  # @return [true, false] Whether or not the `play` flag is set for this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#111
  def play?; end

  # @return [Secrets, nil] secrets for rich presence, joining, and spectating
  #
  # source://discordrb//lib/discordrb/data/activity.rb#46
  def secrets; end

  # @return [true, false] Whether or not the `spectate` flag is set for this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#96
  def spectate?; end

  # @return [String, nil] the user's current party status
  #
  # source://discordrb//lib/discordrb/data/activity.rb#33
  def state; end

  # @return [true, false] Whether or not the `sync` flag is set for this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#106
  def sync?; end

  # @return [Timestamps, nil] times for the start and/or end of the activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#43
  def timestamps; end

  # @return [Integer, nil] activity type. Can be {GAME}, {STREAMING}, {LISTENING}, {CUSTOM}
  #
  # source://discordrb//lib/discordrb/data/activity.rb#21
  def type; end

  # @return [String, nil] stream URL, when the activity type is {STREAMING}
  #
  # source://discordrb//lib/discordrb/data/activity.rb#24
  def url; end
end

# Assets for rich presence images and hover text
class Discordrb::Activity::Assets
  # @return [Assets] a new instance of Assets
  #
  # source://discordrb//lib/discordrb/data/activity.rb#177
  def initialize(data, application_id); end

  # @return [String, nil] the application ID for these assets.
  #
  # source://discordrb//lib/discordrb/data/activity.rb#174
  def application_id; end

  # @return [String, nil] the asset ID for the large image of this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#162
  def large_image_id; end

  # Utility function to get an Asset's large image URL.
  #
  # @param format [String, nil] If `nil`, the URL will default to `webp`. You can otherwise specify one of `webp`, `jpg`, or `png`.
  # @return [String] the URL to the large image asset.
  #
  # source://discordrb//lib/discordrb/data/activity.rb#188
  def large_image_url(format = T.unsafe(nil)); end

  # @return [String, nil] text displayed when hovering over the large iamge
  #
  # source://discordrb//lib/discordrb/data/activity.rb#165
  def large_text; end

  # @return [String, nil] the asset ID for the small image of this activity
  #
  # source://discordrb//lib/discordrb/data/activity.rb#168
  def small_image_id; end

  # Utility function to get an Asset's large image URL.
  #
  # @param format [String, nil] If `nil`, the URL will default to `webp`. You can otherwise specify one of `webp`, `jpg`, or `png`.
  # @return [String] the URL to the small image asset.
  #
  # source://discordrb//lib/discordrb/data/activity.rb#195
  def small_image_url(format = T.unsafe(nil)); end

  # @return [String, nil]
  #
  # source://discordrb//lib/discordrb/data/activity.rb#171
  def small_text; end
end

# Type indicating the activity is a custom status
#
# source://discordrb//lib/discordrb/data/activity.rb#69
Discordrb::Activity::CUSTOM = T.let(T.unsafe(nil), Integer)

# Values corresponding to the flags bitmask
#
# source://discordrb//lib/discordrb/data/activity.rb#8
Discordrb::Activity::FLAGS = T.let(T.unsafe(nil), Hash)

# Type indicating the activity is for a game
#
# source://discordrb//lib/discordrb/data/activity.rb#61
Discordrb::Activity::GAME = T.let(T.unsafe(nil), Integer)

# Type indicating the activity is for music
#
# source://discordrb//lib/discordrb/data/activity.rb#65
Discordrb::Activity::LISTENING = T.let(T.unsafe(nil), Integer)

# Contains information about an activity's party
class Discordrb::Activity::Party
  # @return [Party] a new instance of Party
  #
  # source://discordrb//lib/discordrb/data/activity.rb#212
  def initialize(data); end

  # @return [Integer, nil]
  #
  # source://discordrb//lib/discordrb/data/activity.rb#206
  def current_size; end

  # @return [String, nil]
  #
  # source://discordrb//lib/discordrb/data/activity.rb#203
  def id; end

  # @return [Integer, nil]
  #
  # source://discordrb//lib/discordrb/data/activity.rb#209
  def max_size; end
end

# Type indicating the activity is a stream
#
# source://discordrb//lib/discordrb/data/activity.rb#63
Discordrb::Activity::STREAMING = T.let(T.unsafe(nil), Integer)

# Contains secrets used for rich presence
class Discordrb::Activity::Secrets
  # @return [Secrets] a new instance of Secrets
  #
  # source://discordrb//lib/discordrb/data/activity.rb#152
  def initialize(data); end

  # @return [String, nil] secret for joining a party
  #
  # source://discordrb//lib/discordrb/data/activity.rb#143
  def join; end

  # @return [String, nil] secret for a specific instanced match
  #
  # source://discordrb//lib/discordrb/data/activity.rb#149
  def match; end

  # @return [String, nil] secret for spectating
  #
  # source://discordrb//lib/discordrb/data/activity.rb#146
  def spectate; end
end

# Timestamps for the start and end of instanced activities
class Discordrb::Activity::Timestamps
  # @return [Timestamps] a new instance of Timestamps
  #
  # source://discordrb//lib/discordrb/data/activity.rb#134
  def initialize(data); end

  # @return [Time, nil]
  #
  # source://discordrb//lib/discordrb/data/activity.rb#131
  def end; end

  # @return [Time, nil]
  #
  # source://discordrb//lib/discordrb/data/activity.rb#128
  def start; end
end

# This type is currently unused in the client but can be reported by bots
#
# source://discordrb//lib/discordrb/data/activity.rb#67
Discordrb::Activity::WATCHING = T.let(T.unsafe(nil), Integer)

# A collection of the user's activities.
class Discordrb::ActivitySet
  include ::Enumerable

  # @return [ActivitySet] a new instance of ActivitySet
  #
  # source://discordrb//lib/discordrb/data/activity.rb#224
  def initialize(activities = T.unsafe(nil)); end

  # @return [Array<Activity>] all activities of type {Activity::CUSTOM}
  #
  # source://discordrb//lib/discordrb/data/activity.rb#260
  def custom_status; end

  # Implement each for Enumerable
  #
  # source://discordrb//lib/discordrb/data/activity.rb#230
  def each(&block); end

  # @return [Array<Activity>] all activities of type {Activity::GAME}
  #
  # source://discordrb//lib/discordrb/data/activity.rb#240
  def games; end

  # @return [Array<Activity>] all activities of type {Activity::LISTENING}
  #
  # source://discordrb//lib/discordrb/data/activity.rb#250
  def listening; end

  # @return [Array<Activity>] all activities of type {Activity::STREAMING}
  #
  # source://discordrb//lib/discordrb/data/activity.rb#245
  def streaming; end

  # @return [Array<Activity>] all activities
  #
  # source://discordrb//lib/discordrb/data/activity.rb#235
  def to_a; end

  # @return [Array<Activity>] all activities of type {Activity::WATCHING}
  #
  # source://discordrb//lib/discordrb/data/activity.rb#255
  def watching; end
end

# Builder class for `allowed_mentions` when sending messages.
class Discordrb::AllowedMentions
  # @param parse [Array<"users", "roles", "everyone">] Mention types that can be inferred from the message.
  #   `users` and `roles` allow for all mentions of the respective type to ping. `everyone` allows usage of `@everyone` and `@here`
  # @param users [Array<User, String, Integer>] Users or user IDs that can be pinged. Cannot be used in conjunction with `"users"` in `parse`
  # @param roles [Array<Role, String, Integer>] Roles or role IDs that can be pinged. Cannot be used in conjunction with `"roles"` in `parse`
  # @return [AllowedMentions] a new instance of AllowedMentions
  #
  # source://discordrb//lib/discordrb/allowed_mentions.rb#21
  def initialize(parse: T.unsafe(nil), users: T.unsafe(nil), roles: T.unsafe(nil)); end

  # @return [Array<"users", "roles", "everyone">, nil]
  #
  # source://discordrb//lib/discordrb/allowed_mentions.rb#9
  def parse; end

  # @return [Array<"users", "roles", "everyone">, nil]
  #
  # source://discordrb//lib/discordrb/allowed_mentions.rb#9
  def parse=(_arg0); end

  # @return [Array<String, Integer>, nil]
  #
  # source://discordrb//lib/discordrb/allowed_mentions.rb#15
  def roles; end

  # @return [Array<String, Integer>, nil]
  #
  # source://discordrb//lib/discordrb/allowed_mentions.rb#15
  def roles=(_arg0); end

  # source://discordrb//lib/discordrb/allowed_mentions.rb#28
  def to_hash; end

  # @return [Array<String, Integer>, nil]
  #
  # source://discordrb//lib/discordrb/allowed_mentions.rb#12
  def users; end

  # @return [Array<String, Integer>, nil]
  #
  # source://discordrb//lib/discordrb/allowed_mentions.rb#12
  def users=(_arg0); end
end

# OAuth Application information
class Discordrb::Application
  include ::Discordrb::IDObject

  # @return [Application] a new instance of Application
  #
  # source://discordrb//lib/discordrb/data/application.rb#25
  def initialize(data, bot); end

  # @return [String] the application description
  #
  # source://discordrb//lib/discordrb/data/application.rb#12
  def description; end

  # @return [Integer]
  #
  # source://discordrb//lib/discordrb/data/application.rb#18
  def flags; end

  # Utility function to get a application's icon URL.
  #
  # @return [String, nil] the URL of the icon image (nil if no image is set).
  #
  # source://discordrb//lib/discordrb/data/application.rb#39
  def icon_url; end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/application.rb#46
  def inspect; end

  # @return [String] the application name
  #
  # source://discordrb//lib/discordrb/data/application.rb#9
  def name; end

  # Gets the user object of the owner. May be limited to username, discriminator,
  # ID, and avatar if the bot cannot reach the owner.
  #
  # @return [User] the user object of the owner
  #
  # source://discordrb//lib/discordrb/data/application.rb#23
  def owner; end

  # @return [Array<String>] the application's origins permitted to use RPC
  #
  # source://discordrb//lib/discordrb/data/application.rb#15
  def rpc_origins; end
end

# An attachment to a message
class Discordrb::Attachment
  include ::Discordrb::IDObject

  # @return [Attachment] a new instance of Attachment
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#31
  def initialize(data, message, bot); end

  # @return [String] the attachment's filename.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#19
  def filename; end

  # @return [Integer, nil] the height of an image file, in pixels, or `nil` if the file is not an image.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#28
  def height; end

  # @return [true, false] whether this file is an image file.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#47
  def image?; end

  # @return [Message] the message this attachment belongs to.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#9
  def message; end

  # @return [String] the attachment's proxy URL - I'm not sure what exactly this does, but I think it has something to
  #   do with CDNs.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#16
  def proxy_url; end

  # @return [Integer] the attachment's file size in bytes.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#22
  def size; end

  # @return [true, false] whether this file is tagged as a spoiler.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#52
  def spoiler?; end

  # @return [String] the CDN URL this attachment can be downloaded at.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#12
  def url; end

  # @return [Integer, nil] the width of an image file, in pixels, or `nil` if the file is not an image.
  #
  # source://discordrb//lib/discordrb/data/attachment.rb#25
  def width; end
end

# A server's audit logs
class Discordrb::AuditLogs
  # @return [AuditLogs] a new instance of AuditLogs
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#77
  def initialize(server, bot, data); end

  # @return [Array<Entry>] the entries listed in the audit logs.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#74
  def entries; end

  # @return [Entry] the latest entry in the audit logs.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#276
  def first; end

  # @return [Entry] the latest entry in the audit logs.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#276
  def latest; end

  # Process user objects given by the request
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#298
  def process_users(users); end

  # Process webhook objects given by the request
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#308
  def process_webhooks(webhooks); end

  # Gets a user in the audit logs data based on user ID
  #
  # @note This only uses data given by the audit logs request
  # @param id [String, Integer] The user ID to look for
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#284
  def user(id); end

  # @return [Hash<String => User>] the users included in the audit logs.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#68
  def users; end

  # Gets a webhook in the audit logs data based on webhook ID
  #
  # @note This only uses data given by the audit logs request
  # @param id [String, Integer] The webhook ID to look for
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#291
  def webhook(id); end

  # @return [Hash<String => Webhook>] the webhooks included in the audit logs.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#71
  def webhooks; end

  class << self
    # Find the type of action by its action number
    #
    # @note For internal use only
    #
    # source://discordrb//lib/discordrb/data/audit_logs.rb#336
    def action_type_for(action); end

    # Find the type of target by it's action number
    #
    # @note For internal use only
    #
    # source://discordrb//lib/discordrb/data/audit_logs.rb#318
    def target_type_for(action); end
  end
end

# The numbers associated with the type of action.
#
# source://discordrb//lib/discordrb/data/audit_logs.rb#7
Discordrb::AuditLogs::ACTIONS = T.let(T.unsafe(nil), Hash)

# source://discordrb//lib/discordrb/data/audit_logs.rb#48
Discordrb::AuditLogs::CREATE_ACTIONS = T.let(T.unsafe(nil), Array)

# A change in a audit log entry.
class Discordrb::AuditLogs::Change
  # @return [Change] a new instance of Change
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#211
  def initialize(data, server, bot, logs); end

  # @note You should check with the Discord API Documentation on what key gives out what value.
  # @return [String] the key that was changed.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#200
  def key; end

  # @return [String, Integer, true, false, Permissions, Overwrite, nil] the value that was changed to.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#207
  def new; end

  # @return [Channel, nil] the channel that is used in the server as an AFK channel prior to this change. Only present if the key for this change is `afk_channel_id`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#242
  def new_afk_channel; end

  # @return [Member, User, nil] the member that is now the owner of the server prior to this change. Only present if the key for this change is `owner_id`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#252
  def new_owner; end

  # @return [String, Integer, true, false, Permissions, Overwrite, nil] the value that was changed to.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#207
  def new_value; end

  # @return [Channel, nil] the channel that is used in the server widget prior to this change. Only present if the key for this change is `widget_channel_id`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#232
  def new_widget_channel; end

  # @return [String, Integer, true, false, Permissions, Overwrite, nil] the value that was changed from.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#203
  def old; end

  # @return [Channel, nil] the channel that was previously used in the server as an AFK channel. Only present if the key for this change is `afk_channel_id`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#237
  def old_afk_channel; end

  # @return [Member, User, nil] the member that used to be the owner of the server. Only present if the for key for this change is `owner_id`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#247
  def old_owner; end

  # @return [String, Integer, true, false, Permissions, Overwrite, nil] the value that was changed from.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#203
  def old_value; end

  # @return [Channel, nil] the channel that was previously used in the server widget. Only present if the key for this change is `widget_channel_id`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#227
  def old_widget_channel; end
end

# source://discordrb//lib/discordrb/data/audit_logs.rb#54
Discordrb::AuditLogs::DELETE_ACTIONS = T.let(T.unsafe(nil), Array)

# An entry in a server's audit logs.
class Discordrb::AuditLogs::Entry
  include ::Discordrb::IDObject

  # @return [Entry] a new instance of Entry
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#118
  def initialize(logs, server, bot, data); end

  # @return [Symbol] the action that was performed.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#93
  def action; end

  # @return [Symbol] the type action that was performed. (:create, :delete, :update, :unknown)
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#96
  def action_type; end

  # @return [Integer, nil] the amount of messages deleted. Only present if the action is `:message_delete`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#102
  def amount; end

  # @return [Member, User] the user that authored this action. Can be a User object if the user no longer exists in the server.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#151
  def author; end

  # @return [Hash<String => Change>, RoleChange, nil] the changes from this log, listing the key as the key changed. Will be a RoleChange object if the action is `:member_role_update`. Will be nil if the action is either `:message_delete` or `:member_prune`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#115
  def changes; end

  # @return [Channel, nil] the amount of messages deleted. Won't be nil if the action is `:message_delete`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#157
  def channel; end

  # @return [Integer, nil] the amount of messages deleted. Only present if the action is `:message_delete`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#102
  def count; end

  # @return [Integer, nil] the amount of days the members were inactive for. Only present if the action is `:member_prune`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#106
  def days; end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#179
  def inspect; end

  # @return [Integer, nil] the amount of members removed. Only present if the action is `:member_prune`.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#109
  def members_removed; end

  # Process action changes
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#186
  def process_changes(changes); end

  # source://discordrb//lib/discordrb/data/audit_logs.rb#164
  def process_target(id, type); end

  # @return [String, nil] the reason for this action occurring.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#112
  def reason; end

  # @return [Server, Channel, Member, User, Role, Invite, Webhook, Emoji, nil] the target being performed on.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#146
  def target; end

  # @return [Symbol] the type of target being performed on. (:server, :channel, :user, :role, :invite, :webhook, :emoji, :unknown)
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#99
  def target_type; end

  # @return [Member, User] the user that authored this action. Can be a User object if the user no longer exists in the server.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#151
  def user; end
end

# A change that includes roles.
class Discordrb::AuditLogs::RoleChange
  # @return [RoleChange] a new instance of RoleChange
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#263
  def initialize(data, server); end

  # @return [Role] the role being used.
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#270
  def role; end

  # @return [Symbol] what type of change this is: (:add, :remove)
  #
  # source://discordrb//lib/discordrb/data/audit_logs.rb#260
  def type; end
end

# source://discordrb//lib/discordrb/data/audit_logs.rb#61
Discordrb::AuditLogs::UPDATE_ACTIONS = T.let(T.unsafe(nil), Array)

# Awaits are a way to register new, temporary event handlers on the fly. Awaits can be
# registered using {Bot#add_await}, {User#await}, {Message#await} and {Channel#await}.
#
# Awaits contain a block that will be called before the await event will be triggered.
# If this block returns anything that is not `false` exactly, the await will be deleted.
# If no block is present, the await will also be deleted. This is an easy way to make
# temporary events that are only temporary under certain conditions.
#
# Besides the given block, an {Discordrb::Events::AwaitEvent} will also be executed with the key and
# the type of the await that was triggered. It's possible to register multiple events
# that trigger on the same await.
class Discordrb::Await
  # Makes a new await. For internal use only.
  #
  # @return [Await] a new instance of Await
  #
  # source://discordrb//lib/discordrb/await.rb#30
  def initialize(bot, key, type, attributes, block = T.unsafe(nil)); end

  # The attributes of the event that will be listened for.
  #
  # @return [Hash] A hash of attributes.
  #
  # source://discordrb//lib/discordrb/await.rb#26
  def attributes; end

  # The key that uniquely identifies this await.
  #
  # @return [Symbol] The unique key.
  #
  # source://discordrb//lib/discordrb/await.rb#18
  def key; end

  # Checks whether the await can be triggered by the given event, and if it can, execute the block
  # and return its result along with this await's key.
  #
  # @param event [Event] An event to check for.
  # @return [Array] This await's key and whether or not it should be deleted. If there was no match, both are nil.
  #
  # source://discordrb//lib/discordrb/await.rb#42
  def match(event); end

  # The class of the event that this await listens for.
  #
  # @return [Class] The event class.
  #
  # source://discordrb//lib/discordrb/await.rb#22
  def type; end
end

# Represents a Discord bot, including servers, users, etc.
class Discordrb::Bot
  include ::Discordrb::Events
  include ::Discordrb::EventContainer
  include ::Discordrb::Cache

  # Makes a new bot with the given authentication data. It will be ready to be added event handlers to and can
  # eventually be run with {#run}.
  #
  # As support for logging in using username and password has been removed in version 3.0.0, only a token login is
  # possible. Be sure to specify the `type` parameter as `:user` if you're logging in as a user.
  #
  # Simply creating a bot won't be enough to start sending messages etc. with, only a limited set of methods can
  # be used after logging in. If you want to do something when the bot has connected successfully, either do it in the
  # {#ready} event, or use the {#run} method with the :async parameter and do the processing after that.
  #
  # @param log_mode [Symbol] The mode this bot should use for logging. See {Logger#mode=} for a list of modes.
  # @param token [String] The token that should be used to log in. If your bot is a bot account, you have to specify
  #   this. If you're logging in as a user, make sure to also set the account type to :user so discordrb doesn't think
  #   you're trying to log in as a bot.
  # @param client_id [Integer] If you're logging in as a bot, the bot's client ID. This is optional, and may be fetched
  #   from the API by calling {Bot#bot_application} (see {Application}).
  # @param type [Symbol] This parameter lets you manually overwrite the account type. This needs to be set when
  #   logging in as a user, otherwise discordrb will treat you as a bot account. Valid values are `:user` and `:bot`.
  # @param name [String] Your bot's name. This will be sent to Discord with any API requests, who will use this to
  #   trace the source of excessive API requests; it's recommended to set this to something if you make bots that many
  #   people will host on their servers separately.
  # @param fancy_log [true, false] Whether the output log should be made extra fancy using ANSI escape codes. (Your
  #   terminal may not support this.)
  # @param suppress_ready [true, false] Whether the READY packet should be exempt from being printed to console.
  #   Useful for very large bots running in debug or verbose log_mode.
  # @param parse_self [true, false] Whether the bot should react on its own messages. It's best to turn this off
  #   unless you really need this so you don't inadvertently create infinite loops.
  # @param shard_id [Integer] The number of the shard this bot should handle. See
  #   https://github.com/discordapp/discord-api-docs/issues/17 for how to do sharding.
  # @param num_shards [Integer] The total number of shards that should be running. See
  #   https://github.com/discordapp/discord-api-docs/issues/17 for how to do sharding.
  # @param redact_token [true, false] Whether the bot should redact the token in logs. Default is true.
  # @param ignore_bots [true, false] Whether the bot should ignore bot accounts or not. Default is false.
  # @param compress_mode [:none, :large, :stream] Sets which compression mode should be used when connecting
  #   to Discord's gateway. `:none` will request that no payloads are received compressed (not recommended for
  #   production bots). `:large` will request that large payloads are received compressed. `:stream` will request
  #   that all data be received in a continuous compressed stream.
  # @param intents [:all, Array<Symbol>, nil] Intents that this bot requires. See {Discordrb::INTENTS}. If `nil`, no intents
  #   field will be passed.
  # @return [Bot] a new instance of Bot
  #
  # source://discordrb//lib/discordrb/bot.rb#107
  def initialize(log_mode: T.unsafe(nil), token: T.unsafe(nil), client_id: T.unsafe(nil), type: T.unsafe(nil), name: T.unsafe(nil), fancy_log: T.unsafe(nil), suppress_ready: T.unsafe(nil), parse_self: T.unsafe(nil), shard_id: T.unsafe(nil), num_shards: T.unsafe(nil), redact_token: T.unsafe(nil), ignore_bots: T.unsafe(nil), compress_mode: T.unsafe(nil), intents: T.unsafe(nil)); end

  # Makes the bot join an invite to a server.
  #
  # @param invite [String, Invite] The invite to join. For possible formats see {#resolve_invite_code}.
  #
  # source://discordrb//lib/discordrb/bot.rb#274
  def accept_invite(invite); end

  # Add an await the bot should listen to. For information on awaits, see {Await}.
  #
  # @deprecated Will be changed to blocking behavior in v4.0. Use {#add_await!} instead.
  # @param key [Symbol] The key that uniquely identifies the await for {AwaitEvent}s to listen to (see {#await}).
  # @param type [Class] The event class that should be listened for.
  # @param attributes [Hash] The attributes the event should check for. The block will only be executed if all attributes match.
  # @return [Await] The await that was created.
  # @yield Is executed when the await is triggered.
  # @yieldparam event [Event] The event object that was triggered.
  #
  # source://discordrb//lib/discordrb/bot.rb#612
  def add_await(key, type, attributes = T.unsafe(nil), &block); end

  # Awaits an event, blocking the current thread until a response is received.
  #
  # @option attributes
  # @param type [Class] The event class that should be listened for.
  # @param attributes [Hash] a customizable set of options
  # @raise [ArgumentError] if `timeout` is given and is not a positive numeric value
  # @return [Event, nil] The event object that was triggered, or `nil` if a `timeout` was set and no event was raised in time.
  # @yield Executed when a matching event is received.
  # @yieldparam event [Event] The event object that was triggered.
  # @yieldreturn [true, false] Whether the event matches extra await criteria described by the block
  #
  # source://discordrb//lib/discordrb/bot.rb#628
  def add_await!(type, attributes = T.unsafe(nil)); end

  # @overload emoji
  # @overload emoji
  #
  # source://discordrb//lib/discordrb/bot.rb#175
  def all_emoji(id = T.unsafe(nil)); end

  # @return [Hash<Symbol => Await>] the list of registered {Await}s.
  #
  # source://discordrb//lib/discordrb/bot.rb#59
  def awaits; end

  # Sets status to idle.
  #
  # source://discordrb//lib/discordrb/bot.rb#569
  def away; end

  # The bot's OAuth application.
  #
  # @return [Application, nil] The bot's application info. Returns `nil` if bot is not a bot account.
  #
  # source://discordrb//lib/discordrb/bot.rb#208
  def bot_app; end

  # The bot's OAuth application.
  #
  # @return [Application, nil] The bot's application info. Returns `nil` if bot is not a bot account.
  #
  # source://discordrb//lib/discordrb/bot.rb#208
  def bot_application; end

  # The bot's user profile. This special user object can be used
  # to edit user data like the current username (see {Profile#username=}).
  #
  # @return [Profile] The bot's profile that can be used to edit data.
  #
  # source://discordrb//lib/discordrb/bot.rb#199
  def bot_user; end

  # @return [true, false] whether or not the bot is currently connected to Discord.
  #
  # source://discordrb//lib/discordrb/bot.rb#268
  def connected?; end

  # Creates a new application to do OAuth authorization with. This allows you to use OAuth to authorize users using
  # Discord. For information how to use this, see the docs: https://discord.com/developers/docs/topics/oauth2
  #
  # @param name [String] What your application should be called.
  # @param redirect_uris [Array<String>] URIs that Discord should redirect your users to after authorizing.
  # @return [Array(String, String)] your applications' client ID and client secret to be used in OAuth authorization.
  #
  # source://discordrb//lib/discordrb/bot.rb#444
  def create_oauth_application(name, redirect_uris); end

  # Creates a server on Discord with a specified name and a region.
  #
  # @note Discord's API doesn't directly return the server when creating it, so this method
  #   waits until the data has been received via the websocket. This may make the execution take a while.
  # @param name [String] The name the new server should have. Doesn't have to be alphanumeric.
  # @param region [Symbol] The region where the server should be created, for example 'eu-central' or 'hongkong'.
  # @return [Server] The server that was created.
  #
  # source://discordrb//lib/discordrb/bot.rb#431
  def create_server(name, region = T.unsafe(nil)); end

  # @see Logger#debug
  #
  # source://discordrb//lib/discordrb/bot.rb#688
  def debug(message); end

  # Sets debug mode. If debug mode is on, many things will be outputted to STDOUT.
  #
  # source://discordrb//lib/discordrb/bot.rb#589
  def debug=(new_debug); end

  # Revokes an invite to a server. Will fail unless you have the *Manage Server* permission.
  # It is recommended that you use {Invite#delete} instead.
  #
  # @param code [String, Invite] The invite to revoke. For possible formats see {#resolve_invite_code}.
  #
  # source://discordrb//lib/discordrb/bot.rb#356
  def delete_invite(code); end

  # Dispatches an event to this bot. Called by the gateway connection handler used internally.
  #
  # source://discordrb//lib/discordrb/bot.rb#698
  def dispatch(type, data); end

  # Sets the bot's status to DnD (red icon).
  #
  # source://discordrb//lib/discordrb/bot.rb#577
  def dnd; end

  # @overload emoji
  # @overload emoji
  #
  # source://discordrb//lib/discordrb/bot.rb#175
  def emoji(id = T.unsafe(nil)); end

  # @overload emoji
  # @overload emoji
  #
  # source://discordrb//lib/discordrb/bot.rb#175
  def emojis(id = T.unsafe(nil)); end

  # The list of currently running threads used to parse and call events.
  # The threads will have a local variable `:discordrb_name` in the format of `et-1234`, where
  # "et" stands for "event thread" and the number is a continually incrementing number representing
  # how many events were executed before.
  #
  # @return [Array<Thread>] The threads.
  #
  # source://discordrb//lib/discordrb/bot.rb#45
  def event_threads; end

  # Finds an emoji by its name.
  #
  # @param name [String] The emoji name that should be resolved.
  # @return [GlobalEmoji, nil] the emoji identified by the name, or `nil` if it couldn't be found.
  #
  # source://discordrb//lib/discordrb/bot.rb#191
  def find_emoji(name); end

  # Sets the currently playing game to the specified game.
  #
  # @param name [String] The name of the game to be played.
  # @return [String] The game that is being played now.
  #
  # source://discordrb//lib/discordrb/bot.rb#527
  def game=(name); end

  # The gateway connection is an internal detail that is useless to most people. It is however essential while
  # debugging or developing discordrb itself, or while writing very custom bots.
  #
  # @return [Gateway] the underlying {Gateway} object.
  #
  # source://discordrb//lib/discordrb/bot.rb#64
  def gateway; end

  # Sets status to idle.
  #
  # source://discordrb//lib/discordrb/bot.rb#569
  def idle; end

  # Add a user to the list of ignored users. Those users will be ignored in message events at event processing level.
  #
  # @note Ignoring a user only prevents any message events (including mentions, commands etc.) from them! Typing and
  #   presence and any other events will still be received.
  # @param user [User, String, Integer] The user, or its ID, to be ignored.
  #
  # source://discordrb//lib/discordrb/bot.rb#670
  def ignore_user(user); end

  # Checks whether a user is being ignored.
  #
  # @param user [User, String, Integer] The user, or its ID, to check.
  # @return [true, false] whether or not the user is ignored.
  #
  # source://discordrb//lib/discordrb/bot.rb#683
  def ignored?(user); end

  # Sets the bot's status to invisible (appears offline).
  #
  # source://discordrb//lib/discordrb/bot.rb#583
  def invisible; end

  # Creates an OAuth invite URL that can be used to invite this bot to a particular server.
  #
  # @param server [Server, nil] The server the bot should be invited to, or nil if a general invite should be created.
  # @param permission_bits [String, Integer] Permission bits that should be appended to invite url.
  # @return [String] the OAuth invite URL.
  #
  # source://discordrb//lib/discordrb/bot.rb#283
  def invite_url(server: T.unsafe(nil), permission_bits: T.unsafe(nil)); end

  # Joins the bot's connection thread with the current thread.
  # This blocks execution until the websocket stops, which should only happen
  # manually triggered. or due to an error. This is necessary to have a
  # continuously running bot.
  #
  # source://discordrb//lib/discordrb/bot.rb#255
  def join; end

  # Sets the current listening status to the specified name.
  #
  # @param name [String] The thing to be listened to.
  # @return [String] The thing that is now being listened to.
  #
  # source://discordrb//lib/discordrb/bot.rb#537
  def listening=(name); end

  # @see Logger#log_exception
  #
  # source://discordrb//lib/discordrb/bot.rb#693
  def log_exception(e); end

  # Sets the logging mode
  #
  # @see Logger#mode=
  #
  # source://discordrb//lib/discordrb/bot.rb#595
  def mode=(new_mode); end

  # The bot's name which discordrb sends to Discord when making any request, so Discord can identify bots with the
  # same codebase. Not required but I recommend setting it anyway.
  #
  # @return [String] The bot's name.
  #
  # source://discordrb//lib/discordrb/bot.rb#53
  def name; end

  # The bot's name which discordrb sends to Discord when making any request, so Discord can identify bots with the
  # same codebase. Not required but I recommend setting it anyway.
  #
  # @return [String] The bot's name.
  #
  # source://discordrb//lib/discordrb/bot.rb#53
  def name=(_arg0); end

  # Sets status to online.
  #
  # source://discordrb//lib/discordrb/bot.rb#561
  def on; end

  # Sets status to online.
  #
  # source://discordrb//lib/discordrb/bot.rb#561
  def online; end

  # Gets the user, channel, role or emoji from a string.
  #
  # @param mention [String] The mention, which should look like `<@12314873129>`, `<#123456789>`, `<@&123456789>` or `<:name:126328:>`.
  # @param server [Server, nil] The server of the associated mention. (recommended for role parsing, to speed things up)
  # @return [User, Channel, Role, Emoji] The user, channel, role or emoji identified by the mention, or `nil` if none exists.
  #
  # source://discordrb//lib/discordrb/bot.rb#497
  def parse_mention(mention, server = T.unsafe(nil)); end

  # Gets the users, channels, roles and emoji from a string.
  #
  # @param mentions [String] The mentions, which should look like `<@12314873129>`, `<#123456789>`, `<@&123456789>` or `<:name:126328:>`.
  # @param server [Server, nil] The server of the associated mentions. (recommended for role parsing, to speed things up)
  # @return [Array<User, Channel, Role, Emoji>] The array of users, channels, roles and emoji identified by the mentions, or `nil` if none exists.
  #
  # source://discordrb//lib/discordrb/bot.rb#463
  def parse_mentions(mentions, server = T.unsafe(nil)); end

  # Sets the currently playing game to the specified game.
  #
  # @param name [String] The name of the game to be played.
  # @return [String] The game that is being played now.
  #
  # source://discordrb//lib/discordrb/bot.rb#527
  def playing=(name); end

  # The bot's user profile. This special user object can be used
  # to edit user data like the current username (see {Profile#username=}).
  #
  # @return [Profile] The bot's profile that can be used to edit data.
  #
  # source://discordrb//lib/discordrb/bot.rb#199
  def profile; end

  # Makes the bot leave any groups with no recipients remaining
  #
  # source://discordrb//lib/discordrb/bot.rb#708
  def prune_empty_groups; end

  # Raises a heartbeat event. Called by the gateway connection handler used internally.
  #
  # source://discordrb//lib/discordrb/bot.rb#703
  def raise_heartbeat_event; end

  # @return [String] the raw token, without any prefix
  # @see #token
  #
  # source://discordrb//lib/discordrb/bot.rb#227
  def raw_token; end

  # Runs the bot, which logs into Discord and connects the WebSocket. This
  # prevents all further execution unless it is executed with
  # `background` = `true`.
  #
  # @note Running the bot in the background means that you can call some
  #   methods that require a gateway connection *before* that connection is
  #   established. In most cases an exception will be raised if you try to do
  #   this. If you need a way to safely run code after the bot is fully
  #   connected, use a {#ready} event handler instead.
  # @param background [true, false] If it is `true`, then the bot will run in
  #   another thread to allow further execution. If it is `false`, this method
  #   will block until {#stop} is called. If the bot is run with `true`, make
  #   sure to eventually call {#join} so the script doesn't stop prematurely.
  #
  # source://discordrb//lib/discordrb/bot.rb#243
  def run(background = T.unsafe(nil)); end

  # Sends a file to a channel. If it is an image, it will automatically be embedded.
  #
  # @example Send a file from disk
  #   bot.send_file(83281822225530880, File.open('rubytaco.png', 'r'))
  # @note This executes in a blocking way, so if you're sending long files, be wary of delays.
  # @param file [File] The file that should be sent.
  # @param caption [string] The caption for the file.
  # @param tts [true, false] Whether or not this file's caption should be sent using Discord text-to-speech.
  # @param filename [String] Overrides the filename of the uploaded file
  # @param spoiler [true, false] Whether or not this file should appear as a spoiler.
  # @param channel [Channel, String, Integer] The channel, or its ID, to send something to.
  #
  # source://discordrb//lib/discordrb/bot.rb#410
  def send_file(channel, file, caption: T.unsafe(nil), tts: T.unsafe(nil), filename: T.unsafe(nil), spoiler: T.unsafe(nil)); end

  # Sends a text message to a channel given its ID and the message's content.
  #
  # @param channel [Channel, String, Integer] The channel, or its ID, to send something to.
  # @param content [String] The text that should be sent as a message. It is limited to 2000 characters (Discord imposed).
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Message] The message that was sent.
  #
  # source://discordrb//lib/discordrb/bot.rb#369
  def send_message(channel, content, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # Sends a text message to a channel given its ID and the message's content,
  # then deletes it after the specified timeout in seconds.
  #
  # @param channel [Channel, String, Integer] The channel, or its ID, to send something to.
  # @param content [String] The text that should be sent as a message. It is limited to 2000 characters (Discord imposed).
  # @param timeout [Float] The amount of time in seconds after which the message sent will be deleted.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  #
  # source://discordrb//lib/discordrb/bot.rb#388
  def send_temporary_message(channel, content, timeout, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil)); end

  # The list of servers the bot is currently in.
  #
  # @return [Hash<Integer => Server>] The servers by ID.
  #
  # source://discordrb//lib/discordrb/bot.rb#162
  def servers; end

  # @return [Array(Integer, Integer)] the current shard key
  #
  # source://discordrb//lib/discordrb/bot.rb#56
  def shard_key; end

  # @return [true, false] whether or not the bot should parse its own messages. Off by default.
  #
  # source://discordrb//lib/discordrb/bot.rb#48
  def should_parse_self; end

  # @return [true, false] whether or not the bot should parse its own messages. Off by default.
  #
  # source://discordrb//lib/discordrb/bot.rb#48
  def should_parse_self=(_arg0); end

  # Stops the bot gracefully, disconnecting the websocket without immediately killing the thread. This means that
  # Discord is immediately aware of the closed connection and makes the bot appear offline instantly.
  #
  # @note This method no longer takes an argument as of 3.4.0
  #
  # source://discordrb//lib/discordrb/bot.rb#263
  def stop(_no_sync = T.unsafe(nil)); end

  # Sets the currently online stream to the specified name and Twitch URL.
  #
  # @param name [String] The name of the stream to display.
  # @param url [String] The url of the current Twitch stream.
  # @return [String] The stream name that is being displayed now.
  #
  # source://discordrb//lib/discordrb/bot.rb#554
  def stream(name, url); end

  # Prevents the READY packet from being printed regardless of debug mode.
  #
  # source://discordrb//lib/discordrb/bot.rb#600
  def suppress_ready_debug; end

  # Joins the bot's connection thread with the current thread.
  # This blocks execution until the websocket stops, which should only happen
  # manually triggered. or due to an error. This is necessary to have a
  # continuously running bot.
  #
  # source://discordrb//lib/discordrb/bot.rb#255
  def sync; end

  # The Discord API token received when logging in. Useful to explicitly call
  # {API} methods.
  #
  # @return [String] The API token.
  #
  # source://discordrb//lib/discordrb/bot.rb#220
  def token; end

  # Remove a user from the ignore list.
  #
  # @param user [User, String, Integer] The user, or its ID, to be unignored.
  #
  # source://discordrb//lib/discordrb/bot.rb#676
  def unignore_user(user); end

  # Changes information about your OAuth application
  #
  # @param name [String] What your application should be called.
  # @param redirect_uris [Array<String>] URIs that Discord should redirect your users to after authorizing.
  # @param description [String] A string that describes what your application does.
  # @param icon [String, nil] A data URI for your icon image (for example a base 64 encoded image), or nil if no icon
  #   should be set or changed.
  #
  # source://discordrb//lib/discordrb/bot.rb#455
  def update_oauth_application(name, redirect_uris, description = T.unsafe(nil), icon = T.unsafe(nil)); end

  # Updates presence status.
  #
  # @param status [String] The status the bot should show up as. Can be `online`, `dnd`, `idle`, or `invisible`
  # @param activity [String, nil] The name of the activity to be played/watched/listened to/stream name on the stream.
  # @param url [String, nil] The Twitch URL to display as a stream. nil for no stream.
  # @param since [Integer] When this status was set.
  # @param afk [true, false] Whether the bot is AFK.
  # @param activity_type [Integer] The type of activity status to display. Can be 0 (Playing), 1 (Streaming), 2 (Listening), 3 (Watching)
  # @see Gateway#send_status_update
  #
  # source://discordrb//lib/discordrb/bot.rb#509
  def update_status(status, activity, url, since = T.unsafe(nil), afk = T.unsafe(nil), activity_type = T.unsafe(nil)); end

  # The list of users the bot shares a server with.
  #
  # @return [Hash<Integer => User>] The users by ID.
  #
  # source://discordrb//lib/discordrb/bot.rb#154
  def users; end

  # Gets the voice bot for a particular server or channel. You can connect to a new channel using the {#voice_connect}
  # method.
  #
  # @param thing [Channel, Server, Integer] the server or channel you want to get the voice bot for, or its ID.
  # @return [Voice::VoiceBot, nil] the VoiceBot for the thing you specified, or nil if there is no connection yet
  #
  # source://discordrb//lib/discordrb/bot.rb#298
  def voice(thing); end

  # Connects to a voice channel, initializes network connections and returns the {Voice::VoiceBot} over which audio
  # data can then be sent. After connecting, the bot can also be accessed using {#voice}. If the bot is already
  # connected to voice, the existing connection will be terminated - you don't have to call
  # {Discordrb::Voice::VoiceBot#destroy} before calling this method.
  #
  # @param chan [Channel, String, Integer] The voice channel, or its ID, to connect to.
  # @param encrypted [true, false] Whether voice communication should be encrypted using
  #   (uses an XSalsa20 stream cipher for encryption and Poly1305 for authentication)
  # @raise [ArgumentError]
  # @return [Voice::VoiceBot] the initialized bot over which audio data can then be sent.
  #
  # source://discordrb//lib/discordrb/bot.rb#317
  def voice_connect(chan, encrypted = T.unsafe(nil)); end

  # Disconnects the client from a specific voice connection given the server ID. Usually it's more convenient to use
  # {Discordrb::Voice::VoiceBot#destroy} rather than this.
  #
  # @param server [Server, String, Integer] The server, or server ID, the voice connection is on.
  # @param destroy_vws [true, false] Whether or not the VWS should also be destroyed. If you're calling this method
  #   directly, you should leave it as true.
  #
  # source://discordrb//lib/discordrb/bot.rb#346
  def voice_destroy(server, destroy_vws = T.unsafe(nil)); end

  # @return [Hash<Integer => VoiceBot>] the voice connections this bot currently has, by the server ID to which they are connected.
  #
  # source://discordrb//lib/discordrb/bot.rb#292
  def voices; end

  # Sets the current watching status to the specified name.
  #
  # @param name [String] The thing to be watched.
  # @return [String] The thing that is now being watched.
  #
  # source://discordrb//lib/discordrb/bot.rb#545
  def watching=(name); end

  private

  # Internal handler for GUILD_MEMBER_ADD
  #
  # source://discordrb//lib/discordrb/bot.rb#889
  def add_guild_member(data); end

  # Internal handler for MESSAGE_REACTION_ADD
  #
  # source://discordrb//lib/discordrb/bot.rb#989
  def add_message_reaction(data); end

  # Internal handler for CHANNEL_RECIPIENT_ADD
  #
  # source://discordrb//lib/discordrb/bot.rb#869
  def add_recipient(data); end

  # Internal handler for GUILD_BAN_ADD
  #
  # source://discordrb//lib/discordrb/bot.rb#998
  def add_user_ban(data); end

  # source://discordrb//lib/discordrb/bot.rb#1412
  def calculate_intents(intents); end

  # source://discordrb//lib/discordrb/bot.rb#1380
  def call_event(handler, event); end

  # Internal handler for CHANNEL_CREATE
  #
  # source://discordrb//lib/discordrb/bot.rb#828
  def create_channel(data); end

  # Internal handler for GUILD_CREATE
  #
  # source://discordrb//lib/discordrb/bot.rb#921
  def create_guild(data); end

  # Internal handler for GUILD_ROLE_CREATE
  #
  # source://discordrb//lib/discordrb/bot.rb#948
  def create_guild_role(data); end

  # Internal handler for MESSAGE_CREATE
  #
  # source://discordrb//lib/discordrb/bot.rb#977
  def create_message(data); end

  # Internal handler for CHANNEL_DELETE
  #
  # source://discordrb//lib/discordrb/bot.rb#853
  def delete_channel(data); end

  # Internal handler for GUILD_DELETE
  #
  # source://discordrb//lib/discordrb/bot.rb#931
  def delete_guild(data); end

  # Internal handler for GUILD_MEMBER_DELETE
  #
  # source://discordrb//lib/discordrb/bot.rb#909
  def delete_guild_member(data); end

  # Internal handler for GUILD_ROLE_DELETE
  #
  # source://discordrb//lib/discordrb/bot.rb#962
  def delete_guild_role(data); end

  # Internal handler for MESSAGE_DELETE
  #
  # source://discordrb//lib/discordrb/bot.rb#986
  def delete_message(data); end

  # Throws a useful exception if there's currently no gateway connection.
  #
  # source://discordrb//lib/discordrb/bot.rb#717
  def gateway_check; end

  # source://discordrb//lib/discordrb/bot.rb#1398
  def handle_awaits(event); end

  # source://discordrb//lib/discordrb/bot.rb#1019
  def handle_dispatch(type, data); end

  # Notifies everything there is to be notified that the connection is now ready
  #
  # source://discordrb//lib/discordrb/bot.rb#1359
  def notify_ready; end

  # #######   ######   #### ##    ##
  #       ##     ## ##    ##   ##  ###   ##
  #       ##     ## ##         ##  ####  ##
  #       ##     ## ##   ####  ##  ## ## ##
  #       ##     ## ##    ##   ##  ##  ####
  #       ##     ## ##    ##   ##  ##   ###
  #  #######   ######   #### ##    ##
  #
  # source://discordrb//lib/discordrb/bot.rb#1011
  def process_token(type, token); end

  # source://discordrb//lib/discordrb/bot.rb#1367
  def raise_event(event); end

  # Internal handler for MESSAGE_REACTION_REMOVE_ALL
  #
  # source://discordrb//lib/discordrb/bot.rb#995
  def remove_all_message_reactions(data); end

  # Internal handler for MESSAGE_REACTION_REMOVE
  #
  # source://discordrb//lib/discordrb/bot.rb#992
  def remove_message_reaction(data); end

  # Internal handler for CHANNEL_RECIPIENT_REMOVE
  #
  # source://discordrb//lib/discordrb/bot.rb#879
  def remove_recipient(data); end

  # Internal handler for GUILD_BAN_REMOVE
  #
  # source://discordrb//lib/discordrb/bot.rb#1001
  def remove_user_ban(data); end

  # Internal handler for TYPING_START
  #
  # source://discordrb//lib/discordrb/bot.rb#980
  def start_typing(data); end

  # Logs a warning if there are servers which are still unavailable.
  # e.g. due to a Discord outage or because the servers are large and taking a while to load.
  #
  # source://discordrb//lib/discordrb/bot.rb#723
  def unavailable_servers_check; end

  # Internal handler for CHANNEL_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#844
  def update_channel(data); end

  # Internal handler for GUILD_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#926
  def update_guild(data); end

  # Internal handler for GUILD_EMOJIS_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#970
  def update_guild_emoji(data); end

  # Internal handler for GUILD_MEMBER_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#898
  def update_guild_member(data); end

  # Internal handler for GUILD_ROLE_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#937
  def update_guild_role(data); end

  # Internal handler for MESSAGE_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#983
  def update_message(data); end

  # Internal handler for PRESENCE_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#740
  def update_presence(data); end

  # Internal handler for VOICE_SERVER_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#805
  def update_voice_server(data); end

  # Internal handler for VOICE_STATE_UPDATE
  #
  # source://discordrb//lib/discordrb/bot.rb#777
  def update_voice_state(data); end
end

# The maximum length a Discord message can have
#
# source://discordrb//lib/discordrb.rb#47
Discordrb::CHARACTER_LIMIT = T.let(T.unsafe(nil), Integer)

# This mixin module does caching stuff for the library. It conveniently separates the logic behind
# the caching (like, storing the user hashes or making API calls to retrieve things) from the Bot that
# actually uses it.
module Discordrb::Cache
  # Gets a channel given its ID. This queries the internal channel cache, and if the channel doesn't
  # exist in there, it will get the data from Discord.
  #
  # @param id [Integer] The channel ID for which to search for.
  # @param server [Server] The server for which to search the channel for. If this isn't specified, it will be
  #   inferred using the API
  # @raise [Discordrb::Errors::NoPermission]
  # @return [Channel] The channel identified by the ID.
  #
  # source://discordrb//lib/discordrb/cache.rb#46
  def channel(id, server = T.unsafe(nil)); end

  # Ensures a given channel object is cached and if not, cache it from the given data hash.
  #
  # @param data [Hash] A data hash representing a channel.
  # @param server [Server, nil] The server the channel is on, if known.
  # @return [Channel] the channel represented by the data hash.
  #
  # source://discordrb//lib/discordrb/cache.rb#172
  def ensure_channel(data, server = T.unsafe(nil)); end

  # Ensures a given server object is cached and if not, cache it from the given data hash.
  #
  # @param data [Hash] A data hash representing a server.
  # @return [Server] the server represented by the data hash.
  #
  # source://discordrb//lib/discordrb/cache.rb#160
  def ensure_server(data); end

  # Ensures a given user object is cached and if not, cache it from the given data hash.
  #
  # @param data [Hash] A data hash representing a user.
  # @return [User] the user represented by the data hash.
  #
  # source://discordrb//lib/discordrb/cache.rb#149
  def ensure_user(data); end

  # Finds a channel given its name and optionally the name of the server it is in.
  #
  # @param channel_name [String] The channel to search for.
  # @param server_name [String] The server to search for, or `nil` if only the channel should be searched for.
  # @param type [Integer, nil] The type of channel to search for (0: text, 1: private, 2: voice, 3: group), or `nil` if any type of
  #   channel should be searched for
  # @return [Array<Channel>] The array of channels that were found. May be empty if none were found.
  #
  # source://discordrb//lib/discordrb/cache.rb#215
  def find_channel(channel_name, server_name = T.unsafe(nil), type: T.unsafe(nil)); end

  # Finds a user given its username or username & discriminator.
  #
  # @example Find users by name
  #   bot.find_user('z64') #=> Array<User>
  # @example Find a user by name and discriminator
  #   bot.find_user('z64', '2639') #=> User
  # @note This method only searches through users that have been cached. Users that have not yet been cached
  #   by the bot but still share a connection with the user (mutual server) will not be found.
  # @overload find_user
  # @overload find_user
  #
  # source://discordrb//lib/discordrb/cache.rb#249
  def find_user(username, discrim = T.unsafe(nil)); end

  # Gets a channel given its ID. This queries the internal channel cache, and if the channel doesn't
  # exist in there, it will get the data from Discord.
  #
  # @param id [Integer] The channel ID for which to search for.
  # @param server [Server] The server for which to search the channel for. If this isn't specified, it will be
  #   inferred using the API
  # @raise [Discordrb::Errors::NoPermission]
  # @return [Channel] The channel identified by the ID.
  #
  # source://discordrb//lib/discordrb/cache.rb#46
  def group_channel(id, server = T.unsafe(nil)); end

  # Initializes this cache
  #
  # source://discordrb//lib/discordrb/cache.rb#15
  def init_cache; end

  # Gets information about an invite.
  #
  # @param invite [String, Invite] The invite to join. For possible formats see {#resolve_invite_code}.
  # @return [Invite] The invite with information about the given invite URL.
  #
  # source://discordrb//lib/discordrb/cache.rb#204
  def invite(invite); end

  # Gets a member by both IDs, or `Server` and user ID.
  #
  # @param server_or_id [Server, Integer] The `Server` or server ID for which a member should be resolved
  # @param user_id [Integer] The ID of the user that should be resolved
  # @return [Member, nil] The member identified by the IDs, or `nil` if none could be found
  #
  # source://discordrb//lib/discordrb/cache.rb#111
  def member(server_or_id, user_id); end

  # Creates a PM channel for the given user ID, or if one exists already, returns that one.
  # It is recommended that you use {User#pm} instead, as this is mainly for internal use. However,
  # usage of this method may be unavoidable if only the user ID is known.
  #
  # @param id [Integer] The user ID to generate a private channel for.
  # @return [Channel] A private channel for that user.
  #
  # source://discordrb//lib/discordrb/cache.rb#134
  def pm_channel(id); end

  # Creates a PM channel for the given user ID, or if one exists already, returns that one.
  # It is recommended that you use {User#pm} instead, as this is mainly for internal use. However,
  # usage of this method may be unavoidable if only the user ID is known.
  #
  # @param id [Integer] The user ID to generate a private channel for.
  # @return [Channel] A private channel for that user.
  #
  # source://discordrb//lib/discordrb/cache.rb#134
  def private_channel(id); end

  # Requests member chunks for a given server ID.
  #
  # @param id [Integer] The server ID to request chunks for.
  #
  # source://discordrb//lib/discordrb/cache.rb#182
  def request_chunks(id); end

  # Gets the code for an invite.
  #
  # @param invite [String, Invite] The invite to get the code for. Possible formats are:
  #
  #   * An {Invite} object
  #   * The code for an invite
  #   * A fully qualified invite URL (e.g. `https://discord.com/invite/0A37aN7fasF7n83q`)
  #   * A short invite URL with protocol (e.g. `https://discord.gg/0A37aN7fasF7n83q`)
  #   * A short invite URL without protocol (e.g. `discord.gg/0A37aN7fasF7n83q`)
  # @return [String] Only the code for the invite.
  #
  # source://discordrb//lib/discordrb/cache.rb#195
  def resolve_invite_code(invite); end

  # Gets a server by its ID.
  #
  # @note This can only resolve servers the bot is currently in.
  # @param id [Integer] The server ID that should be resolved.
  # @return [Server, nil] The server identified by the ID, or `nil` if it couldn't be found.
  #
  # source://discordrb//lib/discordrb/cache.rb#93
  def server(id); end

  # Gets a user by its ID.
  #
  # @note This can only resolve users known by the bot (i.e. that share a server with the bot).
  # @param id [Integer] The user ID that should be resolved.
  # @return [User, nil] The user identified by the ID, or `nil` if it couldn't be found.
  #
  # source://discordrb//lib/discordrb/cache.rb#75
  def user(id); end

  # Returns or caches the available voice regions
  #
  # source://discordrb//lib/discordrb/cache.rb#29
  def voice_regions; end
end

# A Discord channel, including data like the topic
class Discordrb::Channel
  include ::Discordrb::IDObject

  # @return [Channel] a new instance of Channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#75
  def initialize(data, bot, server = T.unsafe(nil)); end

  # Adds a user to a group channel.
  #
  # @param user_ids [Array<String, Integer>, String, Integer] User ID or array of user IDs to add to the group channel.
  # @return [Channel] the group channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#677
  def add_group_user(user_ids); end

  # Adds a user to a group channel.
  #
  # @param user_ids [Array<String, Integer>, String, Integer] User ID or array of user IDs to add to the group channel.
  # @return [Channel] the group channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#677
  def add_group_users(user_ids); end

  # Adds a recipient to a group channel.
  #
  # @note For internal use only
  # @param recipient [Recipient] the recipient to add to the group
  # @raise [ArgumentError] if tried to add a non-recipient
  #
  # source://discordrb//lib/discordrb/data/channel.rb#755
  def add_recipient(recipient); end

  # Add an {Await} for a message in this channel. This is identical in functionality to adding a
  # {Discordrb::Events::MessageEvent} await with the `in` attribute as this channel.
  #
  # @deprecated Will be changed to blocking behavior in v4.0. Use {#await!} instead.
  # @see Bot#add_await
  #
  # source://discordrb//lib/discordrb/data/channel.rb#628
  def await(key, attributes = T.unsafe(nil), &block); end

  # Add a blocking {Await} for a message in this channel. This is identical in functionality to adding a
  # {Discordrb::Events::MessageEvent} await with the `in` attribute as this channel.
  #
  # @see Bot#add_await!
  #
  # source://discordrb//lib/discordrb/data/channel.rb#635
  def await!(attributes = T.unsafe(nil), &block); end

  # @return [Integer] the bitrate (in bps) of the channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#42
  def bitrate; end

  # Sets this channel's bitrate.
  #
  # @param bitrate [Integer] The new bitrate (in bps). Number has to be between 8000-96000 (128000 for VIP servers)
  #
  # source://discordrb//lib/discordrb/data/channel.rb#437
  def bitrate=(bitrate); end

  # @return [Channel, nil] the category channel, if this channel is in a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#147
  def category; end

  # Sets this channels parent category
  #
  # @param channel [Channel, String, Integer] the target category channel, or its ID
  # @raise [ArgumentError] if the target channel isn't a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#156
  def category=(channel); end

  # @return [true, false] whether or not this channel is a category channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#132
  def category?; end

  # Returns the children of this channel, if it is a category. Otherwise returns an empty array.
  #
  # @return [Array<Channel>]
  #
  # source://discordrb//lib/discordrb/data/channel.rb#295
  def channels; end

  # Returns the children of this channel, if it is a category. Otherwise returns an empty array.
  #
  # @return [Array<Channel>]
  #
  # source://discordrb//lib/discordrb/data/channel.rb#295
  def children; end

  # Creates a Group channel
  #
  # @param user_ids [Array<Integer>] Array of user IDs to add to the new group channel (Excluding
  #   the recipient of the PM channel).
  # @return [Channel] the created channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#666
  def create_group(user_ids); end

  # Creates a webhook in this channel
  #
  # @param name [String] the default name of this webhook.
  # @param avatar [String] the default avatar URL to give this webhook.
  # @param reason [String] the reason for the webhook creation.
  # @raise [ArgumentError] if the channel isn't a text channel in a server.
  # @return [Webhook] the created webhook.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#719
  def create_webhook(name, avatar = T.unsafe(nil), reason = T.unsafe(nil)); end

  # @return [true, false] whether or not this channel is the default channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#326
  def default?; end

  # @return [true, false] whether or not this channel is the default channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#326
  def default_channel?; end

  # Defines a permission overwrite for this channel that sets the specified thing to the specified allow and deny
  # permission sets, or change an existing one.
  #
  # @overload define_overwrite
  # @overload define_overwrite
  #
  # source://discordrb//lib/discordrb/data/channel.rb#480
  def define_overwrite(thing, allow = T.unsafe(nil), deny = T.unsafe(nil), reason: T.unsafe(nil)); end

  # Permanently deletes this channel
  #
  # @param reason [String] The reason the for the channel deletion.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#417
  def delete(reason = T.unsafe(nil)); end

  # Deletes a message on this channel. Mostly useful in case a message needs to be deleted when only the ID is known
  #
  # @param message [Message, String, Integer, String, Integer] The message, or its ID, that should be deleted.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#411
  def delete_message(message); end

  # Deletes a collection of messages
  #
  # @param messages [Array<Message, String, Integer>] the messages (or message IDs) to delete. Total must be an amount between 2 and 100 (Discord limitation)
  # @param strict [true, false] Whether an error should be raised when a message is reached that is too old to be bulk
  #   deleted. If this is false only a warning message will be output to the console.
  # @param reason [String, nil] The reason for deleting the messages
  # @raise [ArgumentError] if the amount of messages is not a value between 2 and 100
  # @return [Integer] The amount of messages that were successfully deleted
  #
  # source://discordrb//lib/discordrb/data/channel.rb#610
  def delete_messages(messages, strict = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Deletes a permission overwrite for this channel
  #
  # @param target [Member, User, Role, Profile, Recipient, String, Integer] What permission overwrite to delete
  #   @param reason [String] The reason the for the overwrite deletion.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#494
  def delete_overwrite(target, reason = T.unsafe(nil)); end

  # @return [true, false] whether or not this channel is a group channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#127
  def group?; end

  # Retrieves some of this channel's message history.
  #
  # @example Count the number of messages in the last 50 messages that contain the letter 'e'.
  #   message_count = channel.history(50).count {|message| message.content.include? "e"}
  # @example Get the last 10 messages before the provided message.
  #   last_ten_messages = channel.history(10, message.id)
  # @param amount [Integer] How many messages to retrieve. This must be less than or equal to 100, if it is higher
  #   than 100 it will be treated as 100 on Discord's side.
  # @param before_id [Integer] The ID of the most recent message the retrieval should start at, or nil if it should
  #   start at the current message.
  # @param after_id [Integer] The ID of the oldest message the retrieval should start at, or nil if it should start
  #   as soon as possible with the specified amount.
  # @param around_id [Integer] The ID of the message retrieval should start from, reading in both directions
  # @return [Array<Message>] the retrieved messages.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#540
  def history(amount, before_id = T.unsafe(nil), after_id = T.unsafe(nil), around_id = T.unsafe(nil)); end

  # Retrieves message history, but only message IDs for use with prune.
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/channel.rb#548
  def history_ids(amount, before_id = T.unsafe(nil), after_id = T.unsafe(nil), around_id = T.unsafe(nil)); end

  # The default `inspect` method is overwritten to give more useful output.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#746
  def inspect; end

  # Creates a new invite to this channel.
  #
  # @param max_age [Integer] How many seconds this invite should last.
  # @param max_uses [Integer] How many times this invite should be able to be used.
  # @param temporary [true, false] Whether membership should be temporary (kicked after going offline).
  # @param unique [true, false] If true, Discord will always send a unique invite instead of possibly re-using a similar one
  # @param reason [String] The reason the for the creation of this invite.
  # @return [Invite] the created invite.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#646
  def invite(max_age = T.unsafe(nil), max_uses = T.unsafe(nil), temporary = T.unsafe(nil), unique = T.unsafe(nil), reason = T.unsafe(nil)); end

  # Requests a list of Invites to the channel.
  #
  # @return [Array<Invite>] invites to the channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#738
  def invites; end

  # @return [String] a URL that a user can use to navigate to this channel in the client
  #
  # source://discordrb//lib/discordrb/data/channel.rb#792
  def jump_link; end

  # Leaves the group.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#705
  def leave; end

  # Leaves the group.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#705
  def leave_group; end

  # @return [Integer] the amount of users that can be in the channel. `0` means it is unlimited.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#45
  def limit; end

  # Sets this channel's user limit.
  #
  # @param limit [Integer] The new user limit. `0` for unlimited, has to be a number between 0-99
  #
  # source://discordrb//lib/discordrb/data/channel.rb#445
  def limit=(limit); end

  # @return [String] a URL that a user can use to navigate to this channel in the client
  #
  # source://discordrb//lib/discordrb/data/channel.rb#792
  def link; end

  # Returns a single message from this channel's history by ID.
  #
  # @param message_id [Integer] The ID of the message to retrieve.
  # @return [Message, nil] the retrieved message, or `nil` if it couldn't be found.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#556
  def load_message(message_id); end

  # Creates a new invite to this channel.
  #
  # @param max_age [Integer] How many seconds this invite should last.
  # @param max_uses [Integer] How many times this invite should be able to be used.
  # @param temporary [true, false] Whether membership should be temporary (kicked after going offline).
  # @param unique [true, false] If true, Discord will always send a unique invite instead of possibly re-using a similar one
  # @param reason [String] The reason the for the creation of this invite.
  # @return [Invite] the created invite.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#646
  def make_invite(max_age = T.unsafe(nil), max_uses = T.unsafe(nil), temporary = T.unsafe(nil), unique = T.unsafe(nil), reason = T.unsafe(nil)); end

  # @return [Overwrite] any member-type permission overwrites on this channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#316
  def member_overwrites; end

  # @return [String] a string that will mention the channel as a clickable link on Discord.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#65
  def mention; end

  # Returns a single message from this channel's history by ID.
  #
  # @param message_id [Integer] The ID of the message to retrieve.
  # @return [Message, nil] the retrieved message, or `nil` if it couldn't be found.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#556
  def message(message_id); end

  # @return [String] this channel's name.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#20
  def name; end

  # Sets this channel's name. The name must be alphanumeric with dashes, unless this is a voice channel (then there are no limitations)
  #
  # @param name [String] The new name.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#423
  def name=(name); end

  # @return [true, false] whether or not this channel is a news channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#137
  def news?; end

  # @return [true, false] if this channel is marked as nsfw
  #
  # source://discordrb//lib/discordrb/data/channel.rb#52
  def nsfw; end

  # Sets whether this channel is NSFW
  #
  # @param nsfw [true, false]
  # @raise [ArgumentError] if value isn't one of true, false
  #
  # source://discordrb//lib/discordrb/data/channel.rb#234
  def nsfw=(nsfw); end

  # @return [true, false] if this channel is marked as nsfw
  #
  # source://discordrb//lib/discordrb/data/channel.rb#52
  def nsfw?; end

  # This channel's permission overwrites
  #
  # @overload permission_overwrites
  # @overload permission_overwrites
  #
  # source://discordrb//lib/discordrb/data/channel.rb#249
  def overwrites(type = T.unsafe(nil)); end

  # @return [Integer, nil] the ID of the owner of the group channel or nil if this is not a group channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#33
  def owner_id; end

  # @return [Channel, nil] the category channel, if this channel is in a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#147
  def parent; end

  # Sets this channels parent category
  #
  # @param channel [Channel, String, Integer] the target category channel, or its ID
  # @raise [ArgumentError] if the target channel isn't a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#156
  def parent=(channel); end

  # @return [Integer, nil] the ID of the parent channel, if this channel is inside a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#26
  def parent_id; end

  # This channel's permission overwrites
  #
  # @overload permission_overwrites
  # @overload permission_overwrites
  #
  # source://discordrb//lib/discordrb/data/channel.rb#249
  def permission_overwrites(type = T.unsafe(nil)); end

  # Bulk sets this channels permission overwrites
  #
  # @param overwrites [Array<Overwrite>]
  #
  # source://discordrb//lib/discordrb/data/channel.rb#259
  def permission_overwrites=(overwrites); end

  # Requests all pinned messages in a channel.
  #
  # @return [Array<Message>] the received messages.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#567
  def pins; end

  # @return [true, false] whether or not this channel is a PM channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#117
  def pm?; end

  # @return [Integer] the channel's position on the channel list
  #
  # source://discordrb//lib/discordrb/data/channel.rb#49
  def position; end

  # Sets this channel's position in the list.
  #
  # @param position [Integer] The new position.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#455
  def position=(position); end

  # @return [true, false] whether or not this channel is a PM or group channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#60
  def private?; end

  # Delete the last N messages on this channel.
  #
  # @example Pruning messages from a specific user ID
  #   channel.prune(100) { |m| m.author.id == 83283213010599936 }
  # @param amount [Integer] The amount of message history to consider for pruning. Must be a value between 2 and 100 (Discord limitation)
  # @param strict [true, false] Whether an error should be raised when a message is reached that is too old to be bulk
  #   deleted. If this is false only a warning message will be output to the console.
  # @param reason [String, nil] The reason for pruning
  # @raise [ArgumentError] if the amount of messages is not a value between 2 and 100
  # @return [Integer] The amount of messages that were successfully deleted
  # @yield [message] Yields each message in this channels history for filtering the messages to delete
  #
  # source://discordrb//lib/discordrb/data/channel.rb#582
  def prune(amount, strict = T.unsafe(nil), reason = T.unsafe(nil), &block); end

  # @return [Integer] the amount of time (in seconds) users need to wait to send in between messages.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#56
  def rate_limit_per_user; end

  # Sets the amount of time (in seconds) users have to wait in between sending messages.
  #
  # @param rate [Integer]
  # @raise [ArgumentError] if value isn't between 0 and 120
  #
  # source://discordrb//lib/discordrb/data/channel.rb#266
  def rate_limit_per_user=(rate); end

  # @return [Recipient, nil] the recipient of the private messages, or nil if this is not a PM channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#70
  def recipient; end

  # @return [Array<Recipient>, nil] the array of recipients of the private messages, or nil if this is not a Private channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#36
  def recipients; end

  # Removes a user from a group channel.
  #
  # @param user_ids [Array<String, Integer>, String, Integer] User ID or array of user IDs to remove from the group channel.
  # @return [Channel] the group channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#692
  def remove_group_user(user_ids); end

  # Removes a user from a group channel.
  #
  # @param user_ids [Array<String, Integer>, String, Integer] User ID or array of user IDs to remove from the group channel.
  # @return [Channel] the group channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#692
  def remove_group_users(user_ids); end

  # Removes a recipient from a group channel.
  #
  # @note For internal use only
  # @param recipient [Recipient] the recipient to remove from the group
  # @raise [ArgumentError] if tried to remove a non-recipient
  #
  # source://discordrb//lib/discordrb/data/channel.rb#767
  def remove_recipient(recipient); end

  # @return [Overwrite] any role-type permission overwrites on this channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#321
  def role_overwrites; end

  # Sends a message to this channel.
  #
  # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Message] the message that was sent.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#345
  def send(content, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # Convenience method to send a message with an embed.
  #
  # @example Send a message with an embed
  #   channel.send_embed do |embed|
  #   embed.title = 'The Ruby logo'
  #   embed.image = Discordrb::Webhooks::EmbedImage.new(url: 'https://www.ruby-lang.org/images/header-ruby-logo.png')
  #   end
  # @param message [String] The message that should be sent along with the embed. If this is the empty string, only the embed will be shown.
  # @param embed [Discordrb::Webhooks::Embed, nil] The embed to start the building process with, or nil if one should be created anew.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @return [Message] The resulting message.
  # @yield [embed] Yields the embed to allow for easy building inside a block.
  # @yieldparam embed [Discordrb::Webhooks::Embed] The embed from the parameters, or a new one.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#378
  def send_embed(message = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), tts = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # Sends a file to this channel. If it is an image, it will be embedded.
  #
  # @example Send a file from disk
  #   channel.send_file(File.open('rubytaco.png', 'r'))
  # @param file [File] The file to send. There's no clear size limit for this, you'll have to attempt it for yourself (most non-image files are fine, large images may fail to embed)
  # @param caption [string] The caption for the file.
  # @param tts [true, false] Whether or not this file's caption should be sent using Discord text-to-speech.
  # @param filename [String] Overrides the filename of the uploaded file
  # @param spoiler [true, false] Whether or not this file should appear as a spoiler.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#405
  def send_file(file, caption: T.unsafe(nil), tts: T.unsafe(nil), filename: T.unsafe(nil), spoiler: T.unsafe(nil)); end

  # Sends a message to this channel.
  #
  # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Message] the message that was sent.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#345
  def send_message(content, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # Sends multiple messages to a channel
  #
  # @param content [Array<String>] The messages to send.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#386
  def send_multiple(content); end

  # Sends a temporary message to this channel.
  #
  # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
  # @param timeout [Float] The amount of time in seconds after which the message sent will be deleted.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#359
  def send_temporary_message(content, timeout, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # @return [Server, nil] the server this channel is on. If this channel is a PM channel, it will be nil.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#23
  def server; end

  # @return [true, false] whether or not this channel has slowmode enabled
  #
  # source://discordrb//lib/discordrb/data/channel.rb#333
  def slowmode?; end

  # @return [Integer] the amount of time (in seconds) users need to wait to send in between messages.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#56
  def slowmode_rate; end

  # Sets the amount of time (in seconds) users have to wait in between sending messages.
  #
  # @param rate [Integer]
  # @raise [ArgumentError] if value isn't between 0 and 120
  #
  # source://discordrb//lib/discordrb/data/channel.rb#266
  def slowmode_rate=(rate); end

  # Sorts this channel's position to follow another channel.
  #
  # @param other [Channel, String, Integer, nil] The channel, or its ID, below which this channel should be sorted. If the given
  #   channel is a category, this channel will be sorted at the top of that category. If it is `nil`, the channel will
  #   be sorted at the top of the channel list.
  # @param lock_permissions [true, false] Whether the channel's permissions should be synced to the category's
  # @raise [TypeError]
  #
  # source://discordrb//lib/discordrb/data/channel.rb#170
  def sort_after(other = T.unsafe(nil), lock_permissions = T.unsafe(nil)); end

  # Splits a message into chunks whose length is at most the Discord character limit, then sends them individually.
  # Useful for sending long messages, but be wary of rate limits!
  #
  # source://discordrb//lib/discordrb/data/channel.rb#392
  def split_send(content); end

  # Starts typing, which displays the typing indicator on the client for five seconds.
  # If you want to keep typing you'll have to resend this every five seconds. (An abstraction
  # for this will eventually be coming)
  #
  # @example Send a typing indicator for the bot in a given channel.
  #   channel.start_typing()
  #
  # source://discordrb//lib/discordrb/data/channel.rb#658
  def start_typing; end

  # @return [true, false] whether or not this channel is a store channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#142
  def store?; end

  # Syncs this channels overwrites with its parent category
  #
  # @raise [RuntimeError] if this channel is not in a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#276
  def sync; end

  # Syncs this channels overwrites with its parent category
  #
  # @raise [RuntimeError] if this channel is not in a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#276
  def sync_overwrites; end

  # @return [true, false, nil] whether this channels permissions match the permission overwrites of the category that it's in, or nil if it is not in a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#285
  def synced?; end

  # @return [true, false, nil] whether this channels permissions match the permission overwrites of the category that it's in, or nil if it is not in a category
  #
  # source://discordrb//lib/discordrb/data/channel.rb#285
  def synchronized?; end

  # @return [true, false] whether or not this channel is a text channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#112
  def text?; end

  # Returns the text channels in this category, if it is a category channel. Otherwise returns an empty array.
  #
  # @return [Array<Channel>]
  #
  # source://discordrb//lib/discordrb/data/channel.rb#305
  def text_channels; end

  # @return [String] the channel's topic
  #
  # source://discordrb//lib/discordrb/data/channel.rb#39
  def topic; end

  # Sets this channel's topic.
  #
  # @param topic [String] The new topic.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#429
  def topic=(topic); end

  # @return [Integer] the type of this channel
  # @see TYPES
  #
  # source://discordrb//lib/discordrb/data/channel.rb#30
  def type; end

  # Updates the cached data with new data
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/channel.rb#777
  def update_data(new_data = T.unsafe(nil)); end

  # Updates the cached data from another channel.
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/channel.rb#503
  def update_from(other); end

  # Updates the cached permission overwrites
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/channel.rb#620
  def update_overwrites(overwrites); end

  # @return [Integer] the amount of users that can be in the channel. `0` means it is unlimited.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#45
  def user_limit; end

  # Sets this channel's user limit.
  #
  # @param limit [Integer] The new user limit. `0` for unlimited, has to be a number between 0-99
  #
  # source://discordrb//lib/discordrb/data/channel.rb#445
  def user_limit=(limit); end

  # The list of users currently in this channel. For a voice channel, it will return all the members currently
  # in that channel. For a text channel, it will return all online members that have permission to read it.
  #
  # @return [Array<Member>] the users in this channel
  #
  # source://discordrb//lib/discordrb/data/channel.rb#519
  def users; end

  # @return [true, false] whether or not this channel is a voice channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#122
  def voice?; end

  # Returns the voice channels in this category, if it is a category channel. Otherwise returns an empty array.
  #
  # @return [Array<Channel>]
  #
  # source://discordrb//lib/discordrb/data/channel.rb#311
  def voice_channels; end

  # Requests a list of Webhooks on the channel.
  #
  # @return [Array<Webhook>] webhooks on the channel.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#729
  def webhooks; end

  private

  # Deletes a list of messages on this channel using bulk delete.
  #
  # source://discordrb//lib/discordrb/data/channel.rb#804
  def bulk_delete(ids, strict = T.unsafe(nil), reason = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/data/channel.rb#838
  def process_permission_overwrites(overwrites); end

  # source://discordrb//lib/discordrb/data/channel.rb#821
  def update_channel_data(new_data); end
end

# For bulk_delete checking
#
# source://discordrb//lib/discordrb/data/channel.rb#801
Discordrb::Channel::TWO_WEEKS = T.let(T.unsafe(nil), Integer)

# Map of channel types
#
# source://discordrb//lib/discordrb/data/channel.rb#9
Discordrb::Channel::TYPES = T.let(T.unsafe(nil), Hash)

# Alias for the class {ColourRGB}
#
# source://discordrb//lib/discordrb/colour_rgb.rb#42
Discordrb::ColorRGB = Discordrb::ColourRGB

# A colour (red, green and blue values). Used for role colours. If you prefer the American spelling, the alias
# {ColorRGB} is also available.
class Discordrb::ColourRGB
  # Make a new colour from the combined value.
  #
  # @example Initialize a with a base 10 integer
  #   ColourRGB.new(7506394) #=> ColourRGB
  #   ColourRGB.new(0x7289da) #=> ColourRGB
  # @example Initialize a with a hexadecimal string
  #   ColourRGB.new('7289da') #=> ColourRGB
  # @param combined [String, Integer] The colour's RGB values combined into one integer or a hexadecimal string
  # @return [ColourRGB] a new instance of ColourRGB
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#27
  def initialize(combined); end

  # @return [Integer] the blue part of this colour (0-255).
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#14
  def blue; end

  # @return [Integer] the colour's RGB values combined into one integer.
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#17
  def combined; end

  # @return [Integer] the green part of this colour (0-255).
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#11
  def green; end

  # @return [String] the colour as a hexadecimal.
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#35
  def hex; end

  # @return [String] the colour as a hexadecimal.
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#35
  def hexadecimal; end

  # @return [Integer] the red part of this colour (0-255).
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#8
  def red; end

  # @return [Integer] the colour's RGB values combined into one integer.
  #
  # source://discordrb//lib/discordrb/colour_rgb.rb#17
  def to_i; end
end

# Specialized bot to run commands
module Discordrb::Commands; end

# This class represents a bucket for rate limiting - it keeps track of how many requests have been made and when
# exactly the user should be rate limited.
class Discordrb::Commands::Bucket
  # Makes a new bucket
  #
  # @param limit [Integer, nil] How many requests the user may perform in the given time_span, or nil if there should be no limit.
  # @param time_span [Integer, nil] The time span after which the request count is reset, in seconds, or nil if the bucket should never be reset. (If this is nil, limit should be nil too)
  # @param delay [Integer, nil] The delay for which the user has to wait after performing a request, in seconds, or nil if the user shouldn't have to wait.
  # @raise [ArgumentError]
  # @return [Bucket] a new instance of Bucket
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#11
  def initialize(limit, time_span, delay); end

  # Cleans the bucket, removing all elements that aren't necessary anymore
  #
  # @param rate_limit_time [Time] The time to base the cleaning on, only useful for testing.
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#23
  def clean(rate_limit_time = T.unsafe(nil)); end

  # Performs a rate limiting request
  #
  # @param thing [String, Integer, Symbol] The particular thing that should be rate-limited (usually a user/channel, but you can also choose arbitrary integers or symbols)
  # @param rate_limit_time [Time] The time to base the rate limiting on, only useful for testing.
  # @param increment [Integer] How much to increment the rate-limit counter. Default is 1.
  # @return [Integer, false] the waiting time until the next request, in seconds, or false if the request succeeded
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#42
  def rate_limited?(thing, rate_limit_time = T.unsafe(nil), increment: T.unsafe(nil)); end

  private

  # @raise [ArgumentError]
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#83
  def resolve_key(thing); end
end

# Command that can be called in a chain
class Discordrb::Commands::Command
  # @return [Command] a new instance of Command
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#13
  def initialize(name, attributes = T.unsafe(nil), &block); end

  # @return [Hash] the attributes the command was initialized with
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#7
  def attributes; end

  # Calls this command and executes the code inside.
  #
  # @param event [CommandEvent] The event to call the command with.
  # @param arguments [Array<String>] The attributes for the command.
  # @param chained [true, false] Whether or not this command is part of a command chain.
  # @param check_permissions [true, false] Whether the user's permission to execute the command (i.e. rate limits)
  #   should be checked.
  # @return [String] the result of the execution.
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#82
  def call(event, arguments, chained = T.unsafe(nil), check_permissions = T.unsafe(nil)); end

  # @return [Symbol] the name of this command
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#10
  def name; end
end

# A command that references another command
class Discordrb::Commands::CommandAlias
  # @return [CommandAlias] a new instance of CommandAlias
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#132
  def initialize(name, aliased_command); end

  # @return [Command] the command this alias points to
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#130
  def aliased_command; end

  # @return [Symbol] the name of this alias
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#127
  def name; end
end

# Bot that supports commands and command chains
class Discordrb::Commands::CommandBot < ::Discordrb::Bot
  include ::Discordrb::Commands::RateLimiter
  include ::Discordrb::Commands::CommandContainer

  # Creates a new CommandBot and logs in to Discord.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The attributes to initialize the CommandBot with.
  # @return [CommandBot] a new instance of CommandBot
  # @see Discordrb::Bot#initialize Discordrb::Bot#initialize for other attributes that should be used to create the underlying regular bot.
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#72
  def initialize(attributes = T.unsafe(nil)); end

  # Add a channel to the list of channels the bot accepts commands from.
  #
  # @param channel [String, Integer, Channel] The channel name, integer ID, or `Channel` object to be added
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#380
  def add_channel(channel); end

  # Transforms an array of string arguments based on types array.
  # For example, `['1', '10..14']` with types `[Integer, Range]` would turn into `[1, 10..14]`.
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#246
  def arg_check(args, types = T.unsafe(nil), server = T.unsafe(nil)); end

  # @return [Hash] this bot's attributes.
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#17
  def attributes; end

  # @see CommandBot#update_channels
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#368
  def channels=(channels); end

  # Returns all aliases for the command with the given name
  #
  # @param name [Symbol] the name of the `Command`
  # @return [Array<CommandAlias>]
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#195
  def command_aliases(name); end

  # Executes a particular command on the bot. Mostly useful for internal stuff, but one can never know.
  #
  # @param name [Symbol] The command to execute.
  # @param event [CommandEvent] The event to pass to the command.
  # @param arguments [Array<String>] The arguments to pass to the command.
  # @param chained [true, false] Whether or not it should be executed as part of a command chain. If this is false,
  #   commands that have chain_usable set to false will not work.
  # @param check_permissions [true, false] Whether permission parameters such as `required_permission` or
  #   `permission_level` should be checked.
  # @return [String, nil] the command's result, if there is any.
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#210
  def execute_command(name, event, arguments, chained = T.unsafe(nil), check_permissions = T.unsafe(nil)); end

  # Check if a user has permission to do something
  #
  # @param user [User] The user to check
  # @param level [Integer] The minimum permission level the user should have (inclusive)
  # @param server [Server] The server on which to check
  # @return [true, false] whether or not the user has the given permission
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#355
  def permission?(user, level, server); end

  # @return [String, Array<String>, #call] the prefix commands are triggered with.
  # @see #initialize
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#21
  def prefix; end

  # Remove a channel from the list of channels the bot accepts commands from.
  #
  # @param channel [String, Integer, Channel] The channel name, integer ID, or `Channel` object to be removed
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#388
  def remove_channel(channel); end

  # Sets the permission level of a role - this applies to all users in the role
  #
  # @param id [Integer] the ID of the role whose level to set
  # @param level [Integer] the level to set the permission to
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#346
  def set_role_permission(id, level); end

  # Sets the permission level of a user
  #
  # @param id [Integer] the ID of the user whose level to set
  # @param level [Integer] the level to set the permission to
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#339
  def set_user_permission(id, level); end

  # Executes a command in a simple manner, without command chains or permissions.
  #
  # @param chain [String] The command with its arguments separated by spaces.
  # @param event [CommandEvent] The event to pass to the command.
  # @return [String, nil] the command's result, if there is any.
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#329
  def simple_execute(chain, event); end

  # Update the list of channels the bot accepts commands from.
  #
  # @param channels [Array<String, Integer, Channel>] The channels this command bot accepts commands on.
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#374
  def update_channels(channels = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#456
  def allowed_roles?(member, required); end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#474
  def channels?(channel, channels); end

  # source://discordrb//lib/discordrb/commands/command_bot.rb#462
  def check_multiple_roles(member, required, all_roles = T.unsafe(nil)); end

  # Internal handler for MESSAGE_CREATE that is overwritten to allow for command handling
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#395
  def create_message(data); end

  # source://discordrb//lib/discordrb/commands/command_bot.rb#485
  def execute_chain(chain, event); end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#444
  def required_permissions?(member, required, channel = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#450
  def required_roles?(member, required); end

  # source://discordrb//lib/discordrb/commands/command_bot.rb#438
  def standard_prefix_trigger(message, prefix); end

  # Turns the object into a string, using to_s by default
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#508
  def stringify(object); end

  # Check whether a message should trigger command execution, and if it does, return the raw chain
  #
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/commands/command_bot.rb#428
  def trigger?(message); end
end

# Command chain, may have multiple commands, nested and commands
class Discordrb::Commands::CommandChain
  # @param chain [String] The string the chain should be parsed from.
  # @param bot [CommandBot] The bot that executes this command chain.
  # @param subchain [true, false] Whether this chain is a sub chain of another chain.
  # @return [CommandChain] a new instance of CommandChain
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#143
  def initialize(chain, bot, subchain = T.unsafe(nil)); end

  # Divides the command chain into chain arguments and command chain, then executes them both.
  #
  # @param event [CommandEvent] The event to execute the command with.
  # @return [String] the result of the command chain execution.
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#278
  def execute(event); end

  # Parses the command chain itself, including sub-chains, and executes it. Executes only the command chain, without
  # its chain arguments.
  #
  # @param event [CommandEvent] The event to execute the chain with.
  # @return [String] the result of the execution.
  #
  # source://discordrb//lib/discordrb/commands/parser.rb#154
  def execute_bare(event); end

  private

  # source://discordrb//lib/discordrb/commands/parser.rb#308
  def divide_chain(chain); end
end

# This module holds a collection of commands that can be easily added to by calling the {CommandContainer#command}
# function. Other containers can be included into it as well. This allows for modularization of command bots.
module Discordrb::Commands::CommandContainer
  include ::Discordrb::Commands::RateLimiter

  # Adds a new command to the container.
  #
  # @note `LocalJumpError`s are rescued from internally, giving bots the opportunity to use `return` or `break` in
  #   their blocks without propagating an exception.
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param name [Symbol] The name of the command to add.
  # @param attributes [Hash] The attributes to initialize the command with.
  # @return [Command] The command that was added.
  # @yield The block is executed when the command is executed.
  # @yieldparam event [CommandEvent] The event of the message that contained the command.
  #
  # source://discordrb//lib/discordrb/commands/container.rb#61
  def command(name, attributes = T.unsafe(nil), &block); end

  # @return [Hash<Symbol, Command, CommandAlias>] hash of command names and commands this container has.
  #
  # source://discordrb//lib/discordrb/commands/container.rb#13
  def commands; end

  # Includes another container into this one.
  #
  # @param container [Module] An EventContainer or CommandContainer that will be included if it can.
  #
  # source://discordrb//lib/discordrb/commands/container.rb#98
  def include!(container); end

  # Adds all commands from another container into this one. Existing commands will be overwritten.
  #
  # @param container [Module] A module that `extend`s {CommandContainer} from which the commands will be added.
  #
  # source://discordrb//lib/discordrb/commands/container.rb#88
  def include_commands(container); end

  # Removes a specific command from this container.
  #
  # @param name [Symbol] The command to remove.
  #
  # source://discordrb//lib/discordrb/commands/container.rb#81
  def remove_command(name); end
end

# Extension of MessageEvent for commands that contains the command called and makes the bot readable
class Discordrb::Commands::CommandEvent < ::Discordrb::Events::MessageEvent
  # Returns the value of attribute bot.
  #
  # source://discordrb//lib/discordrb/commands/events.rb#8
  def bot; end

  # Returns the value of attribute command.
  #
  # source://discordrb//lib/discordrb/commands/events.rb#9
  def command; end

  # Sets the attribute command
  #
  # @param value the value to set the attribute command to.
  #
  # source://discordrb//lib/discordrb/commands/events.rb#9
  def command=(_arg0); end
end

# Represents a collection of {Bucket}s.
module Discordrb::Commands::RateLimiter
  # Defines a new bucket for this rate limiter.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param key [Symbol] The name for this new bucket.
  # @param attributes [Hash] The attributes to initialize the bucket with.
  # @return [Bucket] the created bucket.
  # @see Bucket#initialize
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#101
  def bucket(key, attributes); end

  # Cleans all buckets
  #
  # @see Bucket#clean
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#121
  def clean; end

  # Adds all the buckets from another RateLimiter onto this one.
  #
  # @param limiter [Module] Another {RateLimiter} module
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#127
  def include_buckets(limiter); end

  # Performs a rate limit request.
  #
  # @param key [Symbol] Which bucket to perform the request for.
  # @param thing [String, Integer, Symbol] What should be rate-limited.
  # @param increment [Integer] How much to increment the rate-limit counter. Default is 1.
  # @return [Integer, false] How much time to wait or false if the request succeeded.
  # @see Bucket#rate_limited?
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#112
  def rate_limited?(key, thing, increment: T.unsafe(nil)); end
end

# This class provides a convenient way to do rate-limiting on non-command events.
#
# @see RateLimiter
class Discordrb::Commands::SimpleRateLimiter
  include ::Discordrb::Commands::RateLimiter

  # Makes a new rate limiter
  #
  # @return [SimpleRateLimiter] a new instance of SimpleRateLimiter
  #
  # source://discordrb//lib/discordrb/commands/rate_limiter.rb#140
  def initialize; end
end

# The Unix timestamp Discord IDs are based on
#
# source://discordrb//lib/discordrb.rb#16
Discordrb::DISCORD_EPOCH = T.let(T.unsafe(nil), Integer)

# An Embed object that is contained in a message
# A freshly generated embed object will not appear in a message object
# unless grabbed from its ID in a channel.
class Discordrb::Embed
  # @return [Embed] a new instance of Embed
  #
  # source://discordrb//lib/discordrb/data/embed.rb#56
  def initialize(data, message); end

  # @return [EmbedAuthor, nil] the author of the embed object. `nil` if there is not an author
  #
  # source://discordrb//lib/discordrb/data/embed.rb#50
  def author; end

  # @return [String, nil] the color of the embed object. `nil` if there is not a color
  #
  # source://discordrb//lib/discordrb/data/embed.rb#31
  def color; end

  # @return [String, nil] the color of the embed object. `nil` if there is not a color
  #
  # source://discordrb//lib/discordrb/data/embed.rb#31
  def colour; end

  # @return [String, nil] the description of the embed object. `nil` if there is not a description
  #
  # source://discordrb//lib/discordrb/data/embed.rb#18
  def description; end

  # @return [Array<EmbedField>, nil] the fields of the embed object. `nil` if there are no fields
  #
  # source://discordrb//lib/discordrb/data/embed.rb#53
  def fields; end

  # @return [EmbedFooter, nil] the footer of the embed object. `nil` if there is not a footer
  #
  # source://discordrb//lib/discordrb/data/embed.rb#35
  def footer; end

  # @return [EmbedImage, nil] the image of the embed object. `nil` if there is not an image
  #
  # source://discordrb//lib/discordrb/data/embed.rb#41
  def image; end

  # @return [Message] the message this embed object is contained in.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#9
  def message; end

  # @return [EmbedProvider, nil] the provider of the embed object. `nil` if there is not a provider
  #
  # source://discordrb//lib/discordrb/data/embed.rb#38
  def provider; end

  # @return [EmbedThumbnail, nil] the thumbnail of the embed object. `nil` if there is not a thumbnail
  #
  # source://discordrb//lib/discordrb/data/embed.rb#44
  def thumbnail; end

  # @return [Time, nil] the timestamp of the embed object. `nil` if there is not a timestamp
  #
  # source://discordrb//lib/discordrb/data/embed.rb#28
  def timestamp; end

  # @return [String, nil] the title of the embed object. `nil` if there is not a title
  #
  # source://discordrb//lib/discordrb/data/embed.rb#15
  def title; end

  # @return [Symbol] the type of the embed object. Possible types are:
  #
  #   * `:link`
  #   * `:video`
  #   * `:image`
  #
  # source://discordrb//lib/discordrb/data/embed.rb#25
  def type; end

  # @return [String] the URL this embed object is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#12
  def url; end

  # @return [EmbedVideo, nil] the video of the embed object. `nil` if there is not a video
  #
  # source://discordrb//lib/discordrb/data/embed.rb#47
  def video; end
end

# An Embed author for the embed object
class Discordrb::EmbedAuthor
  # @return [EmbedAuthor] a new instance of EmbedAuthor
  #
  # source://discordrb//lib/discordrb/data/embed.rb#218
  def initialize(data, embed); end

  # @return [Embed] the embed object this is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#203
  def embed; end

  # @return [String, nil] the icon of the author, or `nil` if there is no icon.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#212
  def icon_url; end

  # @return [String] the author's name.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#206
  def name; end

  # @return [String, nil] the Discord proxy URL, or `nil` if there is no `icon_url`.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#215
  def proxy_icon_url; end

  # @return [String, nil] the URL of the author's website, or `nil` if there is no URL.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#209
  def url; end
end

# An Embed field for the embed object
class Discordrb::EmbedField
  # @return [EmbedField] a new instance of EmbedField
  #
  # source://discordrb//lib/discordrb/data/embed.rb#243
  def initialize(data, embed); end

  # @return [Embed] the embed object this is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#231
  def embed; end

  # @return [true, false] whether this field is inline.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#240
  def inline; end

  # @return [String] the field's name.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#234
  def name; end

  # @return [String] the field's value.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#237
  def value; end
end

# An Embed footer for the embed object.
class Discordrb::EmbedFooter
  # @return [EmbedFooter] a new instance of EmbedFooter
  #
  # source://discordrb//lib/discordrb/data/embed.rb#90
  def initialize(data, embed); end

  # @return [Embed] the embed object this is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#78
  def embed; end

  # @return [String] the URL of the footer icon.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#84
  def icon_url; end

  # @return [String] the proxied URL of the footer icon.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#87
  def proxy_icon_url; end

  # @return [String] the footer text.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#81
  def text; end
end

# An Embed image for the embed object.
class Discordrb::EmbedImage
  # @return [EmbedImage] a new instance of EmbedImage
  #
  # source://discordrb//lib/discordrb/data/embed.rb#117
  def initialize(data, embed); end

  # @return [Embed] the embed object this is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#102
  def embed; end

  # @return [Integer] the height of the image, in pixels.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#114
  def height; end

  # @return [String] the proxy URL of the image.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#108
  def proxy_url; end

  # @return [String] the source URL of the image.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#105
  def url; end

  # @return [Integer] the width of the image, in pixels.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#111
  def width; end
end

# An Embed provider for the embed object
class Discordrb::EmbedProvider
  # @return [EmbedProvider] a new instance of EmbedProvider
  #
  # source://discordrb//lib/discordrb/data/embed.rb#192
  def initialize(data, embed); end

  # @return [Embed] the embed object this is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#183
  def embed; end

  # @return [String] the provider's name.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#186
  def name; end

  # @return [String, nil] the URL of the provider, or `nil` if there is no URL.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#189
  def url; end
end

# An Embed thumbnail for the embed object
class Discordrb::EmbedThumbnail
  # @return [EmbedThumbnail] a new instance of EmbedThumbnail
  #
  # source://discordrb//lib/discordrb/data/embed.rb#170
  def initialize(data, embed); end

  # @return [Embed] the embed object this is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#154
  def embed; end

  # @return [Integer] the height of this thumbnail file, in pixels.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#167
  def height; end

  # @return [String] the thumbnail's proxy URL - I'm not sure what exactly this does, but I think it has something to
  #   do with CDNs.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#161
  def proxy_url; end

  # @return [String] the CDN URL this thumbnail can be downloaded at.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#157
  def url; end

  # @return [Integer] the width of this thumbnail file, in pixels.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#164
  def width; end
end

# An Embed video for the embed object
class Discordrb::EmbedVideo
  # @return [EmbedVideo] a new instance of EmbedVideo
  #
  # source://discordrb//lib/discordrb/data/embed.rb#142
  def initialize(data, embed); end

  # @return [Embed] the embed object this is based on.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#130
  def embed; end

  # @return [Integer] the height of the video, in pixels.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#139
  def height; end

  # @return [String] the source URL of the video.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#133
  def url; end

  # @return [Integer] the width of the video, in pixels.
  #
  # source://discordrb//lib/discordrb/data/embed.rb#136
  def width; end
end

# Server emoji
class Discordrb::Emoji
  include ::Discordrb::IDObject

  # @return [Emoji] a new instance of Emoji
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#22
  def initialize(data, bot, server = T.unsafe(nil)); end

  # ID or name based comparison
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#35
  def ==(other); end

  # @return [true, false] if the emoji is animated
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#18
  def animated; end

  # @return [true, false] if the emoji is animated
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#18
  def animated?; end

  # ID or name based comparison
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#35
  def eql?(other); end

  # @return [String] the icon URL of the emoji
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#62
  def icon_url; end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#67
  def inspect; end

  # @return [String] the layout to mention it (or have it used) in a message
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#45
  def mention; end

  # @return [String] the emoji name
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#9
  def name; end

  # source://discordrb//lib/discordrb/data/emoji.rb#72
  def process_roles(roles); end

  # @return [Array<Role>, nil] roles this emoji is active for, or nil if the emoji's server is unknown
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#15
  def roles; end

  # @return [Server, nil] the server of this emoji
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#12
  def server; end

  # @return [String] the layout to use this emoji in a reaction
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#55
  def to_reaction; end

  # @return [String] the layout to mention it (or have it used) in a message
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#45
  def to_s; end

  # @return [String] the layout to mention it (or have it used) in a message
  #
  # source://discordrb//lib/discordrb/data/emoji.rb#45
  def use; end
end

# Custom errors raised in various places
module Discordrb::Errors
  class << self
    # Create a new code error class
    #
    # source://discordrb//lib/discordrb/errors.rb#47
    def Code(code); end

    # @param code [Integer] The code to check
    # @return [Class] the error class for the given code
    #
    # source://discordrb//lib/discordrb/errors.rb#60
    def error_class_for(code); end
  end
end

# OAuth2 application limit reached
class Discordrb::Errors::ApplicationLimitReached < ::Discordrb::Errors::CodeError; end

# A message can only be pinned to the channel it was sent in
class Discordrb::Errors::CannotPinInDifferentChannel < ::Discordrb::Errors::CodeError; end

# Maximum number of guild channels reached (500)
class Discordrb::Errors::ChannelLimitReached < ::Discordrb::Errors::CodeError; end

# Raised when the bot gets a HTTP 502 error, which is usually caused by Cloudflare.
class Discordrb::Errors::CloudflareError < ::RuntimeError; end

# Generic class for errors denoted by API error codes
class Discordrb::Errors::CodeError < ::RuntimeError
  # Create a new error with a particular message (the code should be defined by the class instance variable)
  #
  # @param message [String] the message to use
  # @return [CodeError] a new instance of CodeError
  #
  # source://discordrb//lib/discordrb/errors.rb#32
  def initialize(message); end

  # @return [Integer] The error code represented by this error.
  #
  # source://discordrb//lib/discordrb/errors.rb#37
  def code; end

  # @return [String] This error's represented message
  #
  # source://discordrb//lib/discordrb/errors.rb#42
  def message; end

  class << self
    # @return [Integer] The error code represented by this error class.
    #
    # source://discordrb//lib/discordrb/errors.rb#27
    def code; end
  end
end

# Embed Disabled
class Discordrb::Errors::EmbedDisabled < ::Discordrb::Errors::CodeError; end

# Bots cannot use this endpoint
class Discordrb::Errors::EndpointNotForBots < ::Discordrb::Errors::CodeError; end

# Only bots can use this endpoint
class Discordrb::Errors::EndpointOnlyForBots < ::Discordrb::Errors::CodeError; end

# Maximum number of friends reached (1000)
class Discordrb::Errors::FriendLimitReached < ::Discordrb::Errors::CodeError; end

# Invalid Account Type
class Discordrb::Errors::InvalidAccountType < ::Discordrb::Errors::CodeError; end

# Cannot execute action on a DM channel
class Discordrb::Errors::InvalidActionForDM < ::Discordrb::Errors::CodeError; end

# Cannot execute action on a system message
class Discordrb::Errors::InvalidActionForSystemMessage < ::Discordrb::Errors::CodeError; end

# Invalid authentication token
class Discordrb::Errors::InvalidAuthToken < ::Discordrb::Errors::CodeError; end

# Raised when authentication data is invalid or incorrect.
class Discordrb::Errors::InvalidAuthenticationError < ::RuntimeError
  # Default message for this exception
  #
  # source://discordrb//lib/discordrb/errors.rb#9
  def message; end
end

# Provided too few or too many messages to delete. Must provide at least 2 and fewer than 100 messages to delete.
class Discordrb::Errors::InvalidBulkDeleteCount < ::Discordrb::Errors::CodeError; end

# Invalid Form Body
class Discordrb::Errors::InvalidFormBody < ::Discordrb::Errors::CodeError; end

# Invalid OAuth State
class Discordrb::Errors::InvalidOAuthState < ::Discordrb::Errors::CodeError; end

# Cannot edit a message authored by another user
class Discordrb::Errors::MessageAuthoredByOtherUser < ::Discordrb::Errors::CodeError; end

# Cannot send an empty message
class Discordrb::Errors::MessageEmpty < ::Discordrb::Errors::CodeError; end

# Raised when a message is over the character limit
class Discordrb::Errors::MessageTooLong < ::RuntimeError; end

# A message provided was too old to bulk delete
class Discordrb::Errors::MessageTooOld < ::Discordrb::Errors::CodeError; end

# Missing Access
class Discordrb::Errors::MissingAccess < ::Discordrb::Errors::CodeError; end

# An invite was accepted to a guild the application's bot is not in
class Discordrb::Errors::MissingBotMember < ::Discordrb::Errors::CodeError; end

# Missing Permissions
class Discordrb::Errors::MissingPermissions < ::Discordrb::Errors::CodeError; end

# OAuth2 application does not have a bot
class Discordrb::Errors::NoBotForApplication < ::Discordrb::Errors::CodeError; end

# Cannot send messages in a voice channel
class Discordrb::Errors::NoMessagesInVoiceChannel < ::Discordrb::Errors::CodeError; end

# Cannot send messages to this user
class Discordrb::Errors::NoMessagesToUser < ::Discordrb::Errors::CodeError; end

# Raised when the bot can't do something because its permissions on the server are insufficient
class Discordrb::Errors::NoPermission < ::RuntimeError; end

# Note is too long
class Discordrb::Errors::NoteTooLong < ::Discordrb::Errors::CodeError; end

# Maximum number of pins reached (50)
class Discordrb::Errors::PinLimitReached < ::Discordrb::Errors::CodeError; end

# Reaction Blocked
class Discordrb::Errors::ReactionBlocked < ::Discordrb::Errors::CodeError; end

# Too many reactions
class Discordrb::Errors::ReactionLimitReached < ::Discordrb::Errors::CodeError; end

# Maximum number of guild roles reached (250)
class Discordrb::Errors::RoleLimitReached < ::Discordrb::Errors::CodeError; end

# Maximum number of servers reached (100)
class Discordrb::Errors::ServerLimitReached < ::Discordrb::Errors::CodeError; end

class Discordrb::Errors::Unauthorised < ::Discordrb::Errors::CodeError; end

# Unauthorized
#
# source://discordrb//lib/discordrb/errors.rb#134
Discordrb::Errors::Unauthorized = Discordrb::Errors::Unauthorised

# Unknown Account
class Discordrb::Errors::UnknownAccount < ::Discordrb::Errors::CodeError; end

# Unknown Application
class Discordrb::Errors::UnknownApplication < ::Discordrb::Errors::CodeError; end

# Unknown Channel
class Discordrb::Errors::UnknownChannel < ::Discordrb::Errors::CodeError; end

# Unknown Emoji
class Discordrb::Errors::UnknownEmoji < ::Discordrb::Errors::CodeError; end

# Used when Discord doesn't provide a more specific code
class Discordrb::Errors::UnknownError < ::Discordrb::Errors::CodeError; end

# Unknown Integration
class Discordrb::Errors::UnknownIntegration < ::Discordrb::Errors::CodeError; end

# Unknown Invite
class Discordrb::Errors::UnknownInvite < ::Discordrb::Errors::CodeError; end

# Unknown Member
class Discordrb::Errors::UnknownMember < ::Discordrb::Errors::CodeError; end

# Unknown Message
class Discordrb::Errors::UnknownMessage < ::Discordrb::Errors::CodeError; end

# Unknown Overwrite
class Discordrb::Errors::UnknownOverwrite < ::Discordrb::Errors::CodeError; end

# Unknown Provider
class Discordrb::Errors::UnknownProvider < ::Discordrb::Errors::CodeError; end

# Unknown Role
class Discordrb::Errors::UnknownRole < ::Discordrb::Errors::CodeError; end

# Unknown Server
class Discordrb::Errors::UnknownServer < ::Discordrb::Errors::CodeError; end

# Unknown Token
class Discordrb::Errors::UnknownToken < ::Discordrb::Errors::CodeError; end

# Unknown User
class Discordrb::Errors::UnknownUser < ::Discordrb::Errors::CodeError; end

# Channel verification level is too high
class Discordrb::Errors::VerificationLevelTooHigh < ::Discordrb::Errors::CodeError; end

# This module provides the functionality required for events and awaits. It is separated
# from the {Bot} class so users can make their own container modules and include them.
module Discordrb::EventContainer
  include ::Discordrb::Events

  # Adds an event handler to this container. Usually, it's more expressive to just use one of the shorthand adder
  # methods like {#message}, but if you want to create one manually you can use this.
  #
  # @param handler [Discordrb::Events::EventHandler] The handler to add.
  #
  # source://discordrb//lib/discordrb/container.rb#563
  def <<(handler); end

  # Adds an event handler to this container. Usually, it's more expressive to just use one of the shorthand adder
  # methods like {#message}, but if you want to create one manually you can use this.
  #
  # @param handler [Discordrb::Events::EventHandler] The handler to add.
  #
  # source://discordrb//lib/discordrb/container.rb#563
  def add_handler(handler); end

  # This **event** is raised when an {Await} is triggered. It provides an easy way to execute code
  # on an await without having to rely on the await's block.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [AwaitEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [AwaitEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#475
  def await(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a channel is created.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ChannelCreateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ChannelCreateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#216
  def channel_create(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a channel is deleted.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ChannelDeleteEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ChannelDeleteEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#238
  def channel_delete(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a recipient is added to a group channel.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ChannelRecipientAddHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ChannelRecipientAddEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#250
  def channel_recipient_add(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a recipient is removed from a group channel.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ChannelRecipientRemoveHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ChannelRecipientRemoveEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#262
  def channel_recipient_remove(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a channel is updated.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ChannelUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ChannelUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#227
  def channel_update(attributes = T.unsafe(nil), &block); end

  # Removes all events from this event handler.
  #
  # source://discordrb//lib/discordrb/container.rb#556
  def clear!; end

  # This **event** is raised when a private message is sent to the bot.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [PrivateMessageEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [PrivateMessageEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#493
  def direct_message(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when the bot has disconnected from the WebSocket, due to the {Bot#stop} method or
  # external causes. It's the recommended way to do clean-up tasks.
  #
  # @param attributes [Hash] Event attributes, none in this particular case
  # @return [DisconnectEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [DisconnectEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#57
  def disconnected(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a private message is sent to the bot.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [PrivateMessageEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [PrivateMessageEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#493
  def dm(attributes = T.unsafe(nil), &block); end

  # This **event** is raised every time the bot sends a heartbeat over the galaxy. This happens roughly every 40
  # seconds, but may happen at a lower rate should Discord change their interval. It may also happen more quickly for
  # periods of time, especially for unstable connections, since discordrb rather sends a heartbeat than not if there's
  # a choice. (You shouldn't rely on all this to be accurately timed.)
  #
  # All this makes this event useful to periodically trigger something, like doing some API request every hour,
  # setting some kind of uptime variable or whatever else. The only limit is yourself.
  #
  # @param attributes [Hash] Event attributes, none in this particular case
  # @return [HeartbeatEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [HeartbeatEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#72
  def heartbeat(attributes = T.unsafe(nil), &block); end

  # Adds all event handlers from another container into this one. Existing event handlers will be overwritten.
  #
  # @param container [Module] A module that `extend`s {EventContainer} from which the handlers will be added.
  #
  # source://discordrb//lib/discordrb/container.rb#572
  def include!(container); end

  # Adds all event handlers from another container into this one. Existing event handlers will be overwritten.
  #
  # @param container [Module] A module that `extend`s {EventContainer} from which the handlers will be added.
  #
  # source://discordrb//lib/discordrb/container.rb#572
  def include_events(container); end

  # This **event** is raised when an invite is created.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [InviteCreateEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [InviteCreateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#510
  def invite_create(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when an invite is deleted.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [InviteDeleteEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised
  # @yieldparam event [InviteDeleteEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#521
  def invite_delete(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a new user joins a server.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerMemberAddEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerMemberAddEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#299
  def member_join(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a member leaves a server.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerMemberDeleteEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerMemberDeleteEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#320
  def member_leave(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a member update happens. This includes when a members nickname
  # or roles are updated.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerMemberUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerMemberUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#310
  def member_update(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when the bot is mentioned in a message.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [MentionEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [MentionEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#205
  def mention(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a message is sent to a text channel the bot is currently in.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [MessageEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [MessageEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#37
  def message(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a message is deleted in a channel.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [MessageDeleteEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [MessageDeleteEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#109
  def message_delete(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a message is edited in a channel.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [MessageEditEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [MessageEditEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#98
  def message_edit(attributes = T.unsafe(nil), &block); end

  # This **event** is raised whenever a message is updated. Message updates can be triggered from
  # a user editing their own message, or from Discord automatically attaching embeds to the
  # user's message for URLs contained in the message's content. If you only want to listen
  # for users editing their own messages, use the {message_edit} handler instead.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [MessageUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [MessageUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#123
  def message_update(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when the game a user is playing changes.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [PlayingEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [PlayingEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#187
  def playing(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a private message is sent to the bot.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [PrivateMessageEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [PrivateMessageEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#493
  def pm(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a user's status (online/offline/idle) changes.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [PresenceEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [PresenceEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#175
  def presence(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a private message is sent to the bot.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [PrivateMessageEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [PrivateMessageEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#493
  def private_message(attributes = T.unsafe(nil), &block); end

  # This **event** is raised for every dispatch received over the gateway, whether supported by discordrb or not.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [RawEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [RawEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#531
  def raw(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when somebody reacts to a message.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ReactionAddEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ReactionAddEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#136
  def reaction_add(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when somebody removes a reaction from a message.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ReactionRemoveEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ReactionRemoveEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#150
  def reaction_remove(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when somebody removes all reactions from a message.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ReactionRemoveAllEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ReactionRemoveAllEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#162
  def reaction_remove_all(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when the READY packet is received, i.e. servers and channels have finished
  # initialization. It's the recommended way to do things when the bot has finished starting up.
  #
  # @param attributes [Hash] Event attributes, none in this particular case
  # @return [ReadyEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ReadyEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#47
  def ready(attributes = T.unsafe(nil), &block); end

  # Removes an event handler from this container. If you're looking for a way to do temporary events, I recommend
  # {Await}s instead of this.
  #
  # @param handler [Discordrb::Events::EventHandler] The handler to remove.
  #
  # source://discordrb//lib/discordrb/container.rb#549
  def remove_handler(handler); end

  # This **event** is raised when a server is created respective to the bot, i.e. the bot joins a server or creates
  # a new one itself.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerCreateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerCreateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#353
  def server_create(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a server is deleted, or when the bot leaves a server. (These two cases are identical
  # to Discord.)
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerDeleteEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerDeleteEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#374
  def server_delete(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when an emoji or collection of emojis is created/deleted/updated.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerEmojiChangeEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerEmojiChangeEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#384
  def server_emoji(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when an emoji is created.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerEmojiCreateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerEmojiCreateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#396
  def server_emoji_create(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when an emoji is deleted.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerEmojiDeleteEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerEmojiDeleteEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#408
  def server_emoji_delete(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when an emoji is updated.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerEmojiUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerEmojiUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#421
  def server_emoji_update(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a role is created.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerRoleCreateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerRoleCreateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#431
  def server_role_create(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a role is deleted.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerRoleDeleteEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerRoleDeleteEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#441
  def server_role_delete(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a role is updated.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerRoleUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerRoleUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#451
  def server_role_update(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a server is updated, for example if the name or region has changed.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [ServerUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [ServerUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#363
  def server_update(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when somebody starts typing in a channel the bot is also in. The official Discord
  # client would display the typing indicator for five seconds after receiving this event. If the user continues
  # typing after five seconds, the event will be re-raised.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [TypingEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [TypingEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#87
  def typing(attributes = T.unsafe(nil), &block); end

  # This **event** is raised for a dispatch received over the gateway that is not currently handled otherwise by
  # discordrb.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [UnknownEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [UnknownEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#542
  def unknown(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a user is banned from a server.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [UserBanEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [UserBanEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#331
  def user_ban(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a user is unbanned from a server.
  #
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [UserUnbanEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [UserUnbanEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#342
  def user_unban(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when first connecting to a server's voice channel.
  #
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [VoiceServerUpdateEventHandler] The event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [VoiceServerUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#289
  def voice_server_update(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a user's voice state changes. This includes when a user joins, leaves, or
  # moves between voice channels, as well as their mute and deaf status for themselves and on the server.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param attributes [Hash] The event's attributes.
  # @return [VoiceStateUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [VoiceStateUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#279
  def voice_state_update(attributes = T.unsafe(nil), &block); end

  # This **event** is raised when a webhook is updated.
  #
  # @option attributes
  # @option attributes
  # @option attribute
  # @param attribute [Hash] a customizable set of options
  # @param attributes [Hash] The event's attributes.
  # @return [WebhookUpdateEventHandler] the event handler that was registered.
  # @yield The block is executed when the event is raised.
  # @yieldparam event [WebhookUpdateEvent] The event that was raised.
  #
  # source://discordrb//lib/discordrb/container.rb#463
  def webhook_update(attributes = T.unsafe(nil), &block); end

  private

  # source://discordrb//lib/discordrb/container.rb#615
  def register_event(clazz, attributes, block); end

  class << self
    # Utility method to return a class object from a string of its name. Mostly useful for internal stuff
    #
    # @param str [String] The name of the class
    # @return [Class] the class
    #
    # source://discordrb//lib/discordrb/container.rb#605
    def class_from_string(str); end

    # Returns the event class for a handler class type
    #
    # @param handler_class [Class] The handler type
    # @return [Class, nil] the event type, or nil if the handler_class isn't a handler class (i.e. ends with Handler)
    # @see #handler_class
    #
    # source://discordrb//lib/discordrb/container.rb#595
    def event_class(handler_class); end

    # Returns the handler class for an event class type
    #
    # @param event_class [Class] The event type
    # @return [Class] the handler type
    # @see #event_class
    #
    # source://discordrb//lib/discordrb/container.rb#587
    def handler_class(event_class); end
  end
end

# Event classes and handlers
module Discordrb::Events
  class << self
    # Attempts to match possible formats of event attributes to a set comparison value, using a comparison block.
    # It allows five kinds of attribute formats:
    #  0. nil -> always returns true
    #  1. A single attribute, not negated
    #  2. A single attribute, negated
    #  3. An array of attributes, not negated
    #  4. An array of attributes, not negated
    # Note that it doesn't allow an array of negated attributes. For info on negation stuff, see {::#not!}
    #
    # @param attributes [Object, Array<Object>, Negated<Object>, Negated<Array<Object>>, nil] One or more attributes to
    #   compare to the to_check value.
    # @param to_check [Object] What to compare the attributes to.
    # @return [true, false] whether the attributes match the comparison value in at least one way.
    # @yield [a, e] The block will be called when a comparison happens.
    # @yieldparam a [Object] The attribute to compare to the value to check. Will always be a single not-negated object,
    #   all the negation and array handling is done by the method
    # @yieldparam e [Object] The value to compare the attribute to. Will always be the value passed to the function as
    #   to_check.
    # @yieldreturn [true, false] Whether or not the attribute a matches the given comparison value e.
    #
    # source://discordrb//lib/discordrb/events/generic.rb#33
    def matches_all(attributes, to_check, &block); end
  end
end

# @see Bot#await
class Discordrb::Events::AwaitEvent < ::Discordrb::Events::Event
  # For internal use only
  #
  # @return [AwaitEvent] a new instance of AwaitEvent
  #
  # source://discordrb//lib/discordrb/events/await.rb#29
  def initialize(await, event, bot); end

  # @return [Hash] a hash of attributes defined on the await.
  # @see Await#attributes
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def attributes; end

  # The await that was triggered.
  #
  # @return [Await] The await
  #
  # source://discordrb//lib/discordrb/events/await.rb#11
  def await; end

  # The event that triggered the await.
  #
  # @return [Event] The event
  #
  # source://discordrb//lib/discordrb/events/await.rb#15
  def event; end

  # @return [Symbol] the await's key.
  # @see Await#key
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def key; end

  # @return [Class] the await's event class.
  # @see Await#type
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def type; end
end

# Event handler for {AwaitEvent}
class Discordrb::Events::AwaitEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/await.rb#38
  def matches?(event); end
end

# Raised when a channel is created
class Discordrb::Events::ChannelCreateEvent < ::Discordrb::Events::Event
  # @return [ChannelCreateEvent] a new instance of ChannelCreateEvent
  #
  # source://discordrb//lib/discordrb/events/channels.rb#32
  def initialize(data, bot); end

  # @return [Channel] the channel in question.
  #
  # source://discordrb//lib/discordrb/events/channels.rb#10
  def channel; end

  # @return [String] the channel's name
  # @see Channel#name
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def name; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def owner_id; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def permission_overwrites; end

  # @return [Integer] the position of the channel in the channels list.
  # @see Channel#position
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def position; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def recipients; end

  # @return [Server] the server the channel belongs to.
  # @see Channel#server
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def server; end

  # @return [String] the channel's topic.
  # @see Channel#topic
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def topic; end

  # @return [Integer] the channel's type (0: text, 1: private, 2: voice, 3: group).
  # @see Channel#type
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def type; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def user_limit; end
end

# Event handler for ChannelCreateEvent
class Discordrb::Events::ChannelCreateEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/channels.rb#40
  def matches?(event); end
end

# Raised when a channel is deleted
class Discordrb::Events::ChannelDeleteEvent < ::Discordrb::Events::Event
  # @return [ChannelDeleteEvent] a new instance of ChannelDeleteEvent
  #
  # source://discordrb//lib/discordrb/events/channels.rb#86
  def initialize(data, bot); end

  # @return [Integer] the channel's ID
  #
  # source://discordrb//lib/discordrb/events/channels.rb#78
  def id; end

  # @return [String] the channel's name
  #
  # source://discordrb//lib/discordrb/events/channels.rb#75
  def name; end

  # @return [Integer, nil] the channel's owner ID if this is a group channel
  #
  # source://discordrb//lib/discordrb/events/channels.rb#84
  def owner_id; end

  # @return [Integer] the position of the channel on the list
  #
  # source://discordrb//lib/discordrb/events/channels.rb#72
  def position; end

  # @return [Server] the channel's server
  #
  # source://discordrb//lib/discordrb/events/channels.rb#81
  def server; end

  # @return [String] the channel's topic
  #
  # source://discordrb//lib/discordrb/events/channels.rb#69
  def topic; end

  # @return [Integer] the channel's type (0: text, 1: private, 2: voice, 3: group).
  #
  # source://discordrb//lib/discordrb/events/channels.rb#66
  def type; end
end

# Event handler for ChannelDeleteEvent
class Discordrb::Events::ChannelDeleteEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/channels.rb#102
  def matches?(event); end
end

# Raised when a user is added to a private channel
class Discordrb::Events::ChannelRecipientAddEvent < ::Discordrb::Events::ChannelRecipientEvent; end

# Event handler for ChannelRecipientAddEvent
class Discordrb::Events::ChannelRecipientAddEventHandler < ::Discordrb::Events::ChannelRecipientEventHandler; end

# Generic subclass for recipient events (add/remove)
class Discordrb::Events::ChannelRecipientEvent < ::Discordrb::Events::Event
  # @return [ChannelRecipientEvent] a new instance of ChannelRecipientEvent
  #
  # source://discordrb//lib/discordrb/events/channels.rb#137
  def initialize(data, bot); end

  # @return [Channel] the channel in question.
  #
  # source://discordrb//lib/discordrb/events/channels.rb#128
  def channel; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def id; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def name; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def owner_id; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def permission_overwrites; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def position; end

  # @return [Recipient] the recipient that was added/removed from the group
  #
  # source://discordrb//lib/discordrb/events/channels.rb#133
  def recipient; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def recipients; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def server; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def topic; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def type; end

  # source://discordrb//lib/discordrb/events/generic.rb#67
  def user_limit; end
end

# Generic event handler for channel recipient events
class Discordrb::Events::ChannelRecipientEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/channels.rb#149
  def matches?(event); end
end

# Raised when a recipient that isn't the bot leaves or is kicked from a group channel
class Discordrb::Events::ChannelRecipientRemoveEvent < ::Discordrb::Events::ChannelRecipientEvent; end

# Event handler for ChannelRecipientRemoveEvent
class Discordrb::Events::ChannelRecipientRemoveEventHandler < ::Discordrb::Events::ChannelRecipientEventHandler; end

# Raised when a channel is updated (e.g. topic changes)
class Discordrb::Events::ChannelUpdateEvent < ::Discordrb::Events::ChannelCreateEvent; end

# Event handler for ChannelUpdateEvent
class Discordrb::Events::ChannelUpdateEventHandler < ::Discordrb::Events::ChannelCreateEventHandler; end

# @see Discordrb::EventContainer#disconnected
class Discordrb::Events::DisconnectEvent < ::Discordrb::Events::LifetimeEvent; end

# Event handler for {DisconnectEvent}
class Discordrb::Events::DisconnectEventHandler < ::Discordrb::Events::TrueEventHandler; end

# Generic event class that can be extended
class Discordrb::Events::Event
  # @return [Bot] the bot used to initialize this event.
  #
  # source://discordrb//lib/discordrb/events/generic.rb#55
  def bot; end

  class << self
    protected

    # Delegates a list of methods to a particular object. This is essentially a reimplementation of ActiveSupport's
    # `#delegate`, but without the overhead provided by the rest. Used in subclasses of `Event` to delegate properties
    # on events to properties on data objects.
    #
    # @param methods [Array<Symbol>] The methods to delegate.
    # @param hash [Hash<Symbol => Symbol>] A hash with one `:to` key and the value the method to be delegated to.
    #
    # source://discordrb//lib/discordrb/events/generic.rb#65
    def delegate(*methods, hash); end
  end
end

# Generic event handler that can be extended
class Discordrb::Events::EventHandler
  # @return [EventHandler] a new instance of EventHandler
  #
  # source://discordrb//lib/discordrb/events/generic.rb#78
  def initialize(attributes, block); end

  # to be overwritten by extending event handlers
  #
  # source://discordrb//lib/discordrb/events/generic.rb#102
  def after_call(event); end

  # Calls this handler
  #
  # @param event [Object] The event object to call this handler with
  #
  # source://discordrb//lib/discordrb/events/generic.rb#97
  def call(event); end

  # Checks whether this handler matches the given event, and then calls it.
  #
  # @param event [Object] The event object to match and call the handler with
  #
  # source://discordrb//lib/discordrb/events/generic.rb#91
  def match(event); end

  # Whether or not this event handler matches the given event with its attributes.
  #
  # @raise [RuntimeError] if this method is called - overwrite it in your event handler!
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/generic.rb#85
  def matches?(_); end

  # @see Discordrb::Events::matches_all
  #
  # source://discordrb//lib/discordrb/events/generic.rb#105
  def matches_all(attributes, to_check, &block); end
end

# @see Discordrb::EventContainer#heartbeat
class Discordrb::Events::HeartbeatEvent < ::Discordrb::Events::LifetimeEvent; end

# Event handler for {HeartbeatEvent}
class Discordrb::Events::HeartbeatEventHandler < ::Discordrb::Events::TrueEventHandler; end

# Raised when an invite is created.
class Discordrb::Events::InviteCreateEvent < ::Discordrb::Events::Event
  # @return [InviteCreateEvent] a new instance of InviteCreateEvent
  #
  # source://discordrb//lib/discordrb/events/invites.rb#37
  def initialize(data, invite, bot); end

  # @return [Channel] The channel the invite was created for.
  #
  # source://discordrb//lib/discordrb/events/invites.rb#13
  def channel; end

  # @return [String] The code for the created invite.
  # @see Invite#code
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def code; end

  # @return [Time] The time the invite was created at.
  # @see Invite#created_at
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def created_at; end

  # @return [Invite] The invite that was created.
  #
  # source://discordrb//lib/discordrb/events/invites.rb#7
  def invite; end

  # @return [User] The user that created the invite.
  # @see Invite#inviter
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def inviter; end

  # @return [Integer] The maximum age of the created invite.
  # @see Invite#max_age
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def max_age; end

  # @return [Integer] The maximum number of uses before the invite expires.
  # @see Invite#max_uses
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def max_uses; end

  # @return [Server, nil] The server the invite was created for.
  #
  # source://discordrb//lib/discordrb/events/invites.rb#10
  def server; end

  # @return [true, false] Whether or not this invite grants temporary membership.
  # @see Invite#temporary
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def temporary; end

  # @return [true, false] Whether or not this invite grants temporary membership.
  # @see Invite#temporary
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def temporary?; end
end

# Event handler for InviteCreateEvent.
class Discordrb::Events::InviteCreateEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/invites.rb#66
  def matches?(event); end
end

# Raised when an invite is deleted.
class Discordrb::Events::InviteDeleteEvent < ::Discordrb::Events::Event
  # @return [InviteDeleteEvent] a new instance of InviteDeleteEvent
  #
  # source://discordrb//lib/discordrb/events/invites.rb#56
  def initialize(data, bot); end

  # @return [Channel] The channel the deleted invite was for.
  #
  # source://discordrb//lib/discordrb/events/invites.rb#48
  def channel; end

  # @return [String] The code of the deleted invite.
  #
  # source://discordrb//lib/discordrb/events/invites.rb#54
  def code; end

  # @return [Server, nil] The server the deleted invite was for.
  #
  # source://discordrb//lib/discordrb/events/invites.rb#51
  def server; end
end

# Event handler for InviteDeleteEvent
class Discordrb::Events::InviteDeleteEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/invites.rb#98
  def matches?(event); end
end

# Common superclass for all lifetime events
class Discordrb::Events::LifetimeEvent < ::Discordrb::Events::Event
  # @return [LifetimeEvent] a new instance of LifetimeEvent
  #
  # source://discordrb//lib/discordrb/events/lifetime.rb#9
  def initialize(bot); end
end

# @see Discordrb::EventContainer#mention
class Discordrb::Events::MentionEvent < ::Discordrb::Events::MessageEvent; end

# Event handler for {MentionEvent}
class Discordrb::Events::MentionEventHandler < ::Discordrb::Events::MessageEventHandler; end

# Raised when a message is deleted
#
# @see Discordrb::EventContainer#message_delete
class Discordrb::Events::MessageDeleteEvent < ::Discordrb::Events::MessageIDEvent; end

# Event handler for {MessageDeleteEvent}
class Discordrb::Events::MessageDeleteEventHandler < ::Discordrb::Events::MessageIDEventHandler; end

# Raised when a message is edited
#
# @see Discordrb::EventContainer#message_edit
class Discordrb::Events::MessageEditEvent < ::Discordrb::Events::MessageEvent; end

# Event handler for {MessageEditEvent}
class Discordrb::Events::MessageEditEventHandler < ::Discordrb::Events::MessageEventHandler; end

# Event raised when a text message is sent to a channel
class Discordrb::Events::MessageEvent < ::Discordrb::Events::Event
  include ::Discordrb::Events::Respondable

  # @return [MessageEvent] a new instance of MessageEvent
  #
  # source://discordrb//lib/discordrb/events/message.rb#124
  def initialize(message, bot); end

  # Attaches a file to the message event and converts the message into
  # a caption.
  #
  # @param file [File] The file to be attached
  # @param filename [String] Overrides the filename of the uploaded file
  # @param spoiler [true, false] Whether or not this file should appear as a spoiler.
  # @raise [ArgumentError]
  #
  # source://discordrb//lib/discordrb/events/message.rb#153
  def attach_file(file, filename: T.unsafe(nil), spoiler: T.unsafe(nil)); end

  # @return [Member, User] who sent this message.
  # @see Message#author
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def author; end

  # @return [Channel] the channel in which this message was sent.
  # @see Message#channel
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def channel; end

  # @return [String] the message's content.
  # @see Message#content
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def content; end

  # Detaches a file from the message event.
  #
  # source://discordrb//lib/discordrb/events/message.rb#163
  def detach_file; end

  # @return [File] the file that has been saved by a call to {#attach_file} and will be sent to Discord upon completion.
  #
  # source://discordrb//lib/discordrb/events/message.rb#97
  def file; end

  # @return [true, false] Whether or not this file should appear as a spoiler. Set by {#attach_file}
  #
  # source://discordrb//lib/discordrb/events/message.rb#103
  def file_spoiler; end

  # @return [String] the filename set in {#attach_file} that will override the original filename when sent.
  #
  # source://discordrb//lib/discordrb/events/message.rb#100
  def filename; end

  # @return [true, false] whether or not this message was sent by the bot itself
  #
  # source://discordrb//lib/discordrb/events/message.rb#170
  def from_bot?; end

  # @return [Message] the message which triggered this event.
  #
  # source://discordrb//lib/discordrb/events/message.rb#91
  def message; end

  # @return [String] the message that has been saved by calls to {#<<} and will be sent to Discord upon completion.
  #
  # source://discordrb//lib/discordrb/events/message.rb#94
  def saved_message; end

  # Sends file with a caption to the channel this message was sent in, right now.
  # It is usually preferable to use {#<<} and {#attach_file} instead
  # because it avoids rate limiting problems
  #
  # @example Send a file from disk
  #   event.send_file(File.open('rubytaco.png', 'r'))
  # @param file [File] The file to send to the channel
  # @param caption [String] The caption attached to the file
  # @param filename [String] Overrides the filename of the uploaded file
  # @param spoiler [true, false] Whether or not this file should appear as a spoiler.
  # @return [Discordrb::Message] the message that was sent
  #
  # source://discordrb//lib/discordrb/events/message.rb#144
  def send_file(file, caption: T.unsafe(nil), filename: T.unsafe(nil), spoiler: T.unsafe(nil)); end

  # @return [Server, nil] the server where this message was sent, or nil if it was sent in PM.
  # @see Channel#server
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def server; end

  # @return [String] the message's content.
  # @see Message#content
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def text; end

  # @return [Time] the time at which the message was sent.
  # @see Message#timestamp
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def timestamp; end

  # @return [Member, User] who sent this message.
  # @see Message#author
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def user; end

  # Utility method to get the voice bot for the current server
  #
  # @return [VoiceBot, nil] the voice bot connected to this message's server, or nil if there is none connected
  #
  # source://discordrb//lib/discordrb/events/message.rb#176
  def voice; end
end

# Event handler for MessageEvent
class Discordrb::Events::MessageEventHandler < ::Discordrb::Events::EventHandler
  # @see EventHandler#after_call
  #
  # source://discordrb//lib/discordrb/events/message.rb#254
  def after_call(event); end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/message.rb#186
  def matches?(event); end
end

# A subset of MessageEvent that only contains a message ID and a channel
class Discordrb::Events::MessageIDEvent < ::Discordrb::Events::Event
  include ::Discordrb::Events::Respondable

  # @return [MessageIDEvent] a new instance of MessageIDEvent
  #
  # source://discordrb//lib/discordrb/events/message.rb#283
  def initialize(data, bot); end

  # @return [Integer] the ID associated with this event
  #
  # source://discordrb//lib/discordrb/events/message.rb#280
  def id; end
end

# Event handler for {MessageIDEvent}
class Discordrb::Events::MessageIDEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/message.rb#293
  def matches?(event); end
end

# Raised whenever a MESSAGE_UPDATE is received
#
# @see Discordrb::EventContainer#message_update
class Discordrb::Events::MessageUpdateEvent < ::Discordrb::Events::MessageEvent; end

# Event handler for {MessageUpdateEvent}
class Discordrb::Events::MessageUpdateEventHandler < ::Discordrb::Events::MessageEventHandler; end

# A negated object, used to not match something in event parameters.
#
# @see Discordrb::Events.matches_all
class Discordrb::Events::Negated
  # @return [Negated] a new instance of Negated
  #
  # source://discordrb//lib/discordrb/events/generic.rb#10
  def initialize(object); end

  # Returns the value of attribute object.
  #
  # source://discordrb//lib/discordrb/events/generic.rb#8
  def object; end
end

# Event raised when a user starts or stops playing a game
class Discordrb::Events::PlayingEvent < ::Discordrb::Events::Event
  # @return [PlayingEvent] a new instance of PlayingEvent
  #
  # source://discordrb//lib/discordrb/events/presence.rb#80
  def initialize(data, bot); end

  # @return [String] what the player is currently doing (ex. game being streamed)
  #
  # source://discordrb//lib/discordrb/events/presence.rb#75
  def details; end

  # @return [String] the new game the user is playing.
  #
  # source://discordrb//lib/discordrb/events/presence.rb#69
  def game; end

  # @return [Server] the server on which the presence update happened.
  #
  # source://discordrb//lib/discordrb/events/presence.rb#63
  def server; end

  # @return [Integer] the type of play. 0 = game, 1 = Twitch
  #
  # source://discordrb//lib/discordrb/events/presence.rb#78
  def type; end

  # @return [String] the URL to the stream
  #
  # source://discordrb//lib/discordrb/events/presence.rb#72
  def url; end

  # @return [User] the user whose status got updated.
  #
  # source://discordrb//lib/discordrb/events/presence.rb#66
  def user; end
end

# Event handler for PlayingEvent
class Discordrb::Events::PlayingEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/presence.rb#95
  def matches?(event); end
end

# Event raised when a user's presence state updates (idle or online)
class Discordrb::Events::PresenceEvent < ::Discordrb::Events::Event
  # @return [PresenceEvent] a new instance of PresenceEvent
  #
  # source://discordrb//lib/discordrb/events/presence.rb#22
  def initialize(data, bot); end

  # @return [Hash<Symbol, Symbol>] the current online status (`:online`, `:idle` or `:dnd`) of the user
  #   on various device types (`:desktop`, `:mobile`, or `:web`). The value will be `nil` if the user is offline or invisible.
  #
  # source://discordrb//lib/discordrb/events/presence.rb#20
  def client_status; end

  # @return [Server] the server on which the presence update happened.
  #
  # source://discordrb//lib/discordrb/events/presence.rb#10
  def server; end

  # @return [Symbol] the new status.
  #
  # source://discordrb//lib/discordrb/events/presence.rb#16
  def status; end

  # @return [User] the user whose status got updated.
  #
  # source://discordrb//lib/discordrb/events/presence.rb#13
  def user; end
end

# Event handler for PresenceEvent
class Discordrb::Events::PresenceEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/presence.rb#34
  def matches?(event); end
end

# @see Discordrb::EventContainer#pm
class Discordrb::Events::PrivateMessageEvent < ::Discordrb::Events::MessageEvent; end

# Event handler for {PrivateMessageEvent}
class Discordrb::Events::PrivateMessageEventHandler < ::Discordrb::Events::MessageEventHandler; end

# Event raised when any dispatch is received
class Discordrb::Events::RawEvent < ::Discordrb::Events::Event
  # @return [RawEvent] a new instance of RawEvent
  #
  # source://discordrb//lib/discordrb/events/raw.rb#17
  def initialize(type, data, bot); end

  # @return [Hash] the data of this dispatch.
  #
  # source://discordrb//lib/discordrb/events/raw.rb#14
  def d; end

  # @return [Hash] the data of this dispatch.
  #
  # source://discordrb//lib/discordrb/events/raw.rb#14
  def data; end

  # @return [Symbol] the type of this dispatch.
  #
  # source://discordrb//lib/discordrb/events/raw.rb#10
  def t; end

  # @return [Symbol] the type of this dispatch.
  #
  # source://discordrb//lib/discordrb/events/raw.rb#10
  def type; end
end

# Event handler for {RawEvent}
class Discordrb::Events::RawEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/raw.rb#26
  def matches?(event); end
end

# Event raised when somebody reacts to a message
class Discordrb::Events::ReactionAddEvent < ::Discordrb::Events::ReactionEvent; end

# Event handler for {ReactionAddEvent}
class Discordrb::Events::ReactionAddEventHandler < ::Discordrb::Events::ReactionEventHandler; end

# Generic superclass for events about adding and removing reactions
class Discordrb::Events::ReactionEvent < ::Discordrb::Events::Event
  include ::Discordrb::Events::Respondable

  # @return [ReactionEvent] a new instance of ReactionEvent
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#17
  def initialize(data, bot); end

  # @return [Channel] the channel that was reacted in.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#42
  def channel; end

  # @return [Emoji] the emoji that was reacted with.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#12
  def emoji; end

  # @return [Message] the message that was reacted to.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#37
  def message; end

  # Returns the value of attribute message_id.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#15
  def message_id; end

  # @return [Server, nil] the server that was reacted in. If reacted in a PM channel, it will be nil.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#47
  def server; end

  # @return [User, Member] the user that reacted to this message, or member if a server exists.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#27
  def user; end
end

# Generic superclass for event handlers pertaining to adding and removing reactions
class Discordrb::Events::ReactionEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#54
  def matches?(event); end
end

# Event raised when somebody removes all reactions from a message
class Discordrb::Events::ReactionRemoveAllEvent < ::Discordrb::Events::Event
  include ::Discordrb::Events::Respondable

  # @return [ReactionRemoveAllEvent] a new instance of ReactionRemoveAllEvent
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#116
  def initialize(data, bot); end

  # @return [Channel] the channel where the removal occurred.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#124
  def channel; end

  # @return [Message] the message all reactions were removed from.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#129
  def message; end

  # Returns the value of attribute message_id.
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#114
  def message_id; end
end

# Event handler for {ReactionRemoveAllEvent}
class Discordrb::Events::ReactionRemoveAllEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/reactions.rb#136
  def matches?(event); end
end

# Event raised when somebody removes a reaction to a message
class Discordrb::Events::ReactionRemoveEvent < ::Discordrb::Events::ReactionEvent; end

# Event handler for {ReactionRemoveEvent}
class Discordrb::Events::ReactionRemoveEventHandler < ::Discordrb::Events::ReactionEventHandler; end

# @see Discordrb::EventContainer#ready
class Discordrb::Events::ReadyEvent < ::Discordrb::Events::LifetimeEvent; end

# Event handler for {ReadyEvent}
class Discordrb::Events::ReadyEventHandler < ::Discordrb::Events::TrueEventHandler; end

# Module to make sending messages easier with the presence of a text channel in an event
module Discordrb::Events::Respondable
  # Adds a string to be sent after the event has finished execution. Avoids problems with rate limiting because only
  # one message is ever sent. If it is used multiple times, the strings will bunch up into one message (separated by
  # newlines)
  #
  # @param message [String] The message to send to the channel
  #
  # source://discordrb//lib/discordrb/events/message.rb#55
  def <<(message); end

  # @return [Channel] the channel in which this event occurred
  #
  # source://discordrb//lib/discordrb/events/message.rb#10
  def channel; end

  # Drains the currently saved message, which clears it out, resulting in everything being saved before being
  # thrown away and nothing being sent to the channel (unless there is something saved after this).
  #
  # @see #<<
  #
  # source://discordrb//lib/discordrb/events/message.rb#64
  def drain; end

  # Drains the currently saved message into a result string. This prepends it before that string, clears the saved
  # message and returns the concatenation.
  #
  # @param result [String] The result string to drain into.
  # @return [String] a string formed by concatenating the saved message and the argument.
  #
  # source://discordrb//lib/discordrb/events/message.rb#73
  def drain_into(result); end

  # Sends a message to the channel this message was sent in, right now. It is usually preferable to use {#<<} instead
  # because it avoids rate limiting problems
  #
  # @param content [String] The message to send to the channel
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Discordrb::Message] the message that was sent
  #
  # source://discordrb//lib/discordrb/events/message.rb#21
  def respond(content, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # Sends a message to the channel this message was sent in, right now. It is usually preferable to use {#<<} instead
  # because it avoids rate limiting problems
  #
  # @param content [String] The message to send to the channel
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Discordrb::Message] the message that was sent
  #
  # source://discordrb//lib/discordrb/events/message.rb#21
  def send(content, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # The same as {#send_message}, but yields a {Webhooks::Embed} for easy building of embedded content inside a block.
  #
  # @param message [String] The message that should be sent along with the embed. If this is the empty string, only the embed will be shown.
  # @param embed [Discordrb::Webhooks::Embed, nil] The embed to start the building process with, or nil if one should be created anew.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Message] The resulting message.
  # @see Channel#send_embed
  # @yield [embed] Yields the embed to allow for easy building inside a block.
  # @yieldparam embed [Discordrb::Webhooks::Embed] The embed from the parameters, or a new one.
  #
  # source://discordrb//lib/discordrb/events/message.rb#36
  def send_embed(message = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), tts = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil), &block); end

  # Sends a message to the channel this message was sent in, right now. It is usually preferable to use {#<<} instead
  # because it avoids rate limiting problems
  #
  # @param content [String] The message to send to the channel
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Discordrb::Message] the message that was sent
  #
  # source://discordrb//lib/discordrb/events/message.rb#21
  def send_message(content, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # Sends a temporary message to the channel this message was sent in, right now.
  #
  # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
  # @param timeout [Float] The amount of time in seconds after which the message sent will be deleted.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  #
  # source://discordrb//lib/discordrb/events/message.rb#47
  def send_temp(content, timeout, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil)); end

  # Sends a temporary message to the channel this message was sent in, right now.
  #
  # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
  # @param timeout [Float] The amount of time in seconds after which the message sent will be deleted.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  #
  # source://discordrb//lib/discordrb/events/message.rb#47
  def send_temporary_message(content, timeout, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil)); end
end

# Server is created
#
# @see Discordrb::EventContainer#server_create
class Discordrb::Events::ServerCreateEvent < ::Discordrb::Events::ServerEvent; end

# Event handler for {ServerCreateEvent}
class Discordrb::Events::ServerCreateEventHandler < ::Discordrb::Events::ServerEventHandler; end

# Server is deleted, the server was left because the bot was kicked, or the
# bot made itself leave the server.
#
# @see Discordrb::EventContainer#server_delete
class Discordrb::Events::ServerDeleteEvent < ::Discordrb::Events::ServerEvent
  # Override init_server to account for the deleted server
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#68
  def init_server(data, _bot); end

  # @return [Integer] The ID of the server that was left.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#65
  def server; end
end

# Event handler for {ServerDeleteEvent}
class Discordrb::Events::ServerDeleteEventHandler < ::Discordrb::Events::ServerEventHandler; end

# Generic event helper for when an emoji is either created or deleted
class Discordrb::Events::ServerEmojiCDEvent < ::Discordrb::Events::ServerEvent
  # @return [ServerEmojiCDEvent] a new instance of ServerEmojiCDEvent
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#106
  def initialize(server, emoji, bot); end

  # @return [Emoji] the emoji data.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#104
  def emoji; end

  # @return [Server] the server in question.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#101
  def server; end
end

# Generic handler for emoji create and delete
class Discordrb::Events::ServerEmojiCDEventHandler < ::Discordrb::Events::ServerEventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#143
  def matches?(event); end
end

# Emoji is created/deleted/updated
class Discordrb::Events::ServerEmojiChangeEvent < ::Discordrb::Events::ServerEvent
  # @return [ServerEmojiChangeEvent] a new instance of ServerEmojiChangeEvent
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#84
  def initialize(server, data, bot); end

  # @return [Array<Emoji>] array of emojis.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#82
  def emoji; end

  # source://discordrb//lib/discordrb/events/guilds.rb#91
  def process_emoji(data); end

  # @return [Server] the server in question.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#79
  def server; end
end

# Event handler for {ServerEmojiChangeEvent}
class Discordrb::Events::ServerEmojiChangeEventHandler < ::Discordrb::Events::ServerEventHandler; end

# Emoji is created
class Discordrb::Events::ServerEmojiCreateEvent < ::Discordrb::Events::ServerEmojiCDEvent; end

# Event handler for {ServerEmojiCreateEvent}
class Discordrb::Events::ServerEmojiCreateEventHandler < ::Discordrb::Events::ServerEmojiCDEventHandler; end

# Emoji is deleted
class Discordrb::Events::ServerEmojiDeleteEvent < ::Discordrb::Events::ServerEmojiCDEvent; end

# Event handler for {ServerEmojiDeleteEvent}
class Discordrb::Events::ServerEmojiDeleteEventHandler < ::Discordrb::Events::ServerEmojiCDEventHandler; end

# Emoji is updated
class Discordrb::Events::ServerEmojiUpdateEvent < ::Discordrb::Events::ServerEvent
  # @return [ServerEmojiUpdateEvent] a new instance of ServerEmojiUpdateEvent
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#130
  def initialize(server, old_emoji, emoji, bot); end

  # @return [Emoji, nil] the updated emoji data.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#128
  def emoji; end

  # @return [Emoji, nil] the emoji data before the event.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#125
  def old_emoji; end

  # @return [Server] the server in question.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#122
  def server; end
end

# Event handler for {ServerEmojiUpdateEvent}
class Discordrb::Events::ServerEmojiUpdateEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#172
  def matches?(event); end
end

# Generic subclass for server events (create/update/delete)
class Discordrb::Events::ServerEvent < ::Discordrb::Events::Event
  # @return [ServerEvent] a new instance of ServerEvent
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#12
  def initialize(data, bot); end

  # Initializes this event with server data. Should be overwritten in case the server doesn't exist at the time
  # of event creation (e. g. {ServerDeleteEvent})
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#20
  def init_server(data, bot); end

  # @return [Server] the server in question.
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#10
  def server; end
end

# Generic event handler for member events
class Discordrb::Events::ServerEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/guilds.rb#27
  def matches?(event); end
end

# Member joins
#
# @see Discordrb::EventContainer#member_join
class Discordrb::Events::ServerMemberAddEvent < ::Discordrb::Events::ServerMemberEvent; end

# Event handler for {ServerMemberAddEvent}
class Discordrb::Events::ServerMemberAddEventHandler < ::Discordrb::Events::ServerMemberEventHandler; end

# Member leaves
#
# @see Discordrb::EventContainer#member_leave
class Discordrb::Events::ServerMemberDeleteEvent < ::Discordrb::Events::ServerMemberEvent
  # Override init_user to account for the deleted user on the server
  #
  # source://discordrb//lib/discordrb/events/members.rb#83
  def init_user(data, bot); end

  # @return [User] the user in question.
  #
  # source://discordrb//lib/discordrb/events/members.rb#88
  def user; end
end

# Event handler for {ServerMemberDeleteEvent}
class Discordrb::Events::ServerMemberDeleteEventHandler < ::Discordrb::Events::ServerMemberEventHandler; end

# Generic subclass for server member events (add/update/delete)
class Discordrb::Events::ServerMemberEvent < ::Discordrb::Events::Event
  # @return [ServerMemberEvent] a new instance of ServerMemberEvent
  #
  # source://discordrb//lib/discordrb/events/members.rb#19
  def initialize(data, bot); end

  # @return [Member] the member in question.
  #
  # source://discordrb//lib/discordrb/events/members.rb#10
  def member; end

  # @return [Array<Role>] the member's roles.
  #
  # source://discordrb//lib/discordrb/events/members.rb#14
  def roles; end

  # @return [Server] the server on which the event happened.
  #
  # source://discordrb//lib/discordrb/events/members.rb#17
  def server; end

  # @return [Member] the member in question.
  #
  # source://discordrb//lib/discordrb/events/members.rb#10
  def user; end

  private

  # source://discordrb//lib/discordrb/events/members.rb#36
  def init_roles(data, _); end

  # source://discordrb//lib/discordrb/events/members.rb#31
  def init_user(data, _); end
end

# Generic event handler for member events
class Discordrb::Events::ServerMemberEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/members.rb#49
  def matches?(event); end
end

# Member is updated (roles added or deleted)
#
# @see Discordrb::EventContainer#member_update
class Discordrb::Events::ServerMemberUpdateEvent < ::Discordrb::Events::ServerMemberEvent; end

# Event handler for {ServerMemberUpdateEvent}
class Discordrb::Events::ServerMemberUpdateEventHandler < ::Discordrb::Events::ServerMemberEventHandler; end

# Raised when a role is created on a server
class Discordrb::Events::ServerRoleCreateEvent < ::Discordrb::Events::Event
  # @return [ServerRoleCreateEvent] a new instance of ServerRoleCreateEvent
  #
  # source://discordrb//lib/discordrb/events/roles.rb#20
  def initialize(data, bot); end

  # @return [String] this role's name
  # @see Role#name
  #
  # source://discordrb//lib/discordrb/events/generic.rb#67
  def name; end

  # @return [Role] the role that got created
  #
  # source://discordrb//lib/discordrb/events/roles.rb#10
  def role; end

  # @return [Server] the server on which a role got created
  #
  # source://discordrb//lib/discordrb/events/roles.rb#13
  def server; end
end

# Event handler for ServerRoleCreateEvent
class Discordrb::Events::ServerRoleCreateEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/roles.rb#33
  def matches?(event); end
end

# Raised when a role is deleted from a server
class Discordrb::Events::ServerRoleDeleteEvent < ::Discordrb::Events::Event
  # @return [ServerRoleDeleteEvent] a new instance of ServerRoleDeleteEvent
  #
  # source://discordrb//lib/discordrb/events/roles.rb#57
  def initialize(data, bot); end

  # @return [Integer] the ID of the role that got deleted.
  #
  # source://discordrb//lib/discordrb/events/roles.rb#52
  def id; end

  # @return [Server] the server on which a role got deleted.
  #
  # source://discordrb//lib/discordrb/events/roles.rb#55
  def server; end
end

# EventHandler for ServerRoleDeleteEvent
class Discordrb::Events::ServerRoleDeleteEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/roles.rb#71
  def matches?(event); end
end

# Event raised when a role updates on a server
class Discordrb::Events::ServerRoleUpdateEvent < ::Discordrb::Events::ServerRoleCreateEvent; end

# Event handler for ServerRoleUpdateEvent
class Discordrb::Events::ServerRoleUpdateEventHandler < ::Discordrb::Events::ServerRoleCreateEventHandler; end

# Server is updated (e.g. name changed)
#
# @see Discordrb::EventContainer#server_update
class Discordrb::Events::ServerUpdateEvent < ::Discordrb::Events::ServerEvent; end

# Event handler for {ServerUpdateEvent}
class Discordrb::Events::ServerUpdateEventHandler < ::Discordrb::Events::ServerEventHandler; end

# Event handler that matches all events. Only useful for making an event that has no attributes, such as {ReadyEvent}.
class Discordrb::Events::TrueEventHandler < ::Discordrb::Events::EventHandler
  # Always returns true.
  #
  # @return [true]
  #
  # source://discordrb//lib/discordrb/events/generic.rb#114
  def matches?(_); end
end

# Event raised when a user starts typing
class Discordrb::Events::TypingEvent < ::Discordrb::Events::Event
  include ::Discordrb::Events::Respondable

  # @return [TypingEvent] a new instance of TypingEvent
  #
  # source://discordrb//lib/discordrb/events/typing.rb#20
  def initialize(data, bot); end

  # @return [Channel] the channel on which a user started typing.
  #
  # source://discordrb//lib/discordrb/events/typing.rb#11
  def channel; end

  # @return [User, Member, Recipient] the user that started typing.
  #
  # source://discordrb//lib/discordrb/events/typing.rb#14
  def member; end

  # @return [Time] when the typing happened.
  #
  # source://discordrb//lib/discordrb/events/typing.rb#18
  def timestamp; end

  # @return [User, Member, Recipient] the user that started typing.
  #
  # source://discordrb//lib/discordrb/events/typing.rb#14
  def user; end
end

# Event handler for TypingEvent
class Discordrb::Events::TypingEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/typing.rb#42
  def matches?(event); end
end

# Event raised when an unknown dispatch is received
class Discordrb::Events::UnknownEvent < ::Discordrb::Events::RawEvent; end

# Event handler for {UnknownEvent}
class Discordrb::Events::UnknownEventHandler < ::Discordrb::Events::RawEventHandler; end

# Raised when a user is banned
class Discordrb::Events::UserBanEvent < ::Discordrb::Events::Event
  # @return [UserBanEvent] a new instance of UserBanEvent
  #
  # source://discordrb//lib/discordrb/events/bans.rb#15
  def initialize(data, bot); end

  # @return [Server] the server from which the user was banned
  #
  # source://discordrb//lib/discordrb/events/bans.rb#12
  def server; end

  # @return [User] the user that was banned
  #
  # source://discordrb//lib/discordrb/events/bans.rb#9
  def user; end
end

# Event handler for {UserBanEvent}
class Discordrb::Events::UserBanEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/bans.rb#24
  def matches?(event); end
end

# Raised when a user is unbanned from a server
class Discordrb::Events::UserUnbanEvent < ::Discordrb::Events::UserBanEvent; end

# Event handler for {UserUnbanEvent}
class Discordrb::Events::UserUnbanEventHandler < ::Discordrb::Events::UserBanEventHandler; end

# Event raised when a server's voice server is updating.
# Sent when initially connecting to voice and when a voice instance fails
# over to a new server.
# This event is exposed for use with library agnostic interfaces like telecom and
# lavalink.
class Discordrb::Events::VoiceServerUpdateEvent < ::Discordrb::Events::Event
  # @return [VoiceServerUpdateEvent] a new instance of VoiceServerUpdateEvent
  #
  # source://discordrb//lib/discordrb/events/voice_server_update.rb#22
  def initialize(data, bot); end

  # @return [String] The voice server host.
  #
  # source://discordrb//lib/discordrb/events/voice_server_update.rb#20
  def endpoint; end

  # @return [Server] The server this update is for.
  #
  # source://discordrb//lib/discordrb/events/voice_server_update.rb#17
  def server; end

  # @return [String] The voice connection token
  #
  # source://discordrb//lib/discordrb/events/voice_server_update.rb#14
  def token; end
end

# Event handler for VoiceServerUpdateEvent
class Discordrb::Events::VoiceServerUpdateEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/voice_server_update.rb#33
  def matches?(event); end
end

# Event raised when a user's voice state updates
class Discordrb::Events::VoiceStateUpdateEvent < ::Discordrb::Events::Event
  # @return [VoiceStateUpdateEvent] a new instance of VoiceStateUpdateEvent
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#14
  def initialize(data, old_channel_id, bot); end

  # Returns the value of attribute channel.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def channel; end

  # Returns the value of attribute deaf.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def deaf; end

  # Returns the value of attribute mute.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def mute; end

  # @return [Channel, nil] the old channel this user was on, or nil if the user is newly joining voice.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#12
  def old_channel; end

  # Returns the value of attribute self_deaf.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def self_deaf; end

  # Returns the value of attribute self_mute.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def self_mute; end

  # Returns the value of attribute server.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def server; end

  # Returns the value of attribute session_id.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def session_id; end

  # Returns the value of attribute suppress.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def suppress; end

  # Returns the value of attribute token.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def token; end

  # Returns the value of attribute user.
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#9
  def user; end
end

# Event handler for VoiceStateUpdateEvent
class Discordrb::Events::VoiceStateUpdateEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/voice_state_update.rb#35
  def matches?(event); end
end

# Event raised when a webhook is updated
class Discordrb::Events::WebhookUpdateEvent < ::Discordrb::Events::Event
  # @return [WebhookUpdateEvent] a new instance of WebhookUpdateEvent
  #
  # source://discordrb//lib/discordrb/events/webhooks.rb#15
  def initialize(data, bot); end

  # @return [Channel] the channel the webhook is associated to
  #
  # source://discordrb//lib/discordrb/events/webhooks.rb#13
  def channel; end

  # @return [Server] the server where the webhook updated
  #
  # source://discordrb//lib/discordrb/events/webhooks.rb#10
  def server; end
end

# Event handler for {WebhookUpdateEvent}
class Discordrb::Events::WebhookUpdateEventHandler < ::Discordrb::Events::EventHandler
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/events/webhooks.rb#25
  def matches?(event); end
end

# Client for the Discord gateway protocol
class Discordrb::Gateway
  # @return [Gateway] a new instance of Gateway
  #
  # source://discordrb//lib/discordrb/gateway.rb#146
  def initialize(bot, token, shard_key = T.unsafe(nil), compress_mode = T.unsafe(nil), intents = T.unsafe(nil)); end

  # Heartbeat ACKs are Discord's way of verifying on the client side whether the connection is still alive. If this is
  # set to true (default value) the gateway client will use that functionality to detect zombie connections and
  # reconnect in such a case; however it may lead to instability if there's some problem with the ACKs. If this occurs
  # it can simply be set to false.
  #
  # @return [true, false] whether or not this gateway should check for heartbeat ACKs.
  #
  # source://discordrb//lib/discordrb/gateway.rb#144
  def check_heartbeat_acks; end

  # Heartbeat ACKs are Discord's way of verifying on the client side whether the connection is still alive. If this is
  # set to true (default value) the gateway client will use that functionality to detect zombie connections and
  # reconnect in such a case; however it may lead to instability if there's some problem with the ACKs. If this occurs
  # it can simply be set to false.
  #
  # @return [true, false] whether or not this gateway should check for heartbeat ACKs.
  #
  # source://discordrb//lib/discordrb/gateway.rb#144
  def check_heartbeat_acks=(_arg0); end

  # Sends a heartbeat with the last received packet's seq (to acknowledge that we have received it and all packets
  # before it), or if none have been received yet, with 0.
  #
  # @see #send_heartbeat
  #
  # source://discordrb//lib/discordrb/gateway.rb#249
  def heartbeat; end

  # Identifies to Discord with the default parameters.
  #
  # @see #send_identify
  #
  # source://discordrb//lib/discordrb/gateway.rb#277
  def identify; end

  # Injects a terminal gateway error into the handler. Useful for testing the reconnect logic.
  #
  # @param e [Exception] The exception object to inject.
  #
  # source://discordrb//lib/discordrb/gateway.rb#242
  def inject_error(e); end

  # Injects a reconnect event (op 7) into the event processor, causing Discord to reconnect to the given gateway URL.
  # If the URL is set to nil, it will reconnect and get an entirely new gateway URL. This method has not much use
  # outside of testing and implementing highly custom reconnect logic.
  #
  # @param url [String, nil] the URL to connect to or nil if one should be obtained from Discord.
  #
  # source://discordrb//lib/discordrb/gateway.rb#222
  def inject_reconnect(url = T.unsafe(nil)); end

  # Injects a resume packet (op 6) into the gateway. If this is done with a running connection, it will cause an
  # error. It has no use outside of testing stuff that I know of, but if you want to use it anyway for some reason,
  # here it is.
  #
  # @param seq [Integer, nil] The sequence ID to inject, or nil if the currently tracked one should be used.
  #
  # source://discordrb//lib/discordrb/gateway.rb#236
  def inject_resume(seq); end

  # Kills the websocket thread, stopping all connections to Discord.
  #
  # source://discordrb//lib/discordrb/gateway.rb#208
  def kill; end

  # Notifies the {#run_async} method that everything is ready and the caller can now continue (i.e. with syncing,
  # or with doing processing and then syncing)
  #
  # source://discordrb//lib/discordrb/gateway.rb#214
  def notify_ready; end

  # Whether the WebSocket connection to the gateway is currently open
  #
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/gateway.rb#191
  def open?; end

  # Reconnects the gateway connection in a controlled manner.
  #
  # @param attempt_resume [true, false] Whether a resume should be attempted after the reconnection.
  #
  # source://discordrb//lib/discordrb/gateway.rb#366
  def reconnect(attempt_resume = T.unsafe(nil)); end

  # Resumes the session from the last recorded point.
  #
  # @see #send_resume
  #
  # source://discordrb//lib/discordrb/gateway.rb#360
  def resume; end

  # Connect to the gateway server in a separate thread
  #
  # source://discordrb//lib/discordrb/gateway.rb#162
  def run_async; end

  # Sends a heartbeat packet (op 1). This tells Discord that the current connection is still active and that the last
  # packets until the given sequence have been processed (in case of a resume).
  #
  # @param sequence [Integer] The sequence number for which to send a heartbeat.
  #
  # source://discordrb//lib/discordrb/gateway.rb#271
  def send_heartbeat(sequence); end

  # Sends an identify packet (op 2). This starts a new session on the current connection and tells Discord who we are.
  # This can only be done once a connection.
  #
  # @param token [String] The token with which to authorise the session. If it belongs to a bot account, it must be
  #   prefixed with "Bot ".
  # @param properties [Hash<Symbol => String>] A list of properties for Discord to use in analytics. The following
  #   keys are recognised:
  #
  #   - "$os" (recommended value: the operating system the bot is running on)
  #   - "$browser" (recommended value: library name)
  #   - "$device" (recommended value: library name)
  #   - "$referrer" (recommended value: empty)
  #   - "$referring_domain" (recommended value: empty)
  # @param compress [true, false] Whether certain large packets should be compressed using zlib.
  # @param large_threshold [Integer] The member threshold after which a server counts as large and will have to have
  #   its member list chunked.
  # @param shard_key [Array(Integer, Integer), nil] The shard key to use for sharding, represented as
  #   [shard_id, num_shards], or nil if the bot should not be sharded.
  #
  # source://discordrb//lib/discordrb/gateway.rb#306
  def send_identify(token, properties, compress, large_threshold, shard_key = T.unsafe(nil)); end

  # Sends a custom packet over the connection. This can be useful to implement future yet unimplemented functionality
  # or for testing. You probably shouldn't use this unless you know what you're doing.
  #
  # @param opcode [Integer] The opcode the packet should be sent as. Can be one of {Opcodes} or a custom value if
  #   necessary.
  # @param packet [Object] Some arbitrary JSON-serializable data that should be sent as the `d` field.
  #
  # source://discordrb//lib/discordrb/gateway.rb#417
  def send_packet(opcode, packet); end

  # Sends custom raw data over the connection. Only useful for testing; even if you know what you're doing you
  # probably want to use {#send_packet} instead.
  #
  # @param data [String] The data to send.
  # @param type [Symbol] The type the WebSocket frame should have; either `:text`, `:binary`, `:ping`, `:pong`, or
  #   `:close`.
  #
  # source://discordrb//lib/discordrb/gateway.rb#431
  def send_raw(data, type = T.unsafe(nil)); end

  # Sends a request members packet (op 8). This will order Discord to gradually sent all requested members as dispatch
  # events with type `GUILD_MEMBERS_CHUNK`. It is necessary to use this method in order to get all members of a large
  # server (see `large_threshold` in {#send_identify}), however it can also be used for other purposes.
  #
  # @param server_id [Integer] The ID of the server whose members to query.
  # @param query [String] If this string is not empty, only members whose username starts with this string will be
  #   returned.
  # @param limit [Integer] How many members to send at maximum, or `0` to send all members.
  #
  # source://discordrb//lib/discordrb/gateway.rb#402
  def send_request_members(server_id, query, limit); end

  # Sends a resume packet (op 6). This replays all events from a previous point specified by its packet sequence. This
  # will not work if the packet to resume from has already been acknowledged using a heartbeat, or if the session ID
  # belongs to a now invalid session.
  #
  # If this packet is sent at the beginning of a connection, it will act similarly to an {#identify} in that it
  # creates a session on the current connection. Unlike identify however, this packet can also be sent in an existing
  # session and will just replay some of the events.
  #
  # @param token [String] The token that was used to identify the session to resume.
  # @param session_id [String] The session ID of the session to resume.
  # @param seq [Integer] The packet sequence of the packet after which the events should be replayed.
  #
  # source://discordrb//lib/discordrb/gateway.rb#385
  def send_resume(token, session_id, seq); end

  # Sends a status update packet (op 3). This sets the bot user's status (online/idle/...) and game playing/streaming.
  #
  # @param status [String] The status that should be set (`online`, `idle`, `dnd`, `invisible`).
  # @param since [Integer] The Unix timestamp in milliseconds when the status was set. Should only be provided when
  #   `afk` is true.
  # @param game [Hash<Symbol => Object>, nil] `nil` if no game should be played, or a hash of `:game => "name"` if a
  #   game should be played. The hash can also contain additional attributes for streaming statuses.
  # @param afk [true, false] Whether the status was set due to inactivity on the user's part.
  #
  # source://discordrb//lib/discordrb/gateway.rb#329
  def send_status_update(status, since, game, afk); end

  # Sends a voice state update packet (op 4). This packet can connect a user to a voice channel, update self mute/deaf
  # status in an existing voice connection, move the user to a new voice channel on the same server or disconnect an
  # existing voice connection.
  #
  # @param server_id [Integer] The ID of the server on which this action should occur.
  # @param channel_id [Integer, nil] The channel ID to connect/move to, or `nil` to disconnect.
  # @param self_mute [true, false] Whether the user should itself be muted to everyone else.
  # @param self_deaf [true, false] Whether the user should be deaf towards other users.
  #
  # source://discordrb//lib/discordrb/gateway.rb#347
  def send_voice_state_update(server_id, channel_id, self_mute, self_deaf); end

  # Stops the bot gracefully, disconnecting the websocket without immediately killing the thread. This means that
  # Discord is immediately aware of the closed connection and makes the bot appear offline instantly.
  #
  # If this method doesn't work or you're looking for something more drastic, use {#kill} instead.
  #
  # source://discordrb//lib/discordrb/gateway.rb#199
  def stop; end

  # Prevents all further execution until the websocket thread stops (e.g. through a closed connection).
  #
  # source://discordrb//lib/discordrb/gateway.rb#186
  def sync; end

  private

  # source://discordrb//lib/discordrb/gateway.rb#834
  def close(code = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/gateway.rb#552
  def connect; end

  # source://discordrb//lib/discordrb/gateway.rb#464
  def connect_loop; end

  # source://discordrb//lib/discordrb/gateway.rb#532
  def find_gateway; end

  # source://discordrb//lib/discordrb/gateway.rb#795
  def handle_close(e); end

  # Op 0
  #
  # source://discordrb//lib/discordrb/gateway.rb#708
  def handle_dispatch(packet); end

  # source://discordrb//lib/discordrb/gateway.rb#651
  def handle_error(e); end

  # source://discordrb//lib/discordrb/gateway.rb#641
  def handle_handshake_data(recv_data); end

  # Op 1
  #
  # source://discordrb//lib/discordrb/gateway.rb#731
  def handle_heartbeat(packet); end

  # Op 11
  #
  # source://discordrb//lib/discordrb/gateway.rb#778
  def handle_heartbeat_ack(packet); end

  # Op 10
  #
  # source://discordrb//lib/discordrb/gateway.rb#756
  def handle_hello(packet); end

  # Called when the websocket has been disconnected in some way - say due to a pipe error while sending
  #
  # source://discordrb//lib/discordrb/gateway.rb#784
  def handle_internal_close(e); end

  # Op 9
  #
  # source://discordrb//lib/discordrb/gateway.rb#743
  def handle_invalidate_session; end

  # source://discordrb//lib/discordrb/gateway.rb#658
  def handle_message(msg); end

  # source://discordrb//lib/discordrb/gateway.rb#649
  def handle_open; end

  # Op 7
  #
  # source://discordrb//lib/discordrb/gateway.rb#737
  def handle_reconnect; end

  # Create and connect a socket using a URI
  #
  # source://discordrb//lib/discordrb/gateway.rb#498
  def obtain_socket(uri); end

  # source://discordrb//lib/discordrb/gateway.rb#537
  def process_gateway; end

  # Whether the URI is secure (connection should be encrypted)
  #
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/gateway.rb#523
  def secure_uri?(uri); end

  # source://discordrb//lib/discordrb/gateway.rb#813
  def send(data, type = T.unsafe(nil), code = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/gateway.rb#437
  def setup_heartbeats(interval); end

  # The port we should connect to, if the URI doesn't have one set.
  #
  # source://discordrb//lib/discordrb/gateway.rb#528
  def socket_port(uri); end

  # Separate method to wait an ever-increasing amount of time before reconnecting after being disconnected in an
  # unexpected way
  #
  # source://discordrb//lib/discordrb/gateway.rb#487
  def wait_for_reconnect; end

  # source://discordrb//lib/discordrb/gateway.rb#582
  def websocket_loop; end
end

# Close codes that are unrecoverable, after which we should not try to reconnect.
# - 4003: Not authenticated. How did this happen?
# - 4004: Authentication failed. Token was wrong, nothing we can do.
# - 4011: Sharding required. Currently requires developer intervention.
#
# source://discordrb//lib/discordrb/gateway.rb#793
Discordrb::Gateway::FATAL_CLOSE_CODES = T.let(T.unsafe(nil), Array)

# The version of the gateway that's supposed to be used.
#
# source://discordrb//lib/discordrb/gateway.rb#137
Discordrb::Gateway::GATEWAY_VERSION = T.let(T.unsafe(nil), Integer)

# How many members there need to be in a server for it to count as "large"
#
# source://discordrb//lib/discordrb/gateway.rb#134
Discordrb::Gateway::LARGE_THRESHOLD = T.let(T.unsafe(nil), Integer)

# source://discordrb//lib/discordrb/gateway.rb#656
Discordrb::Gateway::ZLIB_SUFFIX = T.let(T.unsafe(nil), String)

# Mixin for objects that have IDs
module Discordrb::IDObject
  # ID based comparison
  #
  # source://discordrb//lib/discordrb/id_object.rb#12
  def ==(other); end

  # Estimates the time this object was generated on based on the beginning of the ID. This is fairly accurate but
  # shouldn't be relied on as Discord might change its algorithm at any time
  #
  # @return [Time] when this object was created at
  #
  # source://discordrb//lib/discordrb/id_object.rb#21
  def creation_time; end

  # ID based comparison
  #
  # source://discordrb//lib/discordrb/id_object.rb#12
  def eql?(other); end

  # @return [Integer] the ID which uniquely identifies this object across Discord.
  def hash; end

  # @return [Integer] the ID which uniquely identifies this object across Discord.
  #
  # source://discordrb//lib/discordrb/id_object.rb#7
  def id; end

  # @return [Integer] the ID which uniquely identifies this object across Discord.
  def resolve_id; end

  class << self
    # Creates an artificial snowflake at the given point in time. Useful for comparing against.
    #
    # @param time [Time] The time the snowflake should represent.
    # @return [Integer] a snowflake with the timestamp data as the given time
    #
    # source://discordrb//lib/discordrb/id_object.rb#30
    def synthesise(time); end

    # Creates an artificial snowflake at the given point in time. Useful for comparing against.
    #
    # @param time [Time] The time the snowflake should represent.
    # @return [Integer] a snowflake with the timestamp data as the given time
    #
    # source://discordrb//lib/discordrb/id_object.rb#30
    def synthesize(time); end
  end
end

# Used to declare what events you wish to recieve from Discord.
#
# @see https://discordapp.com/developers/docs/topics/gateway#gateway-intents
#
# source://discordrb//lib/discordrb.rb#20
Discordrb::INTENTS = T.let(T.unsafe(nil), Hash)

# Server integration
class Discordrb::Integration
  include ::Discordrb::IDObject

  # @return [Integration] a new instance of Integration
  #
  # source://discordrb//lib/discordrb/data/integration.rb#60
  def initialize(data, bot, server); end

  # @return [IntegrationAccount] the integration account information
  #
  # source://discordrb//lib/discordrb/data/integration.rb#48
  def account; end

  # @return [true, false] whether emoticons are enabled
  #
  # source://discordrb//lib/discordrb/data/integration.rb#35
  def emoticon; end

  # @return [true, false] whether emoticons are enabled
  #
  # source://discordrb//lib/discordrb/data/integration.rb#35
  def emoticon?; end

  # @return [true, false] whether the integration is enabled
  #
  # source://discordrb//lib/discordrb/data/integration.rb#42
  def enabled; end

  # @return [Symbol] the behaviour of expiring subscribers (:remove = Remove User from role; :kick = Kick User from server)
  #
  # source://discordrb//lib/discordrb/data/integration.rb#54
  def expire_behavior; end

  # @return [Symbol] the behaviour of expiring subscribers (:remove = Remove User from role; :kick = Kick User from server)
  #
  # source://discordrb//lib/discordrb/data/integration.rb#54
  def expire_behaviour; end

  # @return [Integer] the grace period before subscribers expire (in days)
  #
  # source://discordrb//lib/discordrb/data/integration.rb#58
  def expire_grace_period; end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/integration.rb#79
  def inspect; end

  # @return [String] the integration name
  #
  # source://discordrb//lib/discordrb/data/integration.rb#23
  def name; end

  # @return [Role, nil] the role that this integration uses for "subscribers"
  #
  # source://discordrb//lib/discordrb/data/integration.rb#32
  def role; end

  # @return [Server] the server the integration is linked to
  #
  # source://discordrb//lib/discordrb/data/integration.rb#26
  def server; end

  # @return [Time] the time the integration was synced at
  #
  # source://discordrb//lib/discordrb/data/integration.rb#51
  def synced_at; end

  # @return [true, false] whether the integration is syncing
  #
  # source://discordrb//lib/discordrb/data/integration.rb#45
  def syncing; end

  # @return [String] the integration type (YouTube, Twitch, etc.)
  #
  # source://discordrb//lib/discordrb/data/integration.rb#39
  def type; end

  # @return [User] the user the integration is linked to
  #
  # source://discordrb//lib/discordrb/data/integration.rb#29
  def user; end
end

# Integration Account
class Discordrb::IntegrationAccount
  # @return [IntegrationAccount] a new instance of IntegrationAccount
  #
  # source://discordrb//lib/discordrb/data/integration.rb#12
  def initialize(data); end

  # @return [Integer] this account's ID.
  #
  # source://discordrb//lib/discordrb/data/integration.rb#10
  def id; end

  # @return [String] this account's name.
  #
  # source://discordrb//lib/discordrb/data/integration.rb#7
  def name; end
end

# A Discord invite to a channel
class Discordrb::Invite
  # @return [Invite] a new instance of Invite
  #
  # source://discordrb//lib/discordrb/data/invite.rb#87
  def initialize(data, bot); end

  # Code based comparison
  #
  # source://discordrb//lib/discordrb/data/invite.rb#115
  def ==(other); end

  # @return [InviteChannel, Channel] the channel this invite references.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#48
  def channel; end

  # @return [String] this invite's code
  #
  # source://discordrb//lib/discordrb/data/invite.rb#70
  def code; end

  # @return [Time, nil] when this invite was created, or nil if it's unknown
  #
  # source://discordrb//lib/discordrb/data/invite.rb#84
  def created_at; end

  # Deletes this invite
  #
  # @param reason [String] The reason the invite is being deleted.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#121
  def delete(reason = T.unsafe(nil)); end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/invite.rb#128
  def inspect; end

  # @return [User, nil] the user that made this invite. May also be nil if the user can't be determined.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#58
  def inviter; end

  # @return [Integer, nil] the invites max age before it expires, or nil if it's unknown. If the max age is 0, the invite will never expire unless it's deleted.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#81
  def max_age; end

  # @return [Integer] the amount of uses left on this invite.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#54
  def max_uses; end

  # @return [Integer, nil] the amount of members in the server. Will be nil if it has not been resolved.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#73
  def member_count; end

  # @return [Integer, nil] the amount of online members in the server. Will be nil if it has not been resolved.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#77
  def online_member_count; end

  # @return [Integer, nil] the amount of online members in the server. Will be nil if it has not been resolved.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#77
  def online_user_count; end

  # Deletes this invite
  #
  # @param reason [String] The reason the invite is being deleted.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#121
  def revoke(reason = T.unsafe(nil)); end

  # @return [true, false] whether this invite is still valid.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#66
  def revoked; end

  # @return [true, false] whether this invite is still valid.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#66
  def revoked?; end

  # @return [InviteServer, Server] the server this invite references.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#51
  def server; end

  # @return [true, false] whether or not this invite grants temporary membership. If someone joins a server with this invite, they will be removed from the server when they go offline unless they've received a role.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#62
  def temporary; end

  # @return [true, false] whether or not this invite grants temporary membership. If someone joins a server with this invite, they will be removed from the server when they go offline unless they've received a role.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#62
  def temporary?; end

  # Creates an invite URL.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#133
  def url; end

  # @return [User, nil] the user that made this invite. May also be nil if the user can't be determined.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#58
  def user; end

  # @return [Integer, nil] the amount of members in the server. Will be nil if it has not been resolved.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#73
  def user_count; end

  # @return [Integer] the amount of uses left on this invite.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#54
  def uses; end
end

# A channel referenced by an invite. It has less data than regular channels, so it's a separate class
class Discordrb::InviteChannel
  include ::Discordrb::IDObject

  # @return [InviteChannel] a new instance of InviteChannel
  #
  # source://discordrb//lib/discordrb/data/invite.rb#15
  def initialize(data, bot); end

  # @return [String] this channel's name.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#9
  def name; end

  # @return [Integer] this channel's type (0: text, 1: private, 2: voice, 3: group).
  #
  # source://discordrb//lib/discordrb/data/invite.rb#12
  def type; end
end

# A server referenced to by an invite
class Discordrb::InviteServer
  include ::Discordrb::IDObject

  # @return [InviteServer] a new instance of InviteServer
  #
  # source://discordrb//lib/discordrb/data/invite.rb#36
  def initialize(data, bot); end

  # @return [String] this server's name.
  #
  # source://discordrb//lib/discordrb/data/invite.rb#29
  def name; end

  # @return [String, nil] the hash of the server's invite splash screen (for partnered servers) or nil if none is
  #   present
  #
  # source://discordrb//lib/discordrb/data/invite.rb#33
  def splash_hash; end
end

# The default debug logger used by discordrb.
#
# source://discordrb//lib/discordrb.rb#13
Discordrb::LOGGER = T.let(T.unsafe(nil), Discordrb::Logger)

# The format log timestamps should be in, in strftime format
#
# source://discordrb//lib/discordrb/logger.rb#5
Discordrb::LOG_TIMESTAMP_FORMAT = T.let(T.unsafe(nil), String)

# Logs debug messages
class Discordrb::Logger
  # Creates a new logger.
  #
  # @param fancy [true, false] Whether this logger uses fancy mode (ANSI escape codes to make the output colourful)
  # @param streams [Array<IO>, Array<#puts & #flush>] the streams the logger should write to.
  # @return [Logger] a new instance of Logger
  #
  # source://discordrb//lib/discordrb/logger.rb#21
  def initialize(fancy = T.unsafe(nil), streams = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def debug(message); end

  # Sets the logging mode to :debug
  #
  # @param value [true, false] Whether debug mode should be on. If it is off the mode will be set to :normal.
  #
  # source://discordrb//lib/discordrb/logger.rb#54
  def debug=(value); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def error(message); end

  # @return [true, false] whether this logger is in extra-fancy mode!
  #
  # source://discordrb//lib/discordrb/logger.rb#10
  def fancy=(_arg0); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def good(message); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def in(message); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def info(message); end

  # Logs an exception to the console.
  #
  # @param e [Exception] The exception to log.
  #
  # source://discordrb//lib/discordrb/logger.rb#83
  def log_exception(e); end

  # Sets the logging mode
  # Possible modes are:
  #  * :debug logs everything
  #  * :verbose logs everything except for debug messages
  #  * :normal logs useful information, warnings and errors
  #  * :quiet only logs warnings and errors
  #  * :silent logs nothing
  #
  # @param value [Symbol] What logging mode to use
  #
  # source://discordrb//lib/discordrb/logger.rb#66
  def mode=(value); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def out(message); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def ratelimit(message); end

  # @return [Array<IO>, Array<#puts & #flush>] the streams the logger should write to.
  #
  # source://discordrb//lib/discordrb/logger.rb#16
  def streams; end

  # @return [Array<IO>, Array<#puts & #flush>] the streams the logger should write to.
  #
  # source://discordrb//lib/discordrb/logger.rb#16
  def streams=(_arg0); end

  # @return [String, nil] The bot token to be redacted or nil if it shouldn't.
  #
  # source://discordrb//lib/discordrb/logger.rb#13
  def token=(_arg0); end

  # source://discordrb//lib/discordrb/logger.rb#47
  def warn(message); end

  private

  # source://discordrb//lib/discordrb/logger.rb#110
  def fancy_write(stream, message, mode, thread_name, timestamp); end

  # source://discordrb//lib/discordrb/logger.rb#115
  def simple_write(stream, message, mode, thread_name, timestamp); end

  # source://discordrb//lib/discordrb/logger.rb#90
  def write(message, mode); end
end

# The ANSI format code that makes something bold
#
# source://discordrb//lib/discordrb/logger.rb#44
Discordrb::Logger::FORMAT_BOLD = T.let(T.unsafe(nil), String)

# The ANSI format code that resets formatting
#
# source://discordrb//lib/discordrb/logger.rb#41
Discordrb::Logger::FORMAT_RESET = T.let(T.unsafe(nil), String)

# The modes this logger can have. This is probably useless unless you want to write your own Logger
#
# source://discordrb//lib/discordrb/logger.rb#29
Discordrb::Logger::MODES = T.let(T.unsafe(nil), Hash)

# A member is a user on a server. It differs from regular users in that it has roles, voice statuses and things like
# that.
class Discordrb::Member
  include ::Discordrb::MemberAttributes
  include ::Discordrb::PermissionCalculator

  # @raise [ArgumentError]
  # @return [Member] a new instance of Member
  #
  # source://discordrb//lib/discordrb/data/member.rb#59
  def initialize(data, server, bot); end

  # Adds one or more roles to this member.
  #
  # @param role [Role, Array<Role, String, Integer>, String, Integer] The role(s), or their ID(s), to add.
  # @param reason [String] The reason the user's roles are being changed.
  #
  # source://discordrb//lib/discordrb/data/member.rb#128
  def add_role(role, reason = T.unsafe(nil)); end

  # @return [true, false] if this user is a Nitro Booster of this server.
  #
  # source://discordrb//lib/discordrb/data/member.rb#79
  def boosting?; end

  # @return [ColourRGB, nil] the colour this member has.
  #
  # source://discordrb//lib/discordrb/data/member.rb#178
  def color; end

  # @return [Role, nil] the role this member is basing their colour on.
  #
  # source://discordrb//lib/discordrb/data/member.rb#169
  def color_role; end

  # @return [ColourRGB, nil] the colour this member has.
  #
  # source://discordrb//lib/discordrb/data/member.rb#178
  def colour; end

  # @return [Role, nil] the role this member is basing their colour on.
  #
  # source://discordrb//lib/discordrb/data/member.rb#169
  def colour_role; end

  # @return [true, false] whether this member is deafened server-wide.
  #
  # source://discordrb//lib/discordrb/data/member.rb#32
  def deaf; end

  # @return [true, false] whether this member is deafened server-wide.
  #
  # source://discordrb//lib/discordrb/data/member.rb#32
  def deafened?; end

  # @return [String] the name the user displays as (nickname if they have one, username otherwise)
  #
  # source://discordrb//lib/discordrb/data/member.rb#230
  def display_name; end

  # @return [Role] the highest role this member has.
  #
  # source://discordrb//lib/discordrb/data/member.rb#156
  def highest_role; end

  # @return [Role, nil] the role this member is being hoisted with.
  #
  # source://discordrb//lib/discordrb/data/member.rb#161
  def hoist_role; end

  # Overwriting inspect for debug purposes
  #
  # source://discordrb//lib/discordrb/data/member.rb#276
  def inspect; end

  # Adds and removes roles from a member.
  #
  # @example Remove the 'Member' role from a user, and add the 'Muted' role to them.
  #   to_add = server.roles.find {|role| role.name == 'Muted'}
  #   to_remove = server.roles.find {|role| role.name == 'Member'}
  #   member.modify_roles(to_add, to_remove)
  # @param add [Role, Array<Role>] The role(s) to add.
  # @param remove [Role, Array<Role>] The role(s) to remove.
  # @param reason [String] The reason the user's roles are being changed.
  #
  # source://discordrb//lib/discordrb/data/member.rb#116
  def modify_roles(add, remove, reason = T.unsafe(nil)); end

  # @return [true, false] whether this member is muted server-wide.
  #
  # source://discordrb//lib/discordrb/data/member.rb#27
  def mute; end

  # @return [true, false] whether this member is muted server-wide.
  #
  # source://discordrb//lib/discordrb/data/member.rb#27
  def muted?; end

  # @see Member#set_nick
  #
  # source://discordrb//lib/discordrb/data/member.rb#206
  def nick=(nick); end

  # @see Member#set_nick
  #
  # source://discordrb//lib/discordrb/data/member.rb#206
  def nickname=(nick); end

  # @return [true, false] whether this member is the server owner.
  #
  # source://discordrb//lib/discordrb/data/member.rb#84
  def owner?; end

  # Removes one or more roles from this member.
  #
  # @param role [Role, Array<Role>] The role(s) to remove.
  # @param reason [String] The reason the user's roles are being changed.
  #
  # source://discordrb//lib/discordrb/data/member.rb#143
  def remove_role(role, reason = T.unsafe(nil)); end

  # @param role [Role, String, Integer] the role to check or its ID.
  # @return [true, false] whether this member has the specified role.
  #
  # source://discordrb//lib/discordrb/data/member.rb#90
  def role?(role); end

  # @see Member#set_roles
  #
  # source://discordrb//lib/discordrb/data/member.rb#96
  def roles=(role); end

  # @return [true, false] whether this member has deafened themselves.
  #
  # source://discordrb//lib/discordrb/data/member.rb#42
  def self_deaf; end

  # @return [true, false] whether this member has deafened themselves.
  #
  # source://discordrb//lib/discordrb/data/member.rb#42
  def self_deafened?; end

  # @return [true, false] whether this member has muted themselves.
  #
  # source://discordrb//lib/discordrb/data/member.rb#37
  def self_mute; end

  # @return [true, false] whether this member has muted themselves.
  #
  # source://discordrb//lib/discordrb/data/member.rb#37
  def self_muted?; end

  # Server deafens this member.
  #
  # source://discordrb//lib/discordrb/data/member.rb#186
  def server_deafen; end

  # Server mutes this member.
  #
  # source://discordrb//lib/discordrb/data/member.rb#196
  def server_mute; end

  # Server undeafens this member.
  #
  # source://discordrb//lib/discordrb/data/member.rb#191
  def server_undeafen; end

  # Server unmutes this member.
  #
  # source://discordrb//lib/discordrb/data/member.rb#201
  def server_unmute; end

  # Sets or resets this member's nickname. Requires the Change Nickname permission for the bot itself and Manage
  # Nicknames for other users.
  #
  # @param nick [String, nil] The string to set the nickname to, or nil if it should be reset.
  # @param reason [String] The reason the user's nickname is being changed.
  #
  # source://discordrb//lib/discordrb/data/member.rb#216
  def set_nick(nick, reason = T.unsafe(nil)); end

  # Sets or resets this member's nickname. Requires the Change Nickname permission for the bot itself and Manage
  # Nicknames for other users.
  #
  # @param nick [String, nil] The string to set the nickname to, or nil if it should be reset.
  # @param reason [String] The reason the user's nickname is being changed.
  #
  # source://discordrb//lib/discordrb/data/member.rb#216
  def set_nickname(nick, reason = T.unsafe(nil)); end

  # Bulk sets a member's roles.
  #
  # @param role [Role, Array<Role>] The role(s) to set.
  # @param reason [String] The reason the user's roles are being changed.
  #
  # source://discordrb//lib/discordrb/data/member.rb#103
  def set_roles(role, reason = T.unsafe(nil)); end

  # Update this member's boosting timestamp
  #
  # @note For internal user only.
  #
  # source://discordrb//lib/discordrb/data/member.rb#257
  def update_boosting_since(time); end

  # Update this member
  #
  # @note For internal use only.
  #
  # source://discordrb//lib/discordrb/data/member.rb#264
  def update_data(data); end

  # Update this member's nick
  #
  # @note For internal use only.
  #
  # source://discordrb//lib/discordrb/data/member.rb#250
  def update_nick(nick); end

  # Update this member's roles
  #
  # @note For internal use only.
  #
  # source://discordrb//lib/discordrb/data/member.rb#237
  def update_roles(role_ids); end

  # @return [Channel] the voice channel this member is in.
  #
  # source://discordrb//lib/discordrb/data/member.rb#47
  def voice_channel; end

  private

  # Utility method to get a list of role IDs from one role or an array of roles
  #
  # source://discordrb//lib/discordrb/data/member.rb#283
  def role_id_array(role); end

  # Utility method to get data out of this member's voice state
  #
  # source://discordrb//lib/discordrb/data/member.rb#292
  def voice_state_attribute(name); end
end

# Mixin for the attributes members and private members should have
module Discordrb::MemberAttributes
  # @return [Time, nil] when this member boosted this server, `nil` if they haven't.
  #
  # source://discordrb//lib/discordrb/data/member.rb#10
  def boosting_since; end

  # @return [Time] when this member joined the server.
  #
  # source://discordrb//lib/discordrb/data/member.rb#7
  def joined_at; end

  # @return [String, nil] the nickname this member has, or `nil` if it has none.
  #
  # source://discordrb//lib/discordrb/data/member.rb#13
  def nick; end

  # @return [String, nil] the nickname this member has, or `nil` if it has none.
  def nickname; end

  # @return [Array<Role>] the roles this member has.
  #
  # source://discordrb//lib/discordrb/data/member.rb#17
  def roles; end

  # @return [Server] the server this member is on.
  #
  # source://discordrb//lib/discordrb/data/member.rb#20
  def server; end
end

# A message on Discord that was sent to a text channel
class Discordrb::Message
  include ::Discordrb::IDObject

  # @return [Message] a new instance of Message
  #
  # source://discordrb//lib/discordrb/data/message.rb#74
  def initialize(data, bot); end

  # @return [Array<Attachment>] the files attached to this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#36
  def attachments; end

  # @return [Member, User] the user that sent this message. (Will be a {Member} most of the time, it should only be a
  #   {User} for old messages when the author has left the server since then)
  #
  # source://discordrb//lib/discordrb/data/message.rb#15
  def author; end

  # Add an {Await} for a message with the same user and channel.
  #
  # @deprecated Will be changed to blocking behavior in v4.0. Use {#await!} instead.
  # @see Bot#add_await
  #
  # source://discordrb//lib/discordrb/data/message.rb#215
  def await(key, attributes = T.unsafe(nil), &block); end

  # Add a blocking {Await} for a message with the same user and channel.
  #
  # @see Bot#add_await!
  #
  # source://discordrb//lib/discordrb/data/message.rb#221
  def await!(attributes = T.unsafe(nil), &block); end

  # @return [Channel] the channel in which this message was sent.
  #
  # source://discordrb//lib/discordrb/data/message.rb#20
  def channel; end

  # @return [String] the content of this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#9
  def content; end

  # Reacts to a message.
  #
  # @param reaction [String, #to_reaction] the unicode emoji or {Emoji}
  #
  # source://discordrb//lib/discordrb/data/message.rb#263
  def create_reaction(reaction); end

  # Deletes this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#193
  def delete(reason = T.unsafe(nil)); end

  # Removes all reactions from this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#303
  def delete_all_reactions; end

  # Deletes this client's reaction on this message.
  #
  # @param reaction [String, #to_reaction] the reaction to remove
  #
  # source://discordrb//lib/discordrb/data/message.rb#297
  def delete_own_reaction(reaction); end

  # Deletes a reaction made by a user on this message.
  #
  # @param user [User, String, Integer] the user or user ID who used this reaction
  # @param reaction [String, #to_reaction] the reaction to remove
  #
  # source://discordrb//lib/discordrb/data/message.rb#290
  def delete_reaction(user, reaction); end

  # Edits this message to have the specified content instead.
  # You can only edit your own messages.
  #
  # @param new_content [String] the new content the message should have.
  # @param new_embed [Hash, Discordrb::Webhooks::Embed, nil] The new embed the message should have. If `nil` the message will be changed to have no embed.
  # @return [Message] the resulting message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#187
  def edit(new_content, new_embed = T.unsafe(nil)); end

  # @return [Time] the timestamp at which this message was edited. `nil` if the message was never edited.
  #
  # source://discordrb//lib/discordrb/data/message.rb#26
  def edit_timestamp; end

  # @return [true, false] whether the message was edited or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#52
  def edited; end

  # @return [true, false] whether the message was edited or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#52
  def edited?; end

  # @return [Time] the timestamp at which this message was edited. `nil` if the message was never edited.
  #
  # source://discordrb//lib/discordrb/data/message.rb#26
  def edited_timestamp; end

  # @return [Array<Embed>] the embed objects contained in this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#39
  def embeds; end

  # @return [Array<Emoji>] the emotes that were used/mentioned in this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#236
  def emoji; end

  # Check if any emoji were used in this message.
  #
  # @return [true, false] whether or not any emoji were used
  #
  # source://discordrb//lib/discordrb/data/message.rb#245
  def emoji?; end

  # @return [true, false] whether this message was sent by the current {Bot}.
  #
  # source://discordrb//lib/discordrb/data/message.rb#226
  def from_bot?; end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/message.rb#308
  def inspect; end

  # @return [String] a URL that a user can use to navigate to this message in the client
  #
  # source://discordrb//lib/discordrb/data/message.rb#313
  def jump_link; end

  # @return [String] a URL that a user can use to navigate to this message in the client
  #
  # source://discordrb//lib/discordrb/data/message.rb#313
  def link; end

  # @return [true, false] whether the message mentioned everyone or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#56
  def mention_everyone; end

  # @return [true, false] whether the message mentioned everyone or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#56
  def mention_everyone?; end

  # @return [Array<User>] the users that were mentioned in this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#30
  def mentions; end

  # @return [true, false] whether the message mentioned everyone or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#56
  def mentions_everyone?; end

  # Returns the reactions made by the current bot or user.
  #
  # @return [Array<Reaction>] the reactions
  #
  # source://discordrb//lib/discordrb/data/message.rb#257
  def my_reactions; end

  # @return [String] used for validating a message was sent.
  #
  # source://discordrb//lib/discordrb/data/message.rb#49
  def nonce; end

  # Pins this message
  #
  # source://discordrb//lib/discordrb/data/message.rb#199
  def pin(reason = T.unsafe(nil)); end

  # @return [true, false] whether the message is pinned or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#61
  def pinned; end

  # @return [true, false] whether the message is pinned or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#61
  def pinned?; end

  # Reacts to a message.
  #
  # @param reaction [String, #to_reaction] the unicode emoji or {Emoji}
  #
  # source://discordrb//lib/discordrb/data/message.rb#263
  def react(reaction); end

  # Returns the list of users who reacted with a certain reaction.
  #
  # @example Get all the users that reacted with a thumbs up.
  #   thumbs_up_reactions = message.reacted_with("\u{1F44D}")
  # @param reaction [String, #to_reaction] the unicode emoji or {Emoji}
  # @param limit [Integer] the limit of how many users to retrieve. `nil` will return all users
  # @return [Array<User>] the users who used this reaction
  #
  # source://discordrb//lib/discordrb/data/message.rb#277
  def reacted_with(reaction, limit: T.unsafe(nil)); end

  # @return [Array<Reaction>] the reaction objects contained in this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#42
  def reactions; end

  # Check if any reactions were used in this message.
  #
  # @return [true, false] whether or not this message has reactions
  #
  # source://discordrb//lib/discordrb/data/message.rb#251
  def reactions?; end

  # @return [Message, nil] the Message this Message was sent in reply to.
  #
  # source://discordrb//lib/discordrb/data/message.rb#326
  def referenced_message; end

  # Replies to this message with the specified content.
  #
  # @deprecated Please use {#respond}.
  # @see Channel#send_message
  #
  # source://discordrb//lib/discordrb/data/message.rb#157
  def reply(content); end

  # Sends a message to this channel.
  #
  # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param mention_user [true, false] Whether the user that is being replied to should be pinged by the reply.
  # @return [Message] the message that was sent.
  #
  # source://discordrb//lib/discordrb/data/message.rb#169
  def reply!(content, tts: T.unsafe(nil), embed: T.unsafe(nil), attachments: T.unsafe(nil), allowed_mentions: T.unsafe(nil), mention_user: T.unsafe(nil)); end

  # Whether or not this message was sent in reply to another message
  #
  # @return [true, false]
  #
  # source://discordrb//lib/discordrb/data/message.rb#321
  def reply?; end

  # Sends a message to this channel.
  #
  # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
  # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
  # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
  # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
  # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
  # @param message_reference [Message, String, Integer, nil] The message, or message ID, to reply to if any.
  # @return [Message] the message that was sent.
  #
  # source://discordrb//lib/discordrb/data/message.rb#178
  def respond(content, tts = T.unsafe(nil), embed = T.unsafe(nil), attachments = T.unsafe(nil), allowed_mentions = T.unsafe(nil), message_reference = T.unsafe(nil)); end

  # @return [Array<Role>] the roles that were mentioned in this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#33
  def role_mentions; end

  # @return [Server, nil] the server in which this message was sent.
  #
  # source://discordrb//lib/discordrb/data/message.rb#65
  def server; end

  # @return [String] the content of this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#9
  def text; end

  # @return [Time] the timestamp at which this message was sent.
  #
  # source://discordrb//lib/discordrb/data/message.rb#23
  def timestamp; end

  # @return [String] the content of this message.
  #
  # source://discordrb//lib/discordrb/data/message.rb#9
  def to_s; end

  # @return [true, false] whether the message used Text-To-Speech (TTS) or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#45
  def tts; end

  # @return [true, false] whether the message used Text-To-Speech (TTS) or not.
  #
  # source://discordrb//lib/discordrb/data/message.rb#45
  def tts?; end

  # Unpins this message
  #
  # source://discordrb//lib/discordrb/data/message.rb#206
  def unpin(reason = T.unsafe(nil)); end

  # @return [Member, User] the user that sent this message. (Will be a {Member} most of the time, it should only be a
  #   {User} for old messages when the author has left the server since then)
  #
  # source://discordrb//lib/discordrb/data/message.rb#15
  def user; end

  # @return [true, false] whether this message has been sent over a webhook.
  #
  # source://discordrb//lib/discordrb/data/message.rb#231
  def webhook?; end

  # @return [Integer, nil] the webhook ID that sent this message, or `nil` if it wasn't sent through a webhook.
  #
  # source://discordrb//lib/discordrb/data/message.rb#68
  def webhook_id; end

  # @return [Member, User] the user that sent this message. (Will be a {Member} most of the time, it should only be a
  #   {User} for old messages when the author has left the server since then)
  #
  # source://discordrb//lib/discordrb/data/message.rb#15
  def writer; end
end

# The discriminator that webhook user accounts have.
#
# source://discordrb//lib/discordrb/data/message.rb#71
Discordrb::Message::ZERO_DISCRIM = T.let(T.unsafe(nil), String)

# Gateway packet opcodes
module Discordrb::Opcodes; end

# **Received** when Discord dispatches an event to the gateway (like MESSAGE_CREATE, PRESENCE_UPDATE or whatever).
# The vast majority of received packets will have this opcode.
#
# source://discordrb//lib/discordrb/gateway.rb#33
Discordrb::Opcodes::DISPATCH = T.let(T.unsafe(nil), Integer)

# **Two-way**: The client has to send a packet with this opcode every ~40 seconds (actual interval specified in
# READY or RESUMED) and the current sequence number, otherwise it will be disconnected from the gateway. In certain
# cases Discord may also send one, specifically if two clients are connected at once.
#
# source://discordrb//lib/discordrb/gateway.rb#38
Discordrb::Opcodes::HEARTBEAT = T.let(T.unsafe(nil), Integer)

# **Received**: Returned after a heartbeat was sent to the server. This allows clients to identify and deal with
# zombie connections that don't dispatch any events anymore.
#
# source://discordrb//lib/discordrb/gateway.rb#87
Discordrb::Opcodes::HEARTBEAT_ACK = T.let(T.unsafe(nil), Integer)

# **Received**: Sent immediately for any opened connection; tells the client to start heartbeating early on, so the
# server can safely search for a session server to handle the connection without the connection being terminated.
# As a side-effect, large bots are less likely to disconnect because of very large READY parse times.
#
# source://discordrb//lib/discordrb/gateway.rb#83
Discordrb::Opcodes::HELLO = T.let(T.unsafe(nil), Integer)

# **Sent**: This is one of the two possible ways to initiate a session after connecting to the gateway. It
# should contain the authentication token along with other stuff the server has to know right from the start, such
# as large_threshold and, for older gateway versions, the desired version.
#
# source://discordrb//lib/discordrb/gateway.rb#43
Discordrb::Opcodes::IDENTIFY = T.let(T.unsafe(nil), Integer)

# **Received**: Sent by Discord when the session becomes invalid for any reason. This may include improperly
# resuming existing sessions, attempting to start sessions with invalid data, or something else entirely. The client
# should handle this by simply starting a new session.
#
# source://discordrb//lib/discordrb/gateway.rb#78
Discordrb::Opcodes::INVALIDATE_SESSION = T.let(T.unsafe(nil), Integer)

# **Sent**: Packets with this opcode are used to change the user's status and played game. (Sending this is never
# necessary for a gateway client to behave correctly)
#
# source://discordrb//lib/discordrb/gateway.rb#47
Discordrb::Opcodes::PRESENCE = T.let(T.unsafe(nil), Integer)

# **Received**: Discord sends this opcode to indicate that the client should reconnect to a different gateway
# server because the old one is currently being decommissioned. Counterintuitively, this opcode also invalidates the
# session - the client has to create an entirely new session with the new gateway instead of resuming the old one.
#
# source://discordrb//lib/discordrb/gateway.rb#67
Discordrb::Opcodes::RECONNECT = T.let(T.unsafe(nil), Integer)

# **Sent**: This opcode identifies packets used to retrieve a list of members from a particular server. There is
# also a REST endpoint available for this, but it is inconvenient to use because the client has to implement
# pagination itself, whereas sending this opcode lets Discord handle the pagination and the client can just add
# members when it receives them. (Sending this is never necessary for a gateway client to behave correctly)
#
# source://discordrb//lib/discordrb/gateway.rb#73
Discordrb::Opcodes::REQUEST_MEMBERS = T.let(T.unsafe(nil), Integer)

# **Sent**: This is the other of two possible ways to initiate a gateway session (other than {IDENTIFY}). Rather
# than starting an entirely new session, it resumes an existing session by replaying all events from a given
# sequence number. It should be used to recover from a connection error or anything like that when the session is
# still valid - sending this with an invalid session will cause an error to occur.
#
# source://discordrb//lib/discordrb/gateway.rb#62
Discordrb::Opcodes::RESUME = T.let(T.unsafe(nil), Integer)

# **Sent**: This opcode is used to ping a voice server, whatever that means. The functionality of this opcode isn't
# known well but non-user clients should never send it.
#
# source://discordrb//lib/discordrb/gateway.rb#56
Discordrb::Opcodes::VOICE_PING = T.let(T.unsafe(nil), Integer)

# **Sent**: Packets with this opcode are used to change a user's voice state (mute/deaf/unmute/undeaf/etc.). It is
# also used to connect to a voice server in the first place. (Sending this is never necessary for a gateway client
# to behave correctly)
#
# source://discordrb//lib/discordrb/gateway.rb#52
Discordrb::Opcodes::VOICE_STATE = T.let(T.unsafe(nil), Integer)

# A permissions overwrite, when applied to channels describes additional
# permissions a member needs to perform certain actions in context.
class Discordrb::Overwrite
  # Creates a new Overwrite object
  #
  # @example Create an overwrite for a role that can mention everyone, send TTS messages, but can't create instant invites
  #   allow = Discordrb::Permissions.new
  #   allow.can_mention_everyone = true
  #   allow.can_send_tts_messages = true
  #
  #   deny = Discordrb::Permissions.new
  #   deny.can_create_instant_invite = true
  #
  #   # Find some role by name
  #   role = server.roles.find { |r| r.name == 'some role' }
  #
  #   Overwrite.new(role, allow: allow, deny: deny)
  # @example Create an overwrite by ID and permissions bits
  #   Overwrite.new(120571255635181568, type: 'member', allow: 1024, deny: 0)
  # @param type [String] the type of object this overwrite is for (only required if object is an Integer)
  # @param deny [Integer, Permissions] denied permissions for this overwrite, by bits or a Permissions object
  # @param allow [Integer, Permissions] allowed permissions for this overwrite, by bits or a Permissions object
  # @param object [Integer, #id] the ID or object this overwrite is for
  # @raise [ArgumentError] if type is not :member or :role
  # @return [Overwrite] a new instance of Overwrite
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#39
  def initialize(object = T.unsafe(nil), type: T.unsafe(nil), allow: T.unsafe(nil), deny: T.unsafe(nil)); end

  # Comparison by attributes [:id, :type, :allow, :deny]
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#61
  def ==(other); end

  # @return [Permissions] allowed permissions for this overwrite type
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#14
  def allow; end

  # @return [Permissions] allowed permissions for this overwrite type
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#14
  def allow=(_arg0); end

  # @return [Permissions] denied permissions for this overwrite type
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#17
  def deny; end

  # @return [Permissions] denied permissions for this overwrite type
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#17
  def deny=(_arg0); end

  # @return [Integer] ID of the thing associated with this overwrite type
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#8
  def id; end

  # @return [Integer] ID of the thing associated with this overwrite type
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#8
  def id=(_arg0); end

  # @return [Hash] hash representation of an overwrite
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#93
  def to_hash; end

  # @return [Symbol] either :role or :member
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#11
  def type; end

  # @return [Symbol] either :role or :member
  #
  # source://discordrb//lib/discordrb/data/overwrite.rb#11
  def type=(_arg0); end

  class << self
    # @return [Overwrite] create an overwrite from a hash payload
    #
    # source://discordrb//lib/discordrb/data/overwrite.rb#71
    def from_hash(data); end

    # @return [Overwrite] copies an overwrite from another Overwrite
    #
    # source://discordrb//lib/discordrb/data/overwrite.rb#82
    def from_other(other); end
  end
end

# Utility class for wrapping paginated endpoints. It is [Enumerable](https://ruby-doc.org/core-2.5.1/Enumerable.html),
# similar to an `Array`, so most of the same methods can be used to filter the results of the request
# that it wraps. If you simply want an array of all of the results, `#to_a` can be called.
class Discordrb::Paginator
  include ::Enumerable

  # Creates a new {Paginator}
  #
  # @param limit [Integer] the maximum number of items to request before stopping
  # @param direction [:up, :down] the order in which results are returned in
  # @return [Paginator] a new instance of Paginator
  # @yield [Array, nil] the last page of results, or nil if this is the first iteration.
  #   This should be used to request the next page of results.
  # @yieldreturn [Array] the next page of results
  #
  # source://discordrb//lib/discordrb/paginator.rb#16
  def initialize(limit, direction, &block); end

  # Yields every item produced by the wrapped request, until it returns
  # no more results or the configured `limit` is reached.
  #
  # source://discordrb//lib/discordrb/paginator.rb#25
  def each; end

  private

  # Whether the paginator limit has been exceeded
  #
  # source://discordrb//lib/discordrb/paginator.rb#51
  def limit_check; end
end

# Mixin to calculate resulting permissions from overrides etc.
module Discordrb::PermissionCalculator
  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_add_reactions?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_administrate?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_administrator?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_attach_files?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_ban_members?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_change_nickname?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_connect?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_create_instant_invite?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_deafen_members?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_embed_links?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_kick_members?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_manage_channels?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_manage_emojis?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_manage_messages?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_manage_nicknames?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_manage_roles?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_manage_server?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_manage_webhooks?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_mention_everyone?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_move_members?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_mute_members?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_priority_speaker?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_read_message_history?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_read_messages?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_send_messages?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_send_tts_messages?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_speak?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_stream?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_use_external_emoji?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_use_voice_activity?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_view_audit_log?(channel = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/permissions.rb#172
  def can_view_server_insights?(channel = T.unsafe(nil)); end

  # Checks whether this user has a particular permission defined (i.e. not implicit, through for example
  # Manage Roles)
  #
  # @example Check if a member has the Manage Channels permission defined in the server.
  #   has_manage_channels = member.defined_permission?(:manage_channels)
  # @param action [Symbol] The permission that should be checked. See also {Permissions::FLAGS} for a list.
  # @param channel [Channel, nil] If channel overrides should be checked too, this channel specifies where the overrides should be checked.
  # @return [true, false] whether or not this user has the permission defined.
  #
  # source://discordrb//lib/discordrb/permissions.rb#156
  def defined_permission?(action, channel = T.unsafe(nil)); end

  # Checks whether this user can do the particular action, regardless of whether it has the permission defined,
  # through for example being the server owner or having the Manage Roles permission
  #
  # @example Check if the bot can send messages to a specific channel in a server.
  #   bot_profile = bot.profile.on(event.server)
  #   can_send_messages = bot_profile.permission?(:send_messages, channel)
  # @param action [Symbol] The permission that should be checked. See also {Permissions::FLAGS} for a list.
  # @param channel [Channel, nil] If channel overrides should be checked too, this channel specifies where the overrides should be checked.
  # @return [true, false] whether or not this user has the permission.
  #
  # source://discordrb//lib/discordrb/permissions.rb#135
  def permission?(action, channel = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/permissions.rb#181
  def defined_role_permission?(action, channel); end

  # source://discordrb//lib/discordrb/permissions.rb#203
  def permission_overwrite(action, channel, id); end
end

# List of permissions Discord uses
class Discordrb::Permissions
  # Create a new Permissions object either as a blank slate to add permissions to (for example for
  #   {Channel#define_overwrite}) or from existing bit data to read out.
  #
  # @example Create a permissions object that could allow/deny read messages, connect, and speak by setting flags
  #   permission = Permissions.new
  #   permission.can_read_messages = true
  #   permission.can_connect = true
  #   permission.can_speak = true
  # @example Create a permissions object that could allow/deny read messages, connect, and speak by an array of symbols
  #   Permissions.new [:read_messages, :connect, :speak]
  # @param bits [Integer, Array<Symbol>] The permission bits that should be set from the beginning, or an array of permission flag symbols
  # @param writer [RoleWriter] The writer that should be used to update data when a permission is set.
  # @return [Permissions] a new instance of Permissions
  #
  # source://discordrb//lib/discordrb/permissions.rb#106
  def initialize(bits = T.unsafe(nil), writer = T.unsafe(nil)); end

  # Comparison based on permission bits
  #
  # source://discordrb//lib/discordrb/permissions.rb#119
  def ==(other); end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def add_reactions; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def administrate; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def administrator; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def attach_files; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def ban_members; end

  # Returns the value of attribute bits.
  #
  # source://discordrb//lib/discordrb/permissions.rb#61
  def bits; end

  # Set the raw bitset of this permission object
  #
  # @param bits [Integer] A number whose binary representation is the desired bitset.
  #
  # source://discordrb//lib/discordrb/permissions.rb#65
  def bits=(bits); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_add_reactions=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_administrate=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_administrator=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_attach_files=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_ban_members=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_change_nickname=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_connect=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_create_instant_invite=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_deafen_members=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_embed_links=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_kick_members=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_manage_channels=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_manage_emojis=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_manage_messages=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_manage_nicknames=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_manage_roles=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_manage_server=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_manage_webhooks=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_mention_everyone=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_move_members=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_mute_members=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_priority_speaker=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_read_message_history=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_read_messages=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_send_messages=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_send_tts_messages=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_speak=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_stream=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_use_external_emoji=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_use_voice_activity=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_view_audit_log=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#45
  def can_view_server_insights=(value); end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def change_nickname; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def connect; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def create_instant_invite; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def deafen_members; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def embed_links; end

  # Initialize the instance variables based on the bitset.
  #
  # source://discordrb//lib/discordrb/permissions.rb#71
  def init_vars; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def kick_members; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def manage_channels; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def manage_emojis; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def manage_messages; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def manage_nicknames; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def manage_roles; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def manage_server; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def manage_webhooks; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def mention_everyone; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def move_members; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def mute_members; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def priority_speaker; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def read_message_history; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def read_messages; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def send_messages; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def send_tts_messages; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def speak; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def stream; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def use_external_emoji; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def use_voice_activity; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def view_audit_log; end

  # source://discordrb//lib/discordrb/permissions.rb#43
  def view_server_insights; end

  class << self
    # Return the corresponding bits for an array of permission flag symbols.
    # This is a class method that can be used to calculate bits instead
    # of instancing a new Permissions object.
    #
    # @example Get the bits for permissions that could allow/deny read messages, connect, and speak
    #   Permissions.bits [:read_messages, :connect, :speak] #=> 3146752
    # @param list [Array<Symbol>]
    # @return [Integer] the computed permissions integer
    #
    # source://discordrb//lib/discordrb/permissions.rb#85
    def bits(list); end
  end
end

# This hash maps bit positions to logical permissions.
#
# source://discordrb//lib/discordrb/permissions.rb#7
Discordrb::Permissions::FLAGS = T.let(T.unsafe(nil), Hash)

# This class is a special variant of User that represents the bot's user profile (things like own username and the avatar).
# It can be accessed using {Bot#profile}.
class Discordrb::Profile < ::Discordrb::User
  # Changes the bot's avatar.
  #
  # @param avatar [String, #read] A JPG file to be used as the avatar, either
  #   something readable (e.g. File Object) or as a data URL.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#24
  def avatar=(avatar); end

  # Sets the user status setting to Do Not Disturb.
  #
  # @note Only usable on User accounts.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#59
  def busy; end

  # Whether or not the user is the bot. The Profile can only ever be the bot user, so this always returns true.
  #
  # @return [true]
  #
  # source://discordrb//lib/discordrb/data/profile.rb#9
  def current_bot?; end

  # Sets the user status setting to Do Not Disturb.
  #
  # @note Only usable on User accounts.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#59
  def dnd; end

  # Sets the user status setting to Idle.
  #
  # @note Only usable on User accounts.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#53
  def idle; end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/profile.rb#72
  def inspect; end

  # Sets the user status setting to Invisible.
  #
  # @note Only usable on User accounts.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#67
  def invisible; end

  # Sets the bot's username.
  #
  # @param username [String] The new username.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#15
  def name=(username); end

  # Sets the user status setting to Online.
  #
  # @note Only usable on User accounts.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#47
  def online; end

  # Updates the cached profile data with the new one.
  #
  # @note For internal use only.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#40
  def update_data(new_data); end

  # Sets the bot's username.
  #
  # @param username [String] The new username.
  #
  # source://discordrb//lib/discordrb/data/profile.rb#15
  def username=(username); end

  private

  # source://discordrb//lib/discordrb/data/profile.rb#83
  def update_profile_data(new_data); end

  # Internal handler for updating the user's status setting
  #
  # source://discordrb//lib/discordrb/data/profile.rb#79
  def update_profile_status_setting(status); end
end

# A reaction to a message.
class Discordrb::Reaction
  # @return [Reaction] a new instance of Reaction
  #
  # source://discordrb//lib/discordrb/data/reaction.rb#19
  def initialize(data); end

  # @return [Integer] the amount of users who have reacted with this reaction
  #
  # source://discordrb//lib/discordrb/data/reaction.rb#7
  def count; end

  # @return [Integer] the ID of the emoji, if it was custom
  #
  # source://discordrb//lib/discordrb/data/reaction.rb#14
  def id; end

  # @return [true, false] whether the current bot or user used this reaction
  #
  # source://discordrb//lib/discordrb/data/reaction.rb#10
  def me; end

  # @return [true, false] whether the current bot or user used this reaction
  #
  # source://discordrb//lib/discordrb/data/reaction.rb#10
  def me?; end

  # @return [String] the name or unicode representation of the emoji
  #
  # source://discordrb//lib/discordrb/data/reaction.rb#17
  def name; end

  # Converts this Reaction into a string that can be sent back to Discord in other reaction endpoints.
  # If ID is present, it will be rendered into the form of `name:id`.
  #
  # @return [String] the name of this reaction, including the ID if it is a custom emoji
  #
  # source://discordrb//lib/discordrb/data/reaction.rb#29
  def to_s; end
end

# Recipients are members on private channels - they exist for completeness purposes, but all
# the attributes will be empty.
class Discordrb::Recipient
  include ::Discordrb::MemberAttributes

  # @raise [ArgumentError]
  # @return [Recipient] a new instance of Recipient
  #
  # source://discordrb//lib/discordrb/data/recipient.rb#13
  def initialize(user, channel, bot); end

  # @return [Channel] the private channel this recipient is the recipient of.
  #
  # source://discordrb//lib/discordrb/data/recipient.rb#10
  def channel; end

  # Overwriting inspect for debug purposes
  #
  # source://discordrb//lib/discordrb/data/recipient.rb#30
  def inspect; end
end

# A Discord role that contains permissions and applies to certain users
class Discordrb::Role
  include ::Discordrb::IDObject

  # @return [Role] a new instance of Role
  #
  # source://discordrb//lib/discordrb/data/role.rb#56
  def initialize(data, bot, server = T.unsafe(nil)); end

  # @return [ColourRGB] the role colour
  #
  # source://discordrb//lib/discordrb/data/role.rb#29
  def color; end

  # Sets the role colour to something new
  #
  # @param colour [ColourRGB] The new colour
  #
  # source://discordrb//lib/discordrb/data/role.rb#127
  def color=(colour); end

  # @return [ColourRGB] the role colour
  #
  # source://discordrb//lib/discordrb/data/role.rb#29
  def colour; end

  # Sets the role colour to something new
  #
  # @param colour [ColourRGB] The new colour
  #
  # source://discordrb//lib/discordrb/data/role.rb#127
  def colour=(colour); end

  # Deletes this role. This cannot be undone without recreating the role!
  #
  # @param reason [String] the reason for this role's deletion
  #
  # source://discordrb//lib/discordrb/data/role.rb#169
  def delete(reason = T.unsafe(nil)); end

  # @return [true, false] whether or not this role should be displayed separately from other users
  #
  # source://discordrb//lib/discordrb/data/role.rb#18
  def hoist; end

  # Changes whether or not this role is displayed at the top of the user list
  #
  # @param hoist [true, false] The value it should be changed to
  #
  # source://discordrb//lib/discordrb/data/role.rb#115
  def hoist=(hoist); end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/role.rb#175
  def inspect; end

  # @return [true, false] whether or not this role is managed by an integration or a bot
  #
  # source://discordrb//lib/discordrb/data/role.rb#21
  def managed; end

  # @return [true, false] whether or not this role is managed by an integration or a bot
  #
  # source://discordrb//lib/discordrb/data/role.rb#21
  def managed?; end

  # @note This requests a member chunk if it hasn't for the server before, which may be slow initially
  # @return [Array<Member>] an array of members who have this role.
  #
  # source://discordrb//lib/discordrb/data/role.rb#79
  def members; end

  # @return [String] a string that will mention this role, if it is mentionable.
  #
  # source://discordrb//lib/discordrb/data/role.rb#73
  def mention; end

  # @return [true, false] whether this role can be mentioned using a role mention
  #
  # source://discordrb//lib/discordrb/data/role.rb#25
  def mentionable; end

  # Changes whether or not this role can be mentioned
  #
  # @param mentionable [true, false] The value it should be changed to
  #
  # source://discordrb//lib/discordrb/data/role.rb#121
  def mentionable=(mentionable); end

  # @return [true, false] whether this role can be mentioned using a role mention
  #
  # source://discordrb//lib/discordrb/data/role.rb#25
  def mentionable?; end

  # Moves this role above another role in the list.
  #
  # @param other [Role, String, Integer, nil] The role, or its ID, above which this role should be moved. If it is `nil`,
  #   the role will be moved above the @everyone role.
  # @return [Integer] the new position of this role
  #
  # source://discordrb//lib/discordrb/data/role.rb#152
  def move_above(other = T.unsafe(nil)); end

  # @return [String] this role's name ("new role" if it hasn't been changed)
  #
  # source://discordrb//lib/discordrb/data/role.rb#12
  def name; end

  # Sets the role name to something new
  #
  # @param name [String] The name that should be set
  #
  # source://discordrb//lib/discordrb/data/role.rb#109
  def name=(name); end

  # Changes this role's permissions to a fixed bitfield. This allows setting multiple permissions at once with just
  # one API call.
  #
  # Information on how this bitfield is structured can be found at
  # https://discord.com/developers/docs/topics/permissions.
  #
  # @example Remove all permissions from a role
  #   role.packed = 0
  # @param packed [Integer] A bitfield with the desired permissions value.
  # @param update_perms [true, false] Whether the internal data should also be updated. This should always be true
  #   when calling externally.
  #
  # source://discordrb//lib/discordrb/data/role.rb#143
  def packed=(packed, update_perms = T.unsafe(nil)); end

  # @return [Permissions] this role's permissions.
  #
  # source://discordrb//lib/discordrb/data/role.rb#9
  def permissions; end

  # @return [Integer] the position of this role in the hierarchy
  #
  # source://discordrb//lib/discordrb/data/role.rb#33
  def position; end

  # @return [Server] the server this role belongs to
  #
  # source://discordrb//lib/discordrb/data/role.rb#15
  def server; end

  # Moves this role above another role in the list.
  #
  # @param other [Role, String, Integer, nil] The role, or its ID, above which this role should be moved. If it is `nil`,
  #   the role will be moved above the @everyone role.
  # @return [Integer] the new position of this role
  #
  # source://discordrb//lib/discordrb/data/role.rb#152
  def sort_above(other = T.unsafe(nil)); end

  # Updates the data cache from a hash containing data
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/role.rb#100
  def update_data(new_data); end

  # Updates the data cache from another Role object
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/role.rb#88
  def update_from(other); end

  # @note This requests a member chunk if it hasn't for the server before, which may be slow initially
  # @return [Array<Member>] an array of members who have this role.
  #
  # source://discordrb//lib/discordrb/data/role.rb#79
  def users; end

  private

  # source://discordrb//lib/discordrb/data/role.rb#181
  def update_role_data(new_data); end
end

# This class is used internally as a wrapper to a Role object that allows easy writing of permission data.
class Discordrb::Role::RoleWriter
  # @return [RoleWriter] a new instance of RoleWriter
  #
  # source://discordrb//lib/discordrb/data/role.rb#38
  def initialize(role, token); end

  # The inspect method is overridden, in this case to prevent the token being leaked
  #
  # source://discordrb//lib/discordrb/data/role.rb#50
  def inspect; end

  # Write the specified permission data to the role, without updating the permission cache
  #
  # @param bits [Integer] The packed permissions to write.
  #
  # source://discordrb//lib/discordrb/data/role.rb#45
  def write(bits); end
end

# A server on Discord
class Discordrb::Server
  include ::Discordrb::IDObject
  include ::Discordrb::ServerAttributes

  # @return [Server] a new instance of Server
  #
  # source://discordrb//lib/discordrb/data/server.rb#65
  def initialize(data, bot); end

  # Adds a channel to this server's cache
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#861
  def add_channel(channel); end

  # Adds a new custom emoji on this server.
  #
  # @param name [String] The name of emoji to create.
  # @param image [String, #read] A base64 encoded string with the image data, or an object that responds to `#read`, such as `File`.
  # @param roles [Array<Role, String, Integer>] An array of roles, or role IDs to be whitelisted for this emoji.
  # @param reason [String] The reason the for the creation of this emoji.
  # @return [Emoji] The emoji that has been added.
  #
  # source://discordrb//lib/discordrb/data/server.rb#554
  def add_emoji(name, image, roles = T.unsafe(nil), reason: T.unsafe(nil)); end

  # Adds a member to the member cache.
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#437
  def add_member(member); end

  # Adds a member to this guild that has granted this bot's application an OAuth2 access token
  # with the `guilds.join` scope.
  # For more information about Discord's OAuth2 implementation, see: https://discord.com/developers/docs/topics/oauth2
  #
  # @note Your bot must be present in this server, and have permission to create instant invites for this to work.
  # @param user [User, String, Integer] the user, or ID of the user to add to this server
  # @param access_token [String] the OAuth2 Bearer token that has been granted the `guilds.join` scope
  # @param nick [String] the nickname to give this member upon joining
  # @param deaf [true, false] whether this member will be server deafened upon joining
  # @param mute [true, false] whether this member will be server muted upon joining
  # @param roles [Role, Array<Role, String, Integer>] the role (or roles) to give this member upon joining
  # @return [Member, nil] the created member, or `nil` if the user is already a member of this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#287
  def add_member_using_token(user, access_token, nick: T.unsafe(nil), roles: T.unsafe(nil), deaf: T.unsafe(nil), mute: T.unsafe(nil)); end

  # Adds a role to the role cache
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#404
  def add_role(role); end

  # @return [Channel, nil] the AFK voice channel of this server, or `nil` if none is set.
  #
  # source://discordrb//lib/discordrb/data/server.rb#824
  def afk_channel; end

  # Sets the server's AFK channel.
  #
  # @param afk_channel [Channel, nil] The new AFK channel, or `nil` if there should be none set.
  #
  # source://discordrb//lib/discordrb/data/server.rb#696
  def afk_channel=(afk_channel); end

  # @return [Integer] the amount of time after which a voice user gets moved into the AFK channel, in seconds.
  #
  # source://discordrb//lib/discordrb/data/server.rb#51
  def afk_timeout; end

  # Sets the amount of time after which a user gets moved into the AFK channel.
  #
  # @param afk_timeout [Integer] The AFK timeout, in seconds.
  #
  # source://discordrb//lib/discordrb/data/server.rb#708
  def afk_timeout=(afk_timeout); end

  # @return [true, false] whether this server has any emoji or not.
  #
  # source://discordrb//lib/discordrb/data/server.rb#784
  def any_emoji?; end

  # @param action [Symbol] The action to only include.
  # @param user [User, String, Integer] The user, or their ID, to filter entries to.
  # @param limit [Integer] The amount of entries to limit it to.
  # @param before [Entry, String, Integer] The entry, or its ID, to use to not include all entries after it.
  # @return [AuditLogs] The server's audit logs.
  #
  # source://discordrb//lib/discordrb/data/server.rb#183
  def audit_logs(action: T.unsafe(nil), user: T.unsafe(nil), limit: T.unsafe(nil), before: T.unsafe(nil)); end

  # @return [Array<VoiceRegion>] collection of available voice regions to this guild
  #
  # source://discordrb//lib/discordrb/data/server.rb#661
  def available_voice_regions; end

  # Bans a user from this server.
  #
  # @param user [User, String, Integer] The user to ban.
  # @param message_days [Integer] How many days worth of messages sent by the user should be deleted.
  # @param reason [String] The reason the user is being banned.
  #
  # source://discordrb//lib/discordrb/data/server.rb#613
  def ban(user, message_days = T.unsafe(nil), reason: T.unsafe(nil)); end

  # @return [String] the hexadecimal ID used to identify this server's banner image, shown by the server name.
  #
  # source://discordrb//lib/discordrb/data/server.rb#381
  def banner_id; end

  # @return [String, nil] the banner image URL for the server's banner image, or
  #   `nil` if there is no banner image.
  #
  # source://discordrb//lib/discordrb/data/server.rb#387
  def banner_url; end

  # @return [Array<ServerBan>] a list of banned users on this server and the reason they were banned.
  #
  # source://discordrb//lib/discordrb/data/server.rb#602
  def bans; end

  # Prunes (kicks) an amount of members for inactivity
  #
  # @param days [Integer] the number of days to consider for inactivity (between 1 and 30)
  # @param reason [String] The reason the for the prune.
  # @raise [ArgumentError] if days is not between 1 and 30 (inclusive)
  # @return [Integer] the number of members removed at the end of the operation
  #
  # source://discordrb//lib/discordrb/data/server.rb#312
  def begin_prune(days, reason = T.unsafe(nil)); end

  # The server's Nitro boost level.
  #
  # @return [Integer] the boost level, 0 if no level.
  #
  # source://discordrb//lib/discordrb/data/server.rb#62
  def boost_level; end

  # The server's amount of Nitro boosters.
  #
  # @return [Integer] the amount of boosters, 0 if no one has boosted.
  #
  # source://discordrb//lib/discordrb/data/server.rb#58
  def booster_count; end

  # @return [Member] the bot's own `Member` on this server
  #
  # source://discordrb//lib/discordrb/data/server.rb#168
  def bot; end

  # @return [Array<Member>] an array of all the bot members on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#158
  def bot_members; end

  # Cache @embed
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#195
  def cache_embed_data; end

  # Adds a member to the cache
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#460
  def cache_member(member); end

  # @return [Array<Channel>] an array of category channels on this server
  #
  # source://discordrb//lib/discordrb/data/server.rb#332
  def categories; end

  # @return [Array<Channel>] an array of all the channels (text and voice) on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#30
  def channels; end

  # @return [Symbol] the explicit content filter level of the server (:none = 'Don't scan any messages.', :exclude_roles = 'Scan messages for members without a role.', :all = 'Scan messages sent by all members.').
  #
  # source://discordrb//lib/discordrb/data/server.rb#769
  def content_filter_level; end

  # Creates a channel on this server with the given name.
  #
  # @note If parent is provided, permission overwrites have the follow behavior:
  #
  #   1. If overwrites is null, the new channel inherits the parent's permissions.
  #   2. If overwrites is [], the new channel inherits the parent's permissions.
  #   3. If you supply one or more overwrites, the channel will be created with those permissions and ignore the parents.
  # @param name [String] Name of the channel to create
  # @param type [Integer, Symbol] Type of channel to create (0: text, 2: voice, 4: category, 5: news, 6: store)
  # @param topic [String] the topic of this channel, if it will be a text channel
  # @param bitrate [Integer] the bitrate of this channel, if it will be a voice channel
  # @param user_limit [Integer] the user limit of this channel, if it will be a voice channel
  # @param parent [Channel, String, Integer] parent category, or its ID, for this channel to be created in.
  # @param nsfw [true, false] whether this channel should be created as nsfw
  # @param rate_limit_per_user [Integer] how many seconds users need to wait in between messages.
  # @param reason [String] The reason the for the creation of this channel.
  # @param permission_overwrites [Array<Hash>, Array<Overwrite>] permission overwrites for this channel
  # @raise [ArgumentError] if type is not 0 (text), 2 (voice), 4 (category), 5 (news), or 6 (store)
  # @return [Channel] the created channel.
  #
  # source://discordrb//lib/discordrb/data/server.rb#510
  def create_channel(name, type = T.unsafe(nil), topic: T.unsafe(nil), bitrate: T.unsafe(nil), user_limit: T.unsafe(nil), permission_overwrites: T.unsafe(nil), parent: T.unsafe(nil), nsfw: T.unsafe(nil), rate_limit_per_user: T.unsafe(nil), position: T.unsafe(nil), reason: T.unsafe(nil)); end

  # Creates a role on this server which can then be modified. It will be initialized
  # with the regular role defaults the client uses unless specified, i.e. name is "new role",
  # permissions are the default, colour is the default etc.
  #
  # @param name [String] Name of the role to create
  # @param colour [Integer, ColourRGB, #combined] The roles colour
  # @param hoist [true, false]
  # @param mentionable [true, false]
  # @param permissions [Integer, Array<Symbol>, Permissions, #bits] The permissions to write to the new role.
  # @param reason [String] The reason the for the creation of this role.
  # @return [Role] the created role.
  #
  # source://discordrb//lib/discordrb/data/server.rb#530
  def create_role(name: T.unsafe(nil), colour: T.unsafe(nil), hoist: T.unsafe(nil), mentionable: T.unsafe(nil), permissions: T.unsafe(nil), reason: T.unsafe(nil)); end

  # The default channel is the text channel on this server with the highest position
  # that the bot has Read Messages permission on.
  #
  # @param send_messages [true, false] whether to additionally consider if the bot has Send Messages permission
  # @return [Channel, nil] The default channel on this server, or `nil` if there are no channels that the bot can read.
  #
  # source://discordrb//lib/discordrb/data/server.rb#105
  def default_channel(send_messages = T.unsafe(nil)); end

  # @return [Symbol] the default message notifications settings of the server (:all = 'All messages', :mentions = 'Only @mentions').
  #
  # source://discordrb//lib/discordrb/data/server.rb#741
  def default_message_notifications; end

  # Sets the default message notification level
  #
  # @param notification_level [Integer, Symbol] The default message notification 0-1 or Symbol (see {NOTIFICATION_LEVELS})
  #
  # source://discordrb//lib/discordrb/data/server.rb#747
  def default_message_notifications=(notification_level); end

  # Deletes this server. Be aware that this is permanent and impossible to undo, so be careful!
  #
  # source://discordrb//lib/discordrb/data/server.rb#639
  def delete; end

  # Deletes a channel from this server's cache
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#869
  def delete_channel(id); end

  # Delete a custom emoji on this server
  #
  # @param emoji [Emoji, String, Integer] The emoji or emoji ID to be deleted.
  # @param reason [String] The reason the for the deletion of this emoji.
  #
  # source://discordrb//lib/discordrb/data/server.rb#569
  def delete_emoji(emoji, reason: T.unsafe(nil)); end

  # Removes a member from the member cache.
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#445
  def delete_member(user_id); end

  # Removes a role from the role cache
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#411
  def delete_role(role_id); end

  # Changes the name and/or role whitelist of an emoji on this server.
  #
  # @param emoji [Emoji, String, Integer] The emoji or emoji ID to edit.
  # @param name [String] The new name for the emoji.
  # @param roles [Array<Role, String, Integer>] A new array of roles, or role IDs, to whitelist.
  # @param reason [String] The reason for the editing of this emoji.
  # @return [Emoji] The edited emoji.
  #
  # source://discordrb//lib/discordrb/data/server.rb#579
  def edit_emoji(emoji, name: T.unsafe(nil), roles: T.unsafe(nil), reason: T.unsafe(nil)); end

  # @return [true, false] whether or not the server has widget enabled
  #
  # source://discordrb//lib/discordrb/data/server.rb#202
  def embed?; end

  # @return [Channel, nil] the channel the server embed will make an invite for.
  #
  # source://discordrb//lib/discordrb/data/server.rb#211
  def embed_channel; end

  # Changes the channel on the server's embed (widget)
  #
  # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the embed
  #
  # source://discordrb//lib/discordrb/data/server.rb#236
  def embed_channel=(channel); end

  # Sets whether this server's embed (widget) is enabled
  #
  # @param value [true, false]
  #
  # source://discordrb//lib/discordrb/data/server.rb#219
  def embed_enabled=(value); end

  # @return [true, false] whether or not the server has widget enabled
  #
  # source://discordrb//lib/discordrb/data/server.rb#202
  def embed_enabled?; end

  # @return [Hash<Integer => Emoji>] a hash of all the emoji available on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#36
  def emoji; end

  # @return [true, false] whether this server has any emoji or not.
  #
  # source://discordrb//lib/discordrb/data/server.rb#784
  def emoji?; end

  # @return [Hash<Integer => Emoji>] a hash of all the emoji available on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#36
  def emojis; end

  # @return [Role] The @everyone role on this server
  #
  # source://discordrb//lib/discordrb/data/server.rb#119
  def everyone_role; end

  # @return [Symbol] the explicit content filter level of the server (:none = 'Don't scan any messages.', :exclude_roles = 'Scan messages for members without a role.', :all = 'Scan messages sent by all members.').
  #
  # source://discordrb//lib/discordrb/data/server.rb#769
  def explicit_content_filter; end

  # Sets the server content filter.
  #
  # @param filter_level [Integer, Symbol] The content filter from 0-2 or Symbol (see {FILTER_LEVELS})
  #
  # source://discordrb//lib/discordrb/data/server.rb#777
  def explicit_content_filter=(filter_level); end

  # @return [Array<Symbol>] the features of the server (eg. "INVITE_SPLASH")
  #
  # source://discordrb//lib/discordrb/data/server.rb#45
  def features; end

  # The default channel is the text channel on this server with the highest position
  # that the bot has Read Messages permission on.
  #
  # @param send_messages [true, false] whether to additionally consider if the bot has Send Messages permission
  # @return [Channel, nil] The default channel on this server, or `nil` if there are no channels that the bot can read.
  #
  # source://discordrb//lib/discordrb/data/server.rb#105
  def general_channel(send_messages = T.unsafe(nil)); end

  # @return [true, false] whether this server has any emoji or not.
  #
  # source://discordrb//lib/discordrb/data/server.rb#784
  def has_emoji?; end

  # Sets the server's icon.
  #
  # @param icon [String, #read] The new icon, in base64-encoded JPG format.
  #
  # source://discordrb//lib/discordrb/data/server.rb#684
  def icon=(icon); end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/server.rb#883
  def inspect; end

  # @return [Array<Integration>] an array of all the integrations connected to this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#173
  def integrations; end

  # Requests a list of Invites to the server.
  #
  # @return [Array<Invite>] invites to the server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#800
  def invites; end

  # @return [String] a URL that a user can use to navigate to this server in the client
  #
  # source://discordrb//lib/discordrb/data/server.rb#395
  def jump_link; end

  # Kicks a user from this server.
  #
  # @param user [User, String, Integer] The user to kick.
  # @param reason [String] The reason the user is being kicked.
  #
  # source://discordrb//lib/discordrb/data/server.rb#627
  def kick(user, reason = T.unsafe(nil)); end

  # it means the members list may be inaccurate for a couple seconds after starting up the bot.
  #
  # @return [true, false] whether or not this server is large (members > 100). If it is,
  #
  # source://discordrb//lib/discordrb/data/server.rb#41
  def large; end

  # it means the members list may be inaccurate for a couple seconds after starting up the bot.
  #
  # @return [true, false] whether or not this server is large (members > 100). If it is,
  #
  # source://discordrb//lib/discordrb/data/server.rb#41
  def large?; end

  # Leave the server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#644
  def leave; end

  # @return [String] a URL that a user can use to navigate to this server in the client
  #
  # source://discordrb//lib/discordrb/data/server.rb#395
  def link; end

  # The amount of emoji the server can have, based on its current Nitro Boost Level.
  #
  # @return [Integer] the max amount of emoji
  #
  # source://discordrb//lib/discordrb/data/server.rb#588
  def max_emoji; end

  # Gets a member on this server based on user ID
  #
  # @param id [Integer] The user ID to look for
  # @param request [true, false] Whether the member should be requested from Discord if it's not cached
  #
  # source://discordrb//lib/discordrb/data/server.rb#134
  def member(id, request = T.unsafe(nil)); end

  # Checks whether a member is cached
  #
  # @note For internal use only
  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/data/server.rb#453
  def member_cached?(user_id); end

  # @return [Integer] the absolute number of members on this server, offline or not.
  #
  # source://discordrb//lib/discordrb/data/server.rb#48
  def member_count; end

  # @return [Array<Member>] an array of all the members on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#146
  def members; end

  # Changes the channel on the server's embed (widget), and sets whether it is enabled.
  #
  # @param enabled [true, false] whether the embed (widget) is enabled
  # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the embed
  # @param reason [String, nil] the reason to be shown in the audit log for this action
  #
  # source://discordrb//lib/discordrb/data/server.rb#255
  def modify_embed(enabled, channel, reason = T.unsafe(nil)); end

  # Changes the channel on the server's embed (widget), and sets whether it is enabled.
  #
  # @param enabled [true, false] whether the embed (widget) is enabled
  # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the embed
  # @param reason [String, nil] the reason to be shown in the audit log for this action
  #
  # source://discordrb//lib/discordrb/data/server.rb#255
  def modify_widget(enabled, channel, reason = T.unsafe(nil)); end

  # Forcibly moves a user into a different voice channel. Only works if the bot has the permission needed.
  #
  # @param user [User, String, Integer] The user to move.
  # @param channel [Channel, String, Integer] The voice channel to move into.
  #
  # source://discordrb//lib/discordrb/data/server.rb#634
  def move(user, channel); end

  # Sets the server's name.
  #
  # @param name [String] The new server name.
  #
  # source://discordrb//lib/discordrb/data/server.rb#656
  def name=(name); end

  # @return [Array<Member>] an array of all the non bot members on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#163
  def non_bot_members; end

  # Sets the default message notification level
  #
  # @param notification_level [Integer, Symbol] The default message notification 0-1 or Symbol (see {NOTIFICATION_LEVELS})
  #
  # source://discordrb//lib/discordrb/data/server.rb#747
  def notification_level=(notification_level); end

  # @param include_idle [true, false] Whether to count idle members as online.
  # @param include_bots [true, false] Whether to include bot accounts in the count.
  # @return [Array<Member>] an array of online members on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#268
  def online_members(include_idle: T.unsafe(nil), include_bots: T.unsafe(nil)); end

  # @param include_idle [true, false] Whether to count idle members as online.
  # @param include_bots [true, false] Whether to include bot accounts in the count.
  # @return [Array<Member>] an array of online members on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#268
  def online_users(include_idle: T.unsafe(nil), include_bots: T.unsafe(nil)); end

  # @return [Array<Channel>] an array of channels on this server that are not in a category
  #
  # source://discordrb//lib/discordrb/data/server.rb#337
  def orphan_channels; end

  # @return [Member] The server owner.
  #
  # source://discordrb//lib/discordrb/data/server.rb#97
  def owner; end

  # Transfers server ownership to another user.
  #
  # @param user [User, String, Integer] The user who should become the new owner.
  #
  # source://discordrb//lib/discordrb/data/server.rb#650
  def owner=(user); end

  # Processes a GUILD_MEMBERS_CHUNK packet, specifically the members field
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#808
  def process_chunk(members); end

  # Prunes (kicks) an amount of members for inactivity
  #
  # @param days [Integer] the number of days to consider for inactivity (between 1 and 30)
  # @param reason [String] The reason the for the prune.
  # @raise [ArgumentError] if days is not between 1 and 30 (inclusive)
  # @return [Integer] the number of members removed at the end of the operation
  #
  # source://discordrb//lib/discordrb/data/server.rb#312
  def prune(days, reason = T.unsafe(nil)); end

  # Returns the amount of members that are candidates for pruning
  #
  # @param days [Integer] the number of days to consider for inactivity
  # @raise [ArgumentError] if days is not between 1 and 30 (inclusive)
  # @return [Integer] number of members to be removed
  #
  # source://discordrb//lib/discordrb/data/server.rb#300
  def prune_count(days); end

  # @note This may return `nil` if this server's voice region is deprecated.
  # @return [VoiceRegion, nil] voice region data for this server's region
  #
  # source://discordrb//lib/discordrb/data/server.rb#672
  def region; end

  # Moves the server to another region. This will cause a voice interruption of at most a second.
  #
  # @param region [String] The new region the server should be in.
  #
  # source://discordrb//lib/discordrb/data/server.rb#678
  def region=(region); end

  # @return [String] the ID of the region the server is on (e.g. `amsterdam`).
  #
  # source://discordrb//lib/discordrb/data/server.rb#27
  def region_id; end

  # Gets a role on this server based on its ID.
  #
  # @param id [String, Integer] The role ID to look for.
  # @return [Role, nil] The role identified by the ID, or `nil` if it couldn't be found.
  #
  # source://discordrb//lib/discordrb/data/server.rb#126
  def role(id); end

  # @return [Array<Role>] an array of all the roles created on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#33
  def roles; end

  # Changes the channel on the server's embed (widget)
  #
  # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the embed
  # @param reason [String, nil] the reason to be shown in the audit log for this action
  #
  # source://discordrb//lib/discordrb/data/server.rb#245
  def set_embed_channel(channel, reason = T.unsafe(nil)); end

  # Sets whether this server's embed (widget) is enabled
  #
  # @param value [true, false]
  # @param reason [String, nil] the reason to be shown in the audit log for this action
  #
  # source://discordrb//lib/discordrb/data/server.rb#228
  def set_embed_enabled(value, reason = T.unsafe(nil)); end

  # Changes the channel on the server's embed (widget)
  #
  # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the embed
  # @param reason [String, nil] the reason to be shown in the audit log for this action
  #
  # source://discordrb//lib/discordrb/data/server.rb#245
  def set_widget_channel(channel, reason = T.unsafe(nil)); end

  # Sets whether this server's embed (widget) is enabled
  #
  # @param value [true, false]
  # @param reason [String, nil] the reason to be shown in the audit log for this action
  #
  # source://discordrb//lib/discordrb/data/server.rb#228
  def set_widget_enabled(value, reason = T.unsafe(nil)); end

  # Sets the server splash
  #
  # @param splash_hash [String] The splash hash
  #
  # source://discordrb//lib/discordrb/data/server.rb#757
  def splash=(splash_hash); end

  # @return [String] the hexadecimal ID used to identify this server's splash image for their VIP invite page.
  #
  # source://discordrb//lib/discordrb/data/server.rb#366
  def splash_hash; end

  # @return [String] the hexadecimal ID used to identify this server's splash image for their VIP invite page.
  #
  # source://discordrb//lib/discordrb/data/server.rb#366
  def splash_id; end

  # @return [String, nil] the splash image URL for the server's VIP invite page.
  #   `nil` if there is no splash image.
  #
  # source://discordrb//lib/discordrb/data/server.rb#373
  def splash_url; end

  # @return [Channel, nil] the system channel (used for automatic welcome messages) of a server, or `nil` if none is set.
  #
  # source://discordrb//lib/discordrb/data/server.rb#829
  def system_channel; end

  # Sets the server's system channel.
  #
  # @param system_channel [Channel, String, Integer, nil] The new system channel, or `nil` should it be disabled.
  #
  # source://discordrb//lib/discordrb/data/server.rb#702
  def system_channel=(system_channel); end

  # @return [Array<Channel>] an array of text channels on this server
  #
  # source://discordrb//lib/discordrb/data/server.rb#322
  def text_channels; end

  # Unbans a previously banned user from this server.
  #
  # @param user [User, String, Integer] The user to unban.
  # @param reason [String] The reason the user is being unbanned.
  #
  # source://discordrb//lib/discordrb/data/server.rb#620
  def unban(user, reason = T.unsafe(nil)); end

  # Updates the cached data with new data
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#836
  def update_data(new_data = T.unsafe(nil)); end

  # Updates the cached emoji data with new data
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#877
  def update_emoji_data(new_data); end

  # Updates the positions of all roles on the server
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#426
  def update_role_positions(role_positions); end

  # Updates a member's voice state
  #
  # @note For internal use only
  #
  # source://discordrb//lib/discordrb/data/server.rb#467
  def update_voice_state(data); end

  # @return [Array<Member>] an array of all the members on this server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#146
  def users; end

  # @return [Symbol] the verification level of the server (:none = none, :low = 'Must have a verified email on their Discord account', :medium = 'Has to be registered with Discord for at least 5 minutes', :high = 'Has to be a member of this server for at least 10 minutes', :very_high = 'Must have a verified phone on their Discord account').
  #
  # source://discordrb//lib/discordrb/data/server.rb#722
  def verification_level; end

  # Sets the verification level of the server
  #
  # @param level [Integer, Symbol] The verification level from 0-4 or Symbol (see {VERIFICATION_LEVELS})
  #
  # source://discordrb//lib/discordrb/data/server.rb#728
  def verification_level=(level); end

  # @return [Array<Channel>] an array of voice channels on this server
  #
  # source://discordrb//lib/discordrb/data/server.rb#327
  def voice_channels; end

  # @return [Hash<Integer => VoiceState>] the hash (user ID => voice state) of voice states of members on this server
  #
  # source://discordrb//lib/discordrb/data/server.rb#54
  def voice_states; end

  # Requests a list of Webhooks on the server.
  #
  # @return [Array<Webhook>] webhooks on the server.
  #
  # source://discordrb//lib/discordrb/data/server.rb#793
  def webhooks; end

  # @return [true, false] whether or not the server has widget enabled
  #
  # source://discordrb//lib/discordrb/data/server.rb#202
  def widget?; end

  # @param style [Symbol] The style the picture should have. Possible styles are:
  #   * `:banner1` creates a rectangular image with the server name, member count and icon, a "Powered by Discord" message on the bottom and an arrow on the right.
  #   * `:banner2` creates a less tall rectangular image that has the same information as `banner1`, but the Discord logo on the right - together with the arrow and separated by a diagonal separator.
  #   * `:banner3` creates an image similar in size to `banner1`, but it has the arrow in the bottom part, next to the Discord logo and with a "Chat now" text.
  #   * `:banner4` creates a tall, almost square, image that prominently features the Discord logo at the top and has a "Join my server" in a pill-style button on the bottom. The information about the server is in the same format as the other three `banner` styles.
  #   * `:shield` creates a very small, long rectangle, of the style you'd find at the top of GitHub `README.md` files. It features a small version of the Discord logo at the left and the member count at the right.
  # @return [String, nil] the widget banner URL to the server that displays the amount of online members,
  #   server icon and server name in a stylish way. `nil` if the widget is not enabled.
  #
  # source://discordrb//lib/discordrb/data/server.rb#358
  def widget_banner_url(style); end

  # @return [Channel, nil] the channel the server embed will make an invite for.
  #
  # source://discordrb//lib/discordrb/data/server.rb#211
  def widget_channel; end

  # Changes the channel on the server's embed (widget)
  #
  # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the embed
  #
  # source://discordrb//lib/discordrb/data/server.rb#236
  def widget_channel=(channel); end

  # @return [true, false] whether or not the server has widget enabled
  #
  # source://discordrb//lib/discordrb/data/server.rb#202
  def widget_enabled; end

  # Sets whether this server's embed (widget) is enabled
  #
  # @param value [true, false]
  #
  # source://discordrb//lib/discordrb/data/server.rb#219
  def widget_enabled=(value); end

  # @return [String, nil] the widget URL to the server that displays the amount of online members in a
  #   stylish way. `nil` if the widget is not enabled.
  #
  # source://discordrb//lib/discordrb/data/server.rb#343
  def widget_url; end

  private

  # source://discordrb//lib/discordrb/data/server.rb#953
  def process_channels(channels); end

  # source://discordrb//lib/discordrb/data/server.rb#918
  def process_emoji(emoji); end

  # source://discordrb//lib/discordrb/data/server.rb#927
  def process_members(members); end

  # source://discordrb//lib/discordrb/data/server.rb#936
  def process_presences(presences); end

  # source://discordrb//lib/discordrb/data/server.rb#904
  def process_roles(roles); end

  # source://discordrb//lib/discordrb/data/server.rb#966
  def process_voice_states(voice_states); end

  # source://discordrb//lib/discordrb/data/server.rb#889
  def update_server_data(new_data); end
end

# A map of possible content filter levels to symbol names
#
# source://discordrb//lib/discordrb/data/server.rb#762
Discordrb::Server::FILTER_LEVELS = T.let(T.unsafe(nil), Hash)

# A map of possible message notification levels to symbol names
#
# source://discordrb//lib/discordrb/data/server.rb#735
Discordrb::Server::NOTIFICATION_LEVELS = T.let(T.unsafe(nil), Hash)

# A map of possible server verification levels to symbol names
#
# source://discordrb//lib/discordrb/data/server.rb#713
Discordrb::Server::VERIFICATION_LEVELS = T.let(T.unsafe(nil), Hash)

# Basic attributes a server should have
module Discordrb::ServerAttributes
  # @return [String] the hexadecimal ID used to identify this server's icon.
  #
  # source://discordrb//lib/discordrb/data/server.rb#10
  def icon_id; end

  # Utility function to get the URL for the icon image
  #
  # @return [String] the URL to the icon image
  #
  # source://discordrb//lib/discordrb/data/server.rb#14
  def icon_url; end

  # @return [String] this server's name.
  #
  # source://discordrb//lib/discordrb/data/server.rb#7
  def name; end
end

# A ban entry on a server
class Discordrb::ServerBan
  # @return [ServerBan] a new instance of ServerBan
  #
  # source://discordrb//lib/discordrb/data/server.rb#987
  def initialize(server, user, reason); end

  # Removes this ban on the associated user in the server
  #
  # @param reason [String] the reason for removing the ban
  #
  # source://discordrb//lib/discordrb/data/server.rb#995
  def lift(reason = T.unsafe(nil)); end

  # @return [String, nil] the reason the user was banned, if provided
  #
  # source://discordrb//lib/discordrb/data/server.rb#978
  def reason; end

  # Removes this ban on the associated user in the server
  #
  # @param reason [String] the reason for removing the ban
  #
  # source://discordrb//lib/discordrb/data/server.rb#995
  def remove(reason = T.unsafe(nil)); end

  # @return [Server] the server this ban belongs to
  #
  # source://discordrb//lib/discordrb/data/server.rb#984
  def server; end

  # Removes this ban on the associated user in the server
  #
  # @param reason [String] the reason for removing the ban
  #
  # source://discordrb//lib/discordrb/data/server.rb#995
  def unban(reason = T.unsafe(nil)); end

  # @return [User] the user that was banned
  #
  # source://discordrb//lib/discordrb/data/server.rb#981
  def user; end
end

# This class stores the data of an active gateway session. Note that this is different from a websocket connection -
# there may be multiple sessions per connection or one session may persist over multiple connections.
class Discordrb::Session
  # @return [Session] a new instance of Session
  #
  # source://discordrb//lib/discordrb/gateway.rb#96
  def initialize(session_id); end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/gateway.rb#122
  def invalid?; end

  # Flags this session as being invalid
  #
  # source://discordrb//lib/discordrb/gateway.rb#118
  def invalidate; end

  # Flags this session as no longer being suspended, so we can resume
  #
  # source://discordrb//lib/discordrb/gateway.rb#113
  def resume; end

  # Returns the value of attribute sequence.
  #
  # source://discordrb//lib/discordrb/gateway.rb#94
  def sequence; end

  # Sets the attribute sequence
  #
  # @param value the value to set the attribute sequence to.
  #
  # source://discordrb//lib/discordrb/gateway.rb#94
  def sequence=(_arg0); end

  # Returns the value of attribute session_id.
  #
  # source://discordrb//lib/discordrb/gateway.rb#93
  def session_id; end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/gateway.rb#126
  def should_resume?; end

  # Flags this session as suspended, so we know not to try and send heartbeats, etc. to the gateway until we've reconnected
  #
  # source://discordrb//lib/discordrb/gateway.rb#104
  def suspend; end

  # @return [Boolean]
  #
  # source://discordrb//lib/discordrb/gateway.rb#108
  def suspended?; end
end

# User on Discord, including internal data like discriminators
class Discordrb::User
  include ::Discordrb::IDObject
  include ::Discordrb::UserAttributes

  # @return [User] a new instance of User
  #
  # source://discordrb//lib/discordrb/data/user.rb#62
  def initialize(data, bot); end

  # @return [ActivitySet] the activities of the user
  #
  # source://discordrb//lib/discordrb/data/user.rb#55
  def activities; end

  # Add an await for a message from this user. Specifically, this adds a global await for a MessageEvent with this
  # user's ID as a :from attribute.
  #
  # @see Bot#add_await
  #
  # source://discordrb//lib/discordrb/data/user.rb#132
  def await(key, attributes = T.unsafe(nil), &block); end

  # Add a blocking await for a message from this user. Specifically, this adds a global await for a MessageEvent with this
  # user's ID as a :from attribute.
  #
  # @see Bot#add_await!
  #
  # source://discordrb//lib/discordrb/data/user.rb#139
  def await!(attributes = T.unsafe(nil), &block); end

  # @return [Hash<Symbol, Symbol>] the current online status (`:online`, `:idle` or `:dnd`) of the user
  #   on various device types (`:desktop`, `:mobile`, or `:web`). The value will be `nil` if the user is offline or invisible.
  #
  # source://discordrb//lib/discordrb/data/user.rb#59
  def client_status; end

  # Is the user the bot?
  #
  # @return [true, false] whether this user is the bot
  #
  # source://discordrb//lib/discordrb/data/user.rb#153
  def current_bot?; end

  # Get a user's PM channel or send them a PM
  #
  # @overload pm
  # @overload pm
  #
  # source://discordrb//lib/discordrb/data/user.rb#87
  def dm(content = T.unsafe(nil)); end

  # @return [true, false] whether this user is set to do not disturb.
  #
  # source://discordrb//lib/discordrb/data/user.rb#176
  def dnd?; end

  # @deprecated Please use {ActivitySet#games} for information about the user's game activity
  # @return [String, nil] the game the user is currently playing, or `nil` if nothing is being played.
  #
  # source://discordrb//lib/discordrb/data/user.rb#183
  def game; end

  # @return [true, false] whether this user is idle.
  #
  # source://discordrb//lib/discordrb/data/user.rb#176
  def idle?; end

  # The inspect method is overwritten to give more useful output
  #
  # source://discordrb//lib/discordrb/data/user.rb#200
  def inspect; end

  # @return [true, false] whether this user is offline.
  #
  # source://discordrb//lib/discordrb/data/user.rb#176
  def offline?; end

  # Gets the member this user is on a server
  #
  # @param server [Server] The server to get the member for
  # @return [Member] this user as a member on a particular server
  #
  # source://discordrb//lib/discordrb/data/user.rb#146
  def on(server); end

  # @return [true, false] whether this user is online.
  #
  # source://discordrb//lib/discordrb/data/user.rb#176
  def online?; end

  # Get a user's PM channel or send them a PM
  #
  # @overload pm
  # @overload pm
  #
  # source://discordrb//lib/discordrb/data/user.rb#87
  def pm(content = T.unsafe(nil)); end

  # source://discordrb//lib/discordrb/data/user.rb#163
  def process_client_status(client_status); end

  # Send the user a file.
  #
  # @example Send a file from disk
  #   user.send_file(File.open('rubytaco.png', 'r'))
  # @param file [File] The file to send to the user
  # @param caption [String] The caption of the file being sent
  # @param filename [String] Overrides the filename of the uploaded file
  # @param spoiler [true, false] Whether or not this file should appear as a spoiler.
  # @return [Message] the message sent to this user.
  #
  # source://discordrb//lib/discordrb/data/user.rb#108
  def send_file(file, caption = T.unsafe(nil), filename: T.unsafe(nil), spoiler: T.unsafe(nil)); end

  # @return [Symbol] the current online status of the user (`:online`, `:offline` or `:idle`)
  #
  # source://discordrb//lib/discordrb/data/user.rb#52
  def status; end

  # @deprecated Please use {ActivitySet#streaming} for information about the user's stream activity
  # @return [Integer] returns 1 for twitch streams, or 0 for no stream.
  #
  # source://discordrb//lib/discordrb/data/user.rb#189
  def stream_type; end

  # @deprecated Please use {ActivitySet#streaming} for information about the user's stream activity
  # @return [String, nil] the URL to the stream, if the user is currently streaming something
  #
  # source://discordrb//lib/discordrb/data/user.rb#195
  def stream_url; end

  # Set the user's presence data
  #
  # @note for internal use only
  #
  # source://discordrb//lib/discordrb/data/user.rb#122
  def update_presence(data); end

  # Set the user's name
  #
  # @note for internal use only
  #
  # source://discordrb//lib/discordrb/data/user.rb#115
  def update_username(username); end

  # @return [true, false] whether this user is a fake user for a webhook message
  #
  # source://discordrb//lib/discordrb/data/user.rb#158
  def webhook?; end
end

# Mixin for the attributes users should have
module Discordrb::UserAttributes
  # @return [String] the ID of this user's current avatar, can be used to generate an avatar URL.
  # @see #avatar_url
  #
  # source://discordrb//lib/discordrb/data/user.rb#22
  def avatar_id; end

  # @return [String] the ID of this user's current avatar, can be used to generate an avatar URL.
  # @see #avatar_url
  #
  # source://discordrb//lib/discordrb/data/user.rb#22
  def avatar_id=(_arg0); end

  # Utility function to get a user's avatar URL.
  #
  # @param format [String, nil] If `nil`, the URL will default to `webp` for static avatars, and will detect if the user has a `gif` avatar. You can otherwise specify one of `webp`, `jpg`, `png`, or `gif` to override this. Will always be PNG for default avatars.
  # @return [String] the URL to the avatar image.
  #
  # source://discordrb//lib/discordrb/data/user.rb#39
  def avatar_url(format = T.unsafe(nil)); end

  # @return [true, false] whether this user is a Discord bot account
  #
  # source://discordrb//lib/discordrb/data/user.rb#17
  def bot_account; end

  # @return [true, false] whether this user is a Discord bot account
  def bot_account?; end

  # @return [String] this user's discriminator which is used internally to identify users with identical usernames.
  def discord_tag; end

  # @return [String] this user's discriminator which is used internally to identify users with identical usernames.
  def discrim; end

  # @return [String] this user's discriminator which is used internally to identify users with identical usernames.
  #
  # source://discordrb//lib/discordrb/data/user.rb#11
  def discriminator; end

  # Utility function to get Discord's distinct representation of a user, i.e. username + discriminator
  #
  # @return [String] distinct representation of user
  #
  # source://discordrb//lib/discordrb/data/user.rb#32
  def distinct; end

  # Utility function to mention users in messages
  #
  # @return [String] the mention code in the form of <@id>
  #
  # source://discordrb//lib/discordrb/data/user.rb#26
  def mention; end

  # @return [String] this user's username
  def name; end

  # @return [String] this user's discriminator which is used internally to identify users with identical usernames.
  def tag; end

  # @return [String] this user's username
  #
  # source://discordrb//lib/discordrb/data/user.rb#7
  def username; end
end

# The current version of discordrb.
#
# source://discordrb//lib/discordrb/version.rb#6
Discordrb::VERSION = T.let(T.unsafe(nil), String)

# Voice support
module Discordrb::Voice; end

# How many bytes of data to read (1920 bytes * 2 channels) from audio PCM data
#
# source://discordrb//lib/discordrb/voice/voice_bot.rb#13
Discordrb::Voice::DATA_LENGTH = T.let(T.unsafe(nil), Integer)

# Signifies to Discord that encryption should be used
# TODO: Resolve replacement for this constant.
#
# @deprecated Discord now supports multiple encryption options.
#
# source://discordrb//lib/discordrb/voice/network.rb#25
Discordrb::Voice::ENCRYPTED_MODE = T.let(T.unsafe(nil), String)

# Encryption modes supported by Discord
#
# source://discordrb//lib/discordrb/voice/network.rb#32
Discordrb::Voice::ENCRYPTION_MODES = T.let(T.unsafe(nil), Array)

# This class conveniently abstracts opus and ffmpeg/avconv, for easy implementation of voice sending. It's not very
# useful for most users, but I guess it can be useful sometimes.
class Discordrb::Voice::Encoder
  # Create a new encoder
  #
  # @raise [LoadError]
  # @return [Encoder] a new instance of Encoder
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#26
  def initialize; end

  # Adjusts the volume of a given buffer of s16le PCM data.
  #
  # @param buf [String] An unencoded PCM (s16le) buffer.
  # @param mult [Float] The volume multiplier, 1 for same volume.
  # @return [String] The buffer with adjusted volume, s16le again
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#57
  def adjust_volume(buf, mult); end

  # Set the opus encoding bitrate
  #
  # @param value [Integer] The new bitrate to use, in bits per second (so 64000 if you want 64 kbps)
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#39
  def bitrate=(value); end

  # Encodes the given buffer using opus.
  #
  # @param buffer [String] An unencoded PCM (s16le) buffer.
  # @return [String] A buffer encoded using opus.
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#46
  def encode(buffer); end

  # Encodes a given file (or rather, decodes it) using ffmpeg. This accepts pretty much any format, even videos with
  # an audio track. For a list of supported formats, see https://ffmpeg.org/general.html#Audio-Codecs. It even accepts
  # URLs, though encoding them is pretty slow - I recommend to make a stream of it and then use {#encode_io} instead.
  #
  # @param file [String] The path or URL to encode.
  # @param options [String] ffmpeg options to pass after the -i flag
  # @return [IO] the audio, encoded as s16le PCM
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#79
  def encode_file(file, options = T.unsafe(nil)); end

  # Encodes an arbitrary IO audio stream using ffmpeg. Accepts pretty much any media format, even videos with audio
  # tracks. For a list of supported audio formats, see https://ffmpeg.org/general.html#Audio-Codecs.
  #
  # @param io [IO] The stream to encode.
  # @param options [String] ffmpeg options to pass after the -i flag
  # @return [IO] the audio, encoded as s16le PCM
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#89
  def encode_io(io, options = T.unsafe(nil)); end

  # @return [Integer] the volume used as a filter to ffmpeg/avconv.
  # @see VoiceBot#filter_volume=
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#23
  def filter_volume; end

  # @return [Integer] the volume used as a filter to ffmpeg/avconv.
  # @see VoiceBot#filter_volume=
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#23
  def filter_volume=(_arg0); end

  # Whether or not avconv should be used instead of ffmpeg. If possible, it is recommended to use ffmpeg instead,
  # as it is better supported.
  #
  # @return [true, false] whether avconv should be used instead of ffmpeg.
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#19
  def use_avconv; end

  # Whether or not avconv should be used instead of ffmpeg. If possible, it is recommended to use ffmpeg instead,
  # as it is better supported.
  #
  # @return [true, false] whether avconv should be used instead of ffmpeg.
  #
  # source://discordrb//lib/discordrb/voice/encoder.rb#19
  def use_avconv=(_arg0); end

  private

  # source://discordrb//lib/discordrb/voice/encoder.rb#96
  def ffmpeg_command; end

  # source://discordrb//lib/discordrb/voice/encoder.rb#100
  def filter_volume_argument; end
end

# One frame of complete silence Opus encoded
#
# source://discordrb//lib/discordrb/voice/encoder.rb#51
Discordrb::Voice::Encoder::OPUS_SILENCE = T.let(T.unsafe(nil), String)

# How long one voice packet should ideally be (20ms as defined by Discord)
#
# source://discordrb//lib/discordrb/voice/voice_bot.rb#10
Discordrb::Voice::IDEAL_LENGTH = T.let(T.unsafe(nil), Float)

# Signifies to Discord that no encryption should be used
#
# @deprecated Discord no longer supports unencrypted voice communication.
#
# source://discordrb//lib/discordrb/voice/network.rb#29
Discordrb::Voice::PLAIN_MODE = T.let(T.unsafe(nil), String)

module Discordrb::Voice::Sodium
  extend ::FFI::Library
end

# This class represents a connection to a Discord voice server and channel. It can be used to play audio files and
# streams and to control playback on currently playing tracks. The method {Bot#voice_connect} can be used to connect
# to a voice channel.
#
# discordrb does latency adjustments every now and then to improve playback quality. I made sure to put useful
# defaults for the adjustment parameters, but if the sound is patchy or too fast (or the speed varies a lot) you
# should check the parameters and adjust them to your connection: {VoiceBot#adjust_interval},
# {VoiceBot#adjust_offset}, and {VoiceBot#adjust_average}.
class Discordrb::Voice::VoiceBot
  # @return [VoiceBot] a new instance of VoiceBot
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#80
  def initialize(channel, bot, token, session, endpoint); end

  # This value determines whether or not the adjustment length should be averaged with the previous value. This may
  # be useful on slower connections where latencies vary a lot. In general, it will make adjustments more smooth,
  # but whether that is desired behaviour should be tried on a case-by-case basis.
  #
  # @return [true, false] whether adjustment lengths should be averaged with the respective previous value.
  # @see #adjust_interval
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#58
  def adjust_average; end

  # This value determines whether or not the adjustment length should be averaged with the previous value. This may
  # be useful on slower connections where latencies vary a lot. In general, it will make adjustments more smooth,
  # but whether that is desired behaviour should be tried on a case-by-case basis.
  #
  # @return [true, false] whether adjustment lengths should be averaged with the respective previous value.
  # @see #adjust_interval
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#58
  def adjust_average=(_arg0); end

  # Disable the debug message for length adjustment specifically, as it can get quite spammy with very low intervals
  #
  # @return [true, false] whether length adjustment debug messages should be printed
  # @see #adjust_interval
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#63
  def adjust_debug; end

  # Disable the debug message for length adjustment specifically, as it can get quite spammy with very low intervals
  #
  # @return [true, false] whether length adjustment debug messages should be printed
  # @see #adjust_interval
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#63
  def adjust_debug=(_arg0); end

  # discordrb will occasionally measure the time it takes to send a packet, and adjust future delay times based
  # on that data. This makes voice playback more smooth, because if packets are sent too slowly, the audio will
  # sound patchy, and if they're sent too quickly, packets will "pile up" and occasionally skip some data or
  # play parts back too fast. How often these measurements should be done depends a lot on the system, and if it's
  # done too quickly, especially on slow connections, the playback speed will vary wildly; if it's done too slowly
  # however, small errors will cause quality problems for a longer time.
  #
  # @return [Integer] how frequently audio length adjustments should be done, in ideal packets (20ms).
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#43
  def adjust_interval; end

  # discordrb will occasionally measure the time it takes to send a packet, and adjust future delay times based
  # on that data. This makes voice playback more smooth, because if packets are sent too slowly, the audio will
  # sound patchy, and if they're sent too quickly, packets will "pile up" and occasionally skip some data or
  # play parts back too fast. How often these measurements should be done depends a lot on the system, and if it's
  # done too quickly, especially on slow connections, the playback speed will vary wildly; if it's done too slowly
  # however, small errors will cause quality problems for a longer time.
  #
  # @return [Integer] how frequently audio length adjustments should be done, in ideal packets (20ms).
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#43
  def adjust_interval=(_arg0); end

  # This particular value is also important because ffmpeg may take longer to process the first few packets. It is
  # recommended to set this to 10 at maximum, otherwise it will take too long to make the first adjustment, but it
  # shouldn't be any higher than {#adjust_interval}, otherwise no adjustments will take place. If {#adjust_interval}
  # is at a value higher than 10, this value should not be changed at all.
  #
  # @return [Integer] the packet number (1 packet = 20ms) at which length adjustments should start.
  # @see #adjust_interval
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#51
  def adjust_offset; end

  # This particular value is also important because ffmpeg may take longer to process the first few packets. It is
  # recommended to set this to 10 at maximum, otherwise it will take too long to make the first adjustment, but it
  # shouldn't be any higher than {#adjust_interval}, otherwise no adjustments will take place. If {#adjust_interval}
  # is at a value higher than 10, this value should not be changed at all.
  #
  # @return [Integer] the packet number (1 packet = 20ms) at which length adjustments should start.
  # @see #adjust_interval
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#51
  def adjust_offset=(_arg0); end

  # @return [Channel] the current voice channel
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#25
  def channel; end

  # Sets the attribute channel
  #
  # @param value the value to set the attribute channel to.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#28
  def channel=(_arg0); end

  # Continue playback. This change may take up to 100ms to take effect, which is usually negligible.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#139
  def continue; end

  # Permanently disconnects from the voice channel; to reconnect you will have to call {Bot#voice_connect} again.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#175
  def destroy; end

  # @return [Encoder] the encoder used to encode audio files into the format required by Discord.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#34
  def encoder; end

  # @deprecated Discord no longer supports unencrypted voice communication.
  # @return [true, false] whether audio data sent will be encrypted.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#107
  def encrypted?; end

  # @return [Integer] the volume used as a filter for ffmpeg/avconv.
  # @see #filter_volume=
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#120
  def filter_volume; end

  # Set the filter volume. This volume is applied as a filter for decoded audio data. It has the advantage that using
  # it is much faster than regular volume, but it can only be changed before starting to play something.
  #
  # @param value [Integer] The value to set the volume to. For possible values, see {#volume}
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#114
  def filter_volume=(value); end

  # @return [true, false] Whether it is playing sound or not.
  # @see #play
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#132
  def isplaying?; end

  # If this value is set, no length adjustments will ever be done and this value will always be used as the length
  # (i.e. packets will be sent every N seconds). Be careful not to set it too low as to not spam Discord's servers.
  # The ideal length is 20ms (accessible by the {Discordrb::Voice::IDEAL_LENGTH} constant), this value should be
  # slightly lower than that because encoding + sending takes time. Note that sending DCA files is significantly
  # faster than sending regular audio files (usually about four times as fast), so you might want to set this value
  # to something else if you're sending a DCA file.
  #
  # @return [Float] the packet length that should be used instead of calculating it during the adjustments, in ms.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#72
  def length_override; end

  # If this value is set, no length adjustments will ever be done and this value will always be used as the length
  # (i.e. packets will be sent every N seconds). Be careful not to set it too low as to not spam Discord's servers.
  # The ideal length is 20ms (accessible by the {Discordrb::Voice::IDEAL_LENGTH} constant), this value should be
  # slightly lower than that because encoding + sending takes time. Note that sending DCA files is significantly
  # faster than sending regular audio files (usually about four times as fast), so you might want to set this value
  # to something else if you're sending a DCA file.
  #
  # @return [Float] the packet length that should be used instead of calculating it during the adjustments, in ms.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#72
  def length_override=(_arg0); end

  # Pause playback. This is not instant; it may take up to 20 ms for this change to take effect. (This is usually
  # negligible.)
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#126
  def pause; end

  # Plays a stream of raw data to the channel. All playback methods are blocking, i.e. they wait for the playback to
  # finish before exiting the method. This doesn't cause a problem if you just use discordrb events/commands to
  # play stuff, as these are fully threaded, but if you don't want this behaviour anyway, be sure to call these
  # methods in separate threads.
  #
  # @param encoded_io [IO] A stream of raw PCM data (s16le)
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#186
  def play(encoded_io); end

  # Plays a stream of audio data in the DCA format. This format has the advantage that no recoding has to be
  # done - the file contains the data exactly as Discord needs it.
  #
  # @note DCA playback will not be affected by the volume modifier ({#volume}) because the modifier operates on raw
  #   PCM, not opus data. Modifying the volume of DCA data would involve decoding it, multiplying the samples and
  #   re-encoding it, which defeats its entire purpose (no recoding).
  # @raise [ArgumentError]
  # @see https://github.com/bwmarrin/dca
  # @see #play
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#262
  def play_dca(file); end

  # Plays an encoded audio file of arbitrary format to the channel.
  #
  # @see Encoder#encode_file
  # @see #play
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#244
  def play_file(file, options = T.unsafe(nil)); end

  # Plays a stream of encoded audio data of arbitrary format to the channel.
  #
  # @see Encoder#encode_io
  # @see #play
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#251
  def play_io(io, options = T.unsafe(nil)); end

  # Plays a stream of encoded audio data of arbitrary format to the channel.
  #
  # @see Encoder#encode_io
  # @see #play
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#251
  def play_stream(io, options = T.unsafe(nil)); end

  # @return [true, false] Whether it is playing sound or not.
  # @see #play
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#132
  def playing?; end

  # Skips to a later time in the song. It's impossible to go back without replaying the song.
  #
  # @param secs [Float] How many seconds to skip forwards. Skipping will always be done in discrete intervals of
  #   0.05 seconds, so if the given amount is smaller than that, it will be rounded up.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#146
  def skip(secs); end

  # Sets whether or not the bot is speaking (green circle around user).
  #
  # @note https://discordapp.com/developers/docs/topics/voice-connections#speaking for information on the speaking bitmask
  # @param value [true, false, Integer] whether or not the bot should be speaking, or a bitmask denoting the audio type
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#153
  def speaking=(value); end

  # Stops the current playback entirely.
  #
  # @param wait_for_confirmation [true, false] Whether the method should wait for confirmation from the playback
  #   method that the playback has actually stopped.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#161
  def stop_playing(wait_for_confirmation = T.unsafe(nil)); end

  # @return [Integer, nil] the amount of time the stream has been playing, or `nil` if nothing has been played yet.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#31
  def stream_time; end

  # The factor the audio's volume should be multiplied with. `1` is no change in volume, `0` is completely silent,
  # `0.5` is half the default volume and `2` is twice the default.
  #
  # @return [Float] the volume for audio playback, `1.0` by default.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#77
  def volume; end

  # The factor the audio's volume should be multiplied with. `1` is no change in volume, `0` is completely silent,
  # `0.5` is half the default volume and `2` is twice the default.
  #
  # @return [Float] the volume for audio playback, `1.0` by default.
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#77
  def volume=(_arg0); end

  private

  # Increment sequence and time
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#403
  def increment_packet_headers; end

  # Plays the data from the IO stream as Discord requires it
  #
  # source://discordrb//lib/discordrb/voice/voice_bot.rb#304
  def play_internal; end
end

# Represents a UDP connection to a voice server. This connection is used to send the actual audio data.
class Discordrb::Voice::VoiceUDP
  # Creates a new UDP connection. Only creates a socket as the discovery reply may come before the data is
  # initialized.
  #
  # @return [VoiceUDP] a new instance of VoiceUDP
  #
  # source://discordrb//lib/discordrb/voice/network.rb#52
  def initialize; end

  # Initializes the UDP socket with data obtained from opcode 2.
  #
  # @param ip [String] The IP address to connect to.
  # @param port [Integer] The port to connect to.
  # @param ssrc [Integer] The Super Secret Relay Code (SSRC). Discord uses this to identify different voice users
  #   on the same endpoint.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#62
  def connect(ip, port, ssrc); end

  # @deprecated Discord no longer supports unencrypted voice communication.
  # @return [true, false] whether or not UDP communications are encrypted.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#38
  def encrypted; end

  # @deprecated Discord no longer supports unencrypted voice communication.
  # @return [true, false] whether or not UDP communications are encrypted.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#38
  def encrypted=(_arg0); end

  # @deprecated Discord no longer supports unencrypted voice communication.
  # @return [true, false] whether or not UDP communications are encrypted.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#38
  def encrypted?; end

  # The UDP encryption mode
  #
  # source://discordrb//lib/discordrb/voice/network.rb#45
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#48
  def mode=(_arg0); end

  # Waits for a UDP discovery reply, and returns the sent data.
  #
  # @return [Array(String, Integer)] the IP and port received from the discovery reply.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#70
  def receive_discovery_reply; end

  # Sets the secret key used for encryption
  #
  # source://discordrb//lib/discordrb/voice/network.rb#42
  def secret_key=(_arg0); end

  # Makes an audio packet from a buffer and sends it to Discord.
  #
  # @param buf [String] The audio data to send, must be exactly one Opus frame
  # @param sequence [Integer] The packet sequence number, incremented by one for subsequent packets
  # @param time [Integer] When this packet should be played back, in no particular unit (essentially just the
  #   sequence number multiplied by 960)
  #
  # source://discordrb//lib/discordrb/voice/network.rb#83
  def send_audio(buf, sequence, time); end

  # Sends the UDP discovery packet with the internally stored SSRC. Discord will send a reply afterwards which can
  # be received using {#receive_discovery_reply}
  #
  # source://discordrb//lib/discordrb/voice/network.rb#100
  def send_discovery; end

  private

  # Encrypts audio data using libsodium
  #
  # @param buf [String] The encoded audio data to be encrypted
  # @param nonce [String] The nonce to be used to encrypt the data
  # @return [String] the audio data, encrypted
  #
  # source://discordrb//lib/discordrb/voice/network.rb#114
  def encrypt_audio(buf, nonce); end

  # @note The nonce generated depends on the encryption mode.
  #   In xsalsa20_poly1305 the nonce is the header plus twelve null bytes for padding.
  #   In xsalsa20_poly1305_suffix, the nonce is 24 random bytes
  #   In xsalsa20_poly1305_lite, the nonce is an incremental 4 byte int.
  # @param header [String] The header of the packet, to be used as the nonce
  # @return [String]
  #
  # source://discordrb//lib/discordrb/voice/network.rb#134
  def generate_nonce(header); end

  # source://discordrb//lib/discordrb/voice/network.rb#123
  def send_packet(packet); end
end

# Represents a websocket client connection to the voice server. The websocket connection (sometimes called vWS) is
# used to manage general data about the connection, such as sending the speaking packet, which determines the green
# circle around users on Discord, and obtaining UDP connection info.
class Discordrb::Voice::VoiceWS
  # Makes a new voice websocket client, but doesn't connect it (see {#connect} for that)
  #
  # @param channel [Channel] The voice channel to connect to
  # @param bot [Bot] The regular bot to which this vWS is bound
  # @param token [String] The authentication token which is also used for REST requests
  # @param session [String] The voice session ID Discord sends over the regular websocket
  # @param endpoint [String] The endpoint URL to connect to
  # @return [VoiceWS] a new instance of VoiceWS
  #
  # source://discordrb//lib/discordrb/voice/network.rb#170
  def initialize(channel, bot, token, session, endpoint); end

  # Communication goes like this:
  # me                    discord
  #   |                      |
  # websocket connect ->     |
  #   |                      |
  #   |     <- websocket opcode 2
  #   |                      |
  # UDP discovery ->         |
  #   |                      |
  #   |       <- UDP reply packet
  #   |                      |
  # websocket opcode 1 ->    |
  #   |                      |
  # ...
  #
  # source://discordrb//lib/discordrb/voice/network.rb#296
  def connect; end

  # Disconnects the websocket and kills the thread
  #
  # source://discordrb//lib/discordrb/voice/network.rb#319
  def destroy; end

  # Send a heartbeat (op 3), has to be done every @heartbeat_interval seconds or the connection will terminate
  #
  # source://discordrb//lib/discordrb/voice/network.rb#219
  def send_heartbeat; end

  # Send a connection init packet (op 0)
  #
  # @param server_id [Integer] The ID of the server to connect to
  # @param bot_user_id [Integer] The ID of the bot that is connecting
  # @param session_id [String] The voice session ID
  # @param token [String] The Discord authentication token
  #
  # source://discordrb//lib/discordrb/voice/network.rb#188
  def send_init(server_id, bot_user_id, session_id, token); end

  # Send a speaking packet (op 5). This determines the green circle around the avatar in the voice channel
  #
  # @param value [true, false, Integer] Whether or not the bot should be speaking, can also be a bitmask denoting audio type.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#231
  def send_speaking(value); end

  # Sends the UDP connection packet (op 1)
  #
  # @param ip [String] The IP to bind UDP to
  # @param port [Integer] The port to bind UDP to
  # @param mode [Object] Which mode to use for the voice connection
  #
  # source://discordrb//lib/discordrb/voice/network.rb#204
  def send_udp_connection(ip, port, mode); end

  # @return [VoiceUDP] the UDP voice connection over which the actual audio data is sent.
  #
  # source://discordrb//lib/discordrb/voice/network.rb#162
  def udp; end

  # source://discordrb//lib/discordrb/voice/network.rb#253
  def websocket_message(msg); end

  # Event handlers; public for websocket-simple to work correctly
  #
  # source://discordrb//lib/discordrb/voice/network.rb#244
  def websocket_open; end

  private

  # source://discordrb//lib/discordrb/voice/network.rb#325
  def heartbeat_loop; end

  # source://discordrb//lib/discordrb/voice/network.rb#338
  def init_ws; end
end

# The version of the voice gateway that's supposed to be used.
#
# source://discordrb//lib/discordrb/voice/network.rb#159
Discordrb::Voice::VoiceWS::VOICE_GATEWAY_VERSION = T.let(T.unsafe(nil), Integer)

# Voice regions are the locations of servers that handle voice communication in Discord
class Discordrb::VoiceRegion
  # @return [VoiceRegion] a new instance of VoiceRegion
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#31
  def initialize(data); end

  # @return [true, false] whether this is a custom voice region (used for events/etc)
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#29
  def custom; end

  # @return [true, false] whether this is a deprecated voice region (avoid switching to these)
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#26
  def deprecated; end

  # @return [String] unique ID for the region
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#7
  def id; end

  # @return [String] name of the region
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#11
  def name; end

  # @return [true, false] if this voice server is the closest to the client
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#23
  def optimal; end

  # @return [String] an example hostname for the region
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#14
  def sample_hostname; end

  # @return [Integer] an example port for the region
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#17
  def sample_port; end

  # @return [String] unique ID for the region
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#7
  def to_s; end

  # @return [true, false] if this is a VIP-only server
  #
  # source://discordrb//lib/discordrb/data/voice_region.rb#20
  def vip; end
end

# A voice state represents the state of a member's connection to a voice channel. It includes data like the voice
# channel the member is connected to and mute/deaf flags.
class Discordrb::VoiceState
  # @return [VoiceState] a new instance of VoiceState
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#26
  def initialize(user_id); end

  # @return [true, false] whether this voice state's member is deafened server-wide.
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#14
  def deaf; end

  # @return [true, false] whether this voice state's member is muted server-wide.
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#11
  def mute; end

  # @return [true, false] whether this voice state's member has deafened themselves.
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#20
  def self_deaf; end

  # @return [true, false] whether this voice state's member has muted themselves.
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#17
  def self_mute; end

  # Update this voice state with new data from Discord
  #
  # @note For internal use only.
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#33
  def update(channel, mute, deaf, self_mute, self_deaf); end

  # @return [Integer] the ID of the user whose voice state is represented by this object.
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#8
  def user_id; end

  # @return [Channel] the voice channel this voice state's member is in.
  #
  # source://discordrb//lib/discordrb/data/voice_state.rb#23
  def voice_channel; end
end

# Utility wrapper class that abstracts an instance of WSCS. Useful should we decide that WSCS isn't good either -
# in that case we can just switch to something else
class Discordrb::WebSocket
  # Create a new WebSocket and connect to the given endpoint.
  #
  # @param endpoint [String] Where to connect to.
  # @param open_handler [#call] The handler that should be called when the websocket has opened successfully.
  # @param message_handler [#call] The handler that should be called when the websocket receives a message. The
  #   handler can take one parameter which will have a `data` attribute for normal messages and `code` and `data` for
  #   close frames.
  # @param close_handler [#call] The handler that should be called when the websocket is closed due to an internal
  #   error. The error will be passed as the first parameter to the handler.
  # @param error_handler [#call] The handler that should be called when an error occurs in another handler. The error
  #   will be passed as the first parameter to the handler.
  # @return [WebSocket] a new instance of WebSocket
  #
  # source://discordrb//lib/discordrb/websocket.rb#31
  def initialize(endpoint, open_handler, message_handler, close_handler, error_handler); end

  # Close the WebSocket connection
  #
  # source://discordrb//lib/discordrb/websocket.rb#63
  def close; end

  # Returns the value of attribute close_handler.
  #
  # source://discordrb//lib/discordrb/websocket.rb#19
  def close_handler; end

  # Returns the value of attribute error_handler.
  #
  # source://discordrb//lib/discordrb/websocket.rb#19
  def error_handler; end

  # Returns the value of attribute message_handler.
  #
  # source://discordrb//lib/discordrb/websocket.rb#19
  def message_handler; end

  # Returns the value of attribute open_handler.
  #
  # source://discordrb//lib/discordrb/websocket.rb#19
  def open_handler; end

  # Send data over this WebSocket
  #
  # @param data [String] What to send
  #
  # source://discordrb//lib/discordrb/websocket.rb#58
  def send(data); end

  # @return [Thread] the internal WSCS thread
  #
  # source://discordrb//lib/discordrb/websocket.rb#68
  def thread; end
end

# A webhook on a server channel
class Discordrb::Webhook
  include ::Discordrb::IDObject

  # @return [Webhook] a new instance of Webhook
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#31
  def initialize(data, bot); end

  # @return [String] the webhook's avatar id.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#21
  def avatar; end

  # Sets the webhook's avatar.
  #
  # @param avatar [String, #read] The new avatar, in base64-encoded JPG format.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#54
  def avatar=(avatar); end

  # Utility function to get a webhook's avatar URL.
  #
  # @return [String] the URL to the avatar image
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#101
  def avatar_url; end

  # @return [Channel] the channel that the webhook is currently connected to.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#12
  def channel; end

  # Sets the webhook's channel
  #
  # @param channel [Channel, String, Integer] The channel the webhook should use.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#65
  def channel=(channel); end

  # Deletes the webhook.
  #
  # @param reason [String] The reason the invite is being deleted.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#91
  def delete(reason = T.unsafe(nil)); end

  # Deletes the webhook's avatar.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#59
  def delete_avatar; end

  # The `inspect` method is overwritten to give more useful output.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#108
  def inspect; end

  # @return [String] the webhook name.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#9
  def name; end

  # Sets the webhook's name.
  #
  # @param name [String] The webhook's new name.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#71
  def name=(name); end

  # Gets the user object of the creator of the webhook. May be limited to username, discriminator,
  # ID and avatar if the bot cannot reach the owner
  #
  # @return [Member, User, nil] the user object of the owner or nil if the webhook was requested using the token.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#29
  def owner; end

  # @return [Server] the server that the webhook is currently connected to.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#15
  def server; end

  # @return [String, nil] the webhook's token, if this is an Incoming Webhook.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#18
  def token; end

  # Utility function to know if the webhook was requested through a webhook token, rather than auth.
  #
  # @return [true, false] whether the webhook was requested by token or not.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#114
  def token?; end

  # @return [Integer] the webhook's type (1: Incoming, 2: Channel Follower)
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#24
  def type; end

  # Updates the webhook if you need to edit more than 1 attribute.
  #
  # @option data
  # @option data
  # @option data
  # @option data
  # @param data [Hash] the data to update.
  #
  # source://discordrb//lib/discordrb/data/webhook.rb#81
  def update(data); end

  private

  # source://discordrb//lib/discordrb/data/webhook.rb#120
  def avatarise(avatar); end

  # source://discordrb//lib/discordrb/data/webhook.rb#128
  def update_internal(data); end

  # source://discordrb//lib/discordrb/data/webhook.rb#134
  def update_webhook(new_data); end
end

# In discordrb, Integer and {String} are monkey-patched to allow for easy resolution of IDs
class Integer < ::Numeric
  # @return [Integer] The Discord ID represented by this integer, i.e. the integer itself
  #
  # source://discordrb//lib/discordrb.rb#92
  def resolve_id; end
end

Integer::GMP_VERSION = T.let(T.unsafe(nil), String)

# source://discordrb//lib/discordrb/voice/network.rb#18
LIBSODIUM_AVAILABLE = T.let(T.unsafe(nil), FalseClass)

# source://discordrb//lib/discordrb/voice/encoder.rb#8
OPUS_AVAILABLE = T.let(T.unsafe(nil), FalseClass)

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://discordrb//lib/discordrb/events/generic.rb#125
  def not!(object); end
end

# In discordrb, {Integer} and String are monkey-patched to allow for easy resolution of IDs
class String
  include ::Comparable

  # @return [Integer] The Discord ID represented by this string, i.e. the string converted to an integer
  #
  # source://discordrb//lib/discordrb.rb#100
  def resolve_id; end
end

# Patch to the WSCS class to allow reading the internal thread
class WebSocket::Client::Simple::Client
  include ::EventEmitter
  include ::EventEmitter::InstanceMethods

  # source://websocket-client-simple/0.6.0/lib/websocket-client-simple/client.rb#87
  def close; end

  # source://websocket-client-simple/0.6.0/lib/websocket-client-simple/client.rb#103
  def closed?; end

  # source://websocket-client-simple/0.6.0/lib/websocket-client-simple/client.rb#16
  def connect(url, options = T.unsafe(nil)); end

  # source://websocket-client-simple/0.6.0/lib/websocket-client-simple/client.rb#14
  def handshake; end

  # source://websocket-client-simple/0.6.0/lib/websocket-client-simple/client.rb#99
  def open?; end

  # source://websocket-client-simple/0.6.0/lib/websocket-client-simple/client.rb#72
  def send(data, opt = T.unsafe(nil)); end

  # @return [Thread] the internal thread this client is using for the event loop.
  #
  # source://discordrb//lib/discordrb/websocket.rb#11
  def thread; end

  # source://websocket-client-simple/0.6.0/lib/websocket-client-simple/client.rb#14
  def url; end
end
